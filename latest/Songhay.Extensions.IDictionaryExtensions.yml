### YamlMime:ManagedReference
items:
- uid: Songhay.Extensions.IDictionaryExtensions
  commentId: T:Songhay.Extensions.IDictionaryExtensions
  id: IDictionaryExtensions
  parent: Songhay.Extensions
  children:
  - Songhay.Extensions.IDictionaryExtensions.ToNameValueCollection``2(System.Collections.Generic.IDictionary{``0,``1})
  - Songhay.Extensions.IDictionaryExtensions.ToShallowClone``2(System.Collections.Generic.IDictionary{``0,``1})
  - Songhay.Extensions.IDictionaryExtensions.TryGetValueWithKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)
  - Songhay.Extensions.IDictionaryExtensions.TryGetValueWithKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Boolean)
  - Songhay.Extensions.IDictionaryExtensions.WithPair``2(System.Collections.Generic.IDictionary{``0,``1},System.Nullable{System.Collections.Generic.KeyValuePair{``0,``1}})
  - Songhay.Extensions.IDictionaryExtensions.WithPair``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)
  - Songhay.Extensions.IDictionaryExtensions.WithPairs``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})
  langs:
  - csharp
  - vb
  name: IDictionaryExtensions
  nameWithType: IDictionaryExtensions
  fullName: Songhay.Extensions.IDictionaryExtensions
  type: Class
  source:
    remote:
      path: SonghayCore/Extensions/IDictionaryExtensions.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: IDictionaryExtensions
    path: SonghayCore/Extensions/IDictionaryExtensions.cs
    startLine: 6
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Extensions of <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static class IDictionaryExtensions
    content.vb: Public Module IDictionaryExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Songhay.Extensions.IDictionaryExtensions.ToNameValueCollection``2(System.Collections.Generic.IDictionary{``0,``1})
  commentId: M:Songhay.Extensions.IDictionaryExtensions.ToNameValueCollection``2(System.Collections.Generic.IDictionary{``0,``1})
  id: ToNameValueCollection``2(System.Collections.Generic.IDictionary{``0,``1})
  isExtensionMethod: true
  parent: Songhay.Extensions.IDictionaryExtensions
  langs:
  - csharp
  - vb
  name: ToNameValueCollection<TKey, TValue>(IDictionary<TKey, TValue>)
  nameWithType: IDictionaryExtensions.ToNameValueCollection<TKey, TValue>(IDictionary<TKey, TValue>)
  fullName: Songhay.Extensions.IDictionaryExtensions.ToNameValueCollection<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/IDictionaryExtensions.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: ToNameValueCollection
    path: SonghayCore/Extensions/IDictionaryExtensions.cs
    startLine: 18
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: >-
    Converts the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>

    to the <xref href="System.Collections.Specialized.NameValueCollection" data-throw-if-not-resolved="false"></xref>.
  remarks: For detail, see https://stackoverflow.com/a/7230446/22944
  example: []
  syntax:
    content: public static NameValueCollection ToNameValueCollection<TKey, TValue>(this IDictionary<TKey, TValue> dictionary)
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
      description: The set.
    typeParameters:
    - id: TKey
      description: The type of the key.
    - id: TValue
      description: The type of the value.
    return:
      type: System.Collections.Specialized.NameValueCollection
    content.vb: Public Shared Function ToNameValueCollection(Of TKey, TValue)(dictionary As IDictionary(Of TKey, TValue)) As NameValueCollection
  overload: Songhay.Extensions.IDictionaryExtensions.ToNameValueCollection*
  nameWithType.vb: IDictionaryExtensions.ToNameValueCollection(Of TKey, TValue)(IDictionary(Of TKey, TValue))
  fullName.vb: Songhay.Extensions.IDictionaryExtensions.ToNameValueCollection(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue))
  name.vb: ToNameValueCollection(Of TKey, TValue)(IDictionary(Of TKey, TValue))
- uid: Songhay.Extensions.IDictionaryExtensions.ToShallowClone``2(System.Collections.Generic.IDictionary{``0,``1})
  commentId: M:Songhay.Extensions.IDictionaryExtensions.ToShallowClone``2(System.Collections.Generic.IDictionary{``0,``1})
  id: ToShallowClone``2(System.Collections.Generic.IDictionary{``0,``1})
  isExtensionMethod: true
  parent: Songhay.Extensions.IDictionaryExtensions
  langs:
  - csharp
  - vb
  name: ToShallowClone<TKey, TValue>(IDictionary<TKey, TValue>?)
  nameWithType: IDictionaryExtensions.ToShallowClone<TKey, TValue>(IDictionary<TKey, TValue>?)
  fullName: Songhay.Extensions.IDictionaryExtensions.ToShallowClone<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/IDictionaryExtensions.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: ToShallowClone
    path: SonghayCore/Extensions/IDictionaryExtensions.cs
    startLine: 45
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: >-
    Converts the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>

    to a shallow clone.
  remarks: >-
    For more detail see “Clone a Dictionary in C#”

    [https://www.techiedelight.com/clone-a-dictionary-in-csharp/]
  example: []
  syntax:
    content: 'public static IDictionary<TKey, TValue> ToShallowClone<TKey, TValue>(this IDictionary<TKey, TValue>? dictionary) where TKey : notnull'
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
      description: the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>
    typeParameters:
    - id: TKey
      description: The type of the key.
    - id: TValue
      description: The type of the value.
    return:
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
    content.vb: Public Shared Function ToShallowClone(Of TKey, TValue)(dictionary As IDictionary(Of TKey, TValue)) As IDictionary(Of TKey, TValue)
  overload: Songhay.Extensions.IDictionaryExtensions.ToShallowClone*
  nameWithType.vb: IDictionaryExtensions.ToShallowClone(Of TKey, TValue)(IDictionary(Of TKey, TValue))
  fullName.vb: Songhay.Extensions.IDictionaryExtensions.ToShallowClone(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue))
  name.vb: ToShallowClone(Of TKey, TValue)(IDictionary(Of TKey, TValue))
- uid: Songhay.Extensions.IDictionaryExtensions.TryGetValueWithKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)
  commentId: M:Songhay.Extensions.IDictionaryExtensions.TryGetValueWithKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)
  id: TryGetValueWithKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)
  isExtensionMethod: true
  parent: Songhay.Extensions.IDictionaryExtensions
  langs:
  - csharp
  - vb
  name: TryGetValueWithKey<TKey, TValue>(IDictionary<TKey, TValue>?, TKey)
  nameWithType: IDictionaryExtensions.TryGetValueWithKey<TKey, TValue>(IDictionary<TKey, TValue>?, TKey)
  fullName: Songhay.Extensions.IDictionaryExtensions.TryGetValueWithKey<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>?, TKey)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/IDictionaryExtensions.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: TryGetValueWithKey
    path: SonghayCore/Extensions/IDictionaryExtensions.cs
    startLine: 59
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Tries to get value with the specified key.
  example: []
  syntax:
    content: public static TValue? TryGetValueWithKey<TKey, TValue>(this IDictionary<TKey, TValue>? dictionary, TKey key)
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
      description: The dictionary.
    - id: key
      type: '{TKey}'
      description: The key.
    typeParameters:
    - id: TKey
      description: The type of the key.
    - id: TValue
      description: The type of the value.
    return:
      type: '{TValue}'
    content.vb: Public Shared Function TryGetValueWithKey(Of TKey, TValue)(dictionary As IDictionary(Of TKey, TValue), key As TKey) As TValue
  overload: Songhay.Extensions.IDictionaryExtensions.TryGetValueWithKey*
  nameWithType.vb: IDictionaryExtensions.TryGetValueWithKey(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey)
  fullName.vb: Songhay.Extensions.IDictionaryExtensions.TryGetValueWithKey(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), TKey)
  name.vb: TryGetValueWithKey(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey)
- uid: Songhay.Extensions.IDictionaryExtensions.TryGetValueWithKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Boolean)
  commentId: M:Songhay.Extensions.IDictionaryExtensions.TryGetValueWithKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Boolean)
  id: TryGetValueWithKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Boolean)
  isExtensionMethod: true
  parent: Songhay.Extensions.IDictionaryExtensions
  langs:
  - csharp
  - vb
  name: TryGetValueWithKey<TKey, TValue>(IDictionary<TKey, TValue>?, TKey?, bool)
  nameWithType: IDictionaryExtensions.TryGetValueWithKey<TKey, TValue>(IDictionary<TKey, TValue>?, TKey?, bool)
  fullName: Songhay.Extensions.IDictionaryExtensions.TryGetValueWithKey<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>?, TKey?, bool)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/IDictionaryExtensions.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: TryGetValueWithKey
    path: SonghayCore/Extensions/IDictionaryExtensions.cs
    startLine: 70
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Tries to get value with the specified key.
  example: []
  syntax:
    content: public static TValue? TryGetValueWithKey<TKey, TValue>(this IDictionary<TKey, TValue>? dictionary, TKey? key, bool throwException)
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
      description: The dictionary.
    - id: key
      type: '{TKey}'
      description: The key.
    - id: throwException
      type: System.Boolean
      description: When <code>true</code>, throw an exception when retrieval fails.
    typeParameters:
    - id: TKey
      description: The type of the key.
    - id: TValue
      description: The type of the value.
    return:
      type: '{TValue}'
    content.vb: Public Shared Function TryGetValueWithKey(Of TKey, TValue)(dictionary As IDictionary(Of TKey, TValue), key As TKey, throwException As Boolean) As TValue
  overload: Songhay.Extensions.IDictionaryExtensions.TryGetValueWithKey*
  nameWithType.vb: IDictionaryExtensions.TryGetValueWithKey(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, Boolean)
  fullName.vb: Songhay.Extensions.IDictionaryExtensions.TryGetValueWithKey(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), TKey, Boolean)
  name.vb: TryGetValueWithKey(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, Boolean)
- uid: Songhay.Extensions.IDictionaryExtensions.WithPair``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)
  commentId: M:Songhay.Extensions.IDictionaryExtensions.WithPair``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)
  id: WithPair``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)
  isExtensionMethod: true
  parent: Songhay.Extensions.IDictionaryExtensions
  langs:
  - csharp
  - vb
  name: WithPair<TKey, TValue>(IDictionary<TKey, TValue?>?, TKey?, TValue?)
  nameWithType: IDictionaryExtensions.WithPair<TKey, TValue>(IDictionary<TKey, TValue?>?, TKey?, TValue?)
  fullName: Songhay.Extensions.IDictionaryExtensions.WithPair<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue?>?, TKey?, TValue?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/IDictionaryExtensions.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: WithPair
    path: SonghayCore/Extensions/IDictionaryExtensions.cs
    startLine: 95
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: >-
    Returns the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>

    with the specified pair.
  example: []
  syntax:
    content: 'public static IDictionary<TKey, TValue?> WithPair<TKey, TValue>(this IDictionary<TKey, TValue?>? dictionary, TKey? key, TValue? value) where TKey : notnull'
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
      description: the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>
    - id: key
      type: '{TKey}'
      description: the key
    - id: value
      type: '{TValue}'
      description: the value
    typeParameters:
    - id: TKey
      description: The type of the key.
    - id: TValue
      description: The type of the value.
    return:
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
    content.vb: Public Shared Function WithPair(Of TKey, TValue)(dictionary As IDictionary(Of TKey, TValue), key As TKey, value As TValue) As IDictionary(Of TKey, TValue)
  overload: Songhay.Extensions.IDictionaryExtensions.WithPair*
  nameWithType.vb: IDictionaryExtensions.WithPair(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue)
  fullName.vb: Songhay.Extensions.IDictionaryExtensions.WithPair(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), TKey, TValue)
  name.vb: WithPair(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue)
- uid: Songhay.Extensions.IDictionaryExtensions.WithPair``2(System.Collections.Generic.IDictionary{``0,``1},System.Nullable{System.Collections.Generic.KeyValuePair{``0,``1}})
  commentId: M:Songhay.Extensions.IDictionaryExtensions.WithPair``2(System.Collections.Generic.IDictionary{``0,``1},System.Nullable{System.Collections.Generic.KeyValuePair{``0,``1}})
  id: WithPair``2(System.Collections.Generic.IDictionary{``0,``1},System.Nullable{System.Collections.Generic.KeyValuePair{``0,``1}})
  isExtensionMethod: true
  parent: Songhay.Extensions.IDictionaryExtensions
  langs:
  - csharp
  - vb
  name: WithPair<TKey, TValue>(IDictionary<TKey, TValue?>?, KeyValuePair<TKey, TValue?>?)
  nameWithType: IDictionaryExtensions.WithPair<TKey, TValue>(IDictionary<TKey, TValue?>?, KeyValuePair<TKey, TValue?>?)
  fullName: Songhay.Extensions.IDictionaryExtensions.WithPair<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue?>?, System.Collections.Generic.KeyValuePair<TKey, TValue?>?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/IDictionaryExtensions.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: WithPair
    path: SonghayCore/Extensions/IDictionaryExtensions.cs
    startLine: 112
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: >-
    Returns the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>

    with the specified pair.
  example: []
  syntax:
    content: 'public static IDictionary<TKey, TValue?> WithPair<TKey, TValue>(this IDictionary<TKey, TValue?>? dictionary, KeyValuePair<TKey, TValue?>? pair) where TKey : notnull'
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
      description: the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>
    - id: pair
      type: System.Nullable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: the <xref href="System.Collections.Generic.KeyValuePair%602" data-throw-if-not-resolved="false"></xref>
    typeParameters:
    - id: TKey
      description: The type of the key.
    - id: TValue
      description: The type of the value.
    return:
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
    content.vb: Public Shared Function WithPair(Of TKey, TValue)(dictionary As IDictionary(Of TKey, TValue), pair As KeyValuePair(Of TKey, TValue)?) As IDictionary(Of TKey, TValue)
  overload: Songhay.Extensions.IDictionaryExtensions.WithPair*
  nameWithType.vb: IDictionaryExtensions.WithPair(Of TKey, TValue)(IDictionary(Of TKey, TValue), KeyValuePair(Of TKey, TValue)?)
  fullName.vb: Songhay.Extensions.IDictionaryExtensions.WithPair(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), System.Collections.Generic.KeyValuePair(Of TKey, TValue)?)
  name.vb: WithPair(Of TKey, TValue)(IDictionary(Of TKey, TValue), KeyValuePair(Of TKey, TValue)?)
- uid: Songhay.Extensions.IDictionaryExtensions.WithPairs``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})
  commentId: M:Songhay.Extensions.IDictionaryExtensions.WithPairs``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})
  id: WithPairs``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})
  isExtensionMethod: true
  parent: Songhay.Extensions.IDictionaryExtensions
  langs:
  - csharp
  - vb
  name: WithPairs<TKey, TValue>(IDictionary<TKey, TValue?>?, IEnumerable<KeyValuePair<TKey, TValue?>>?)
  nameWithType: IDictionaryExtensions.WithPairs<TKey, TValue>(IDictionary<TKey, TValue?>?, IEnumerable<KeyValuePair<TKey, TValue?>>?)
  fullName: Songhay.Extensions.IDictionaryExtensions.WithPairs<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue?>?, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue?>>?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/IDictionaryExtensions.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: WithPairs
    path: SonghayCore/Extensions/IDictionaryExtensions.cs
    startLine: 128
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: >-
    Returns the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>

    with the specified pairs.
  example: []
  syntax:
    content: 'public static IDictionary<TKey, TValue?> WithPairs<TKey, TValue>(this IDictionary<TKey, TValue?>? dictionary, IEnumerable<KeyValuePair<TKey, TValue?>>? pairs) where TKey : notnull'
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
      description: the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>
    - id: pairs
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: The pairs to add.
    typeParameters:
    - id: TKey
      description: The type of the key.
    - id: TValue
      description: The type of the value.
    return:
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
    content.vb: Public Shared Function WithPairs(Of TKey, TValue)(dictionary As IDictionary(Of TKey, TValue), pairs As IEnumerable(Of KeyValuePair(Of TKey, TValue))) As IDictionary(Of TKey, TValue)
  overload: Songhay.Extensions.IDictionaryExtensions.WithPairs*
  nameWithType.vb: IDictionaryExtensions.WithPairs(Of TKey, TValue)(IDictionary(Of TKey, TValue), IEnumerable(Of KeyValuePair(Of TKey, TValue)))
  fullName.vb: Songhay.Extensions.IDictionaryExtensions.WithPairs(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)))
  name.vb: WithPairs(Of TKey, TValue)(IDictionary(Of TKey, TValue), IEnumerable(Of KeyValuePair(Of TKey, TValue)))
references:
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Songhay.Extensions
  commentId: N:Songhay.Extensions
  href: Songhay.html
  name: Songhay.Extensions
  nameWithType: Songhay.Extensions
  fullName: Songhay.Extensions
  spec.csharp:
  - uid: Songhay
    name: Songhay
    href: Songhay.html
  - name: .
  - uid: Songhay.Extensions
    name: Extensions
    href: Songhay.Extensions.html
  spec.vb:
  - uid: Songhay
    name: Songhay
    href: Songhay.html
  - name: .
  - uid: Songhay.Extensions
    name: Extensions
    href: Songhay.Extensions.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Specialized.NameValueCollection
  commentId: T:System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.specialized.namevaluecollection
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: Songhay.Extensions.IDictionaryExtensions.ToNameValueCollection*
  commentId: Overload:Songhay.Extensions.IDictionaryExtensions.ToNameValueCollection
  href: Songhay.Extensions.IDictionaryExtensions.html#Songhay_Extensions_IDictionaryExtensions_ToNameValueCollection__2_System_Collections_Generic_IDictionary___0___1__
  name: ToNameValueCollection
  nameWithType: IDictionaryExtensions.ToNameValueCollection
  fullName: Songhay.Extensions.IDictionaryExtensions.ToNameValueCollection
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.IDictionary{``0,``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Specialized
  commentId: N:System.Collections.Specialized
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Specialized
  nameWithType: System.Collections.Specialized
  fullName: System.Collections.Specialized
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Specialized
    name: Specialized
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.specialized
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Specialized
    name: Specialized
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.specialized
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Songhay.Extensions.IDictionaryExtensions.ToShallowClone*
  commentId: Overload:Songhay.Extensions.IDictionaryExtensions.ToShallowClone
  href: Songhay.Extensions.IDictionaryExtensions.html#Songhay_Extensions_IDictionaryExtensions_ToShallowClone__2_System_Collections_Generic_IDictionary___0___1__
  name: ToShallowClone
  nameWithType: IDictionaryExtensions.ToShallowClone
  fullName: Songhay.Extensions.IDictionaryExtensions.ToShallowClone
- uid: Songhay.Extensions.IDictionaryExtensions.TryGetValueWithKey*
  commentId: Overload:Songhay.Extensions.IDictionaryExtensions.TryGetValueWithKey
  href: Songhay.Extensions.IDictionaryExtensions.html#Songhay_Extensions_IDictionaryExtensions_TryGetValueWithKey__2_System_Collections_Generic_IDictionary___0___1____0_
  name: TryGetValueWithKey
  nameWithType: IDictionaryExtensions.TryGetValueWithKey
  fullName: Songhay.Extensions.IDictionaryExtensions.TryGetValueWithKey
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Songhay.Extensions.IDictionaryExtensions.WithPair*
  commentId: Overload:Songhay.Extensions.IDictionaryExtensions.WithPair
  href: Songhay.Extensions.IDictionaryExtensions.html#Songhay_Extensions_IDictionaryExtensions_WithPair__2_System_Collections_Generic_IDictionary___0___1____0___1_
  name: WithPair
  nameWithType: IDictionaryExtensions.WithPair
  fullName: Songhay.Extensions.IDictionaryExtensions.WithPair
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Nullable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: T:System.Nullable{System.Collections.Generic.KeyValuePair{``0,``1}}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  name: KeyValuePair<TKey, TValue>?
  nameWithType: KeyValuePair<TKey, TValue>?
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>?
  nameWithType.vb: KeyValuePair(Of TKey, TValue)?
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)?
  name.vb: KeyValuePair(Of TKey, TValue)?
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '?'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Songhay.Extensions.IDictionaryExtensions.WithPairs*
  commentId: Overload:Songhay.Extensions.IDictionaryExtensions.WithPairs
  href: Songhay.Extensions.IDictionaryExtensions.html#Songhay_Extensions_IDictionaryExtensions_WithPairs__2_System_Collections_Generic_IDictionary___0___1__System_Collections_Generic_IEnumerable_System_Collections_Generic_KeyValuePair___0___1___
  name: WithPairs
  nameWithType: IDictionaryExtensions.WithPairs
  fullName: Songhay.Extensions.IDictionaryExtensions.WithPairs
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<KeyValuePair<TKey, TValue>>
  nameWithType: IEnumerable<KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: IEnumerable(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
