### YamlMime:ManagedReference
items:
- uid: Songhay.Xml.XmlUtility
  commentId: T:Songhay.Xml.XmlUtility
  id: XmlUtility
  parent: Songhay.Xml
  children:
  - Songhay.Xml.XmlUtility.CombineNavigableDocuments(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.IXPathNavigable)
  - Songhay.Xml.XmlUtility.CombineNavigableDocuments(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.IXPathNavigable,System.String)
  - Songhay.Xml.XmlUtility.ConventionalHtmlEntities
  - Songhay.Xml.XmlUtility.GetInstanceRaw``1(System.String)
  - Songhay.Xml.XmlUtility.GetInstance``1(System.String)
  - Songhay.Xml.XmlUtility.GetInternalMessage(System.String)
  - Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.String})
  - Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  - Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.String,System.String[],System.Xml.XmlWriter)
  - Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.String,System.String[],System.Xml.XmlWriter,System.Boolean)
  - Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.String[])
  - Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.String[],System.Xml.XmlWriter)
  - Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.String[],System.Xml.XmlWriter,System.Boolean)
  - Songhay.Xml.XmlUtility.GetInternalMessageDocument(System.String,System.String,System.String[])
  - Songhay.Xml.XmlUtility.GetInternalMessageDocument(System.String,System.String[])
  - Songhay.Xml.XmlUtility.GetNamespaceManager(System.Xml.XPath.IXPathNavigable)
  - Songhay.Xml.XmlUtility.GetNavigableDocument(System.IO.Stream)
  - Songhay.Xml.XmlUtility.GetNavigableDocument(System.String)
  - Songhay.Xml.XmlUtility.GetNavigableDocument(System.Xml.XPath.IXPathNavigable)
  - Songhay.Xml.XmlUtility.GetNavigableNode(System.Xml.XPath.IXPathNavigable,System.String)
  - Songhay.Xml.XmlUtility.GetNavigableNode(System.Xml.XPath.IXPathNavigable,System.String,System.Xml.XmlNamespaceManager)
  - Songhay.Xml.XmlUtility.GetNavigableNodes(System.Xml.XPath.IXPathNavigable,System.String)
  - Songhay.Xml.XmlUtility.GetNavigableNodes(System.Xml.XPath.IXPathNavigable,System.String,System.Xml.XmlNamespaceManager)
  - Songhay.Xml.XmlUtility.GetNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean)
  - Songhay.Xml.XmlUtility.GetNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.Object)
  - Songhay.Xml.XmlUtility.GetNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.Object,System.Xml.XmlNamespaceManager)
  - Songhay.Xml.XmlUtility.GetNodeValueAndParse``1(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,``0)
  - Songhay.Xml.XmlUtility.GetNodeValueAndParse``1(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,``0,System.Xml.XmlNamespaceManager)
  - Songhay.Xml.XmlUtility.GetText(System.IO.MemoryStream)
  - Songhay.Xml.XmlUtility.GetXmlSchema(System.Xml.XPath.IXPathNavigable,System.Xml.Schema.ValidationEventHandler)
  - Songhay.Xml.XmlUtility.GetXslResult(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.IXPathNavigable)
  - Songhay.Xml.XmlUtility.GetXslResult(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XPath.IXPathNavigable)
  - Songhay.Xml.XmlUtility.GetXslString(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.IXPathNavigable)
  - Songhay.Xml.XmlUtility.GetXslString(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XPath.IXPathNavigable)
  - Songhay.Xml.XmlUtility.GetXslString(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriterSettings)
  - Songhay.Xml.XmlUtility.InputAs``1(``0)
  - Songhay.Xml.XmlUtility.IsNoNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean)
  - Songhay.Xml.XmlUtility.IsNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.String)
  - Songhay.Xml.XmlUtility.IsNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.String,System.StringComparison)
  - Songhay.Xml.XmlUtility.IsNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.String,System.Xml.XmlNamespaceManager)
  - Songhay.Xml.XmlUtility.IsNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.String,System.Xml.XmlNamespaceManager,System.StringComparison)
  - Songhay.Xml.XmlUtility.IsXml(System.String)
  - Songhay.Xml.XmlUtility.IsYesNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean)
  - Songhay.Xml.XmlUtility.LoadXmlSchema(System.String,System.Xml.Schema.ValidationEventHandler)
  - Songhay.Xml.XmlUtility.LoadXslTransform(System.String,System.String)
  - Songhay.Xml.XmlUtility.LoadXslTransform(System.String,System.String,System.String)
  - Songhay.Xml.XmlUtility.LoadXslTransform(System.String,System.Xml.Xsl.XsltArgumentList,System.String)
  - Songhay.Xml.XmlUtility.LoadXslTransformForMemoryInput(System.String,System.String,System.String)
  - Songhay.Xml.XmlUtility.LoadXslTransformForMemoryInput(System.String,System.String,System.Xml.XPath.IXPathNavigable)
  - Songhay.Xml.XmlUtility.LoadXslTransformForMemoryInput(System.String,System.Xml.Xsl.XsltArgumentList,System.String)
  - Songhay.Xml.XmlUtility.OutputAs``1(System.String)
  - Songhay.Xml.XmlUtility.OutputAs``1(System.Xml.XPath.IXPathNavigable)
  - Songhay.Xml.XmlUtility.StripNamespaces(System.String)
  - Songhay.Xml.XmlUtility.StripNamespaces(System.String,System.Boolean)
  - Songhay.Xml.XmlUtility.StripNamespaces(System.Xml.XPath.IXPathNavigable)
  - Songhay.Xml.XmlUtility.StripNamespaces(System.Xml.XPath.IXPathNavigable,System.Boolean)
  - Songhay.Xml.XmlUtility.ValidateNavigableNode(System.Xml.XPath.IXPathNavigable,System.Xml.Schema.XmlSchema,System.Xml.Schema.ValidationEventHandler)
  - Songhay.Xml.XmlUtility.WriteReader(System.Xml.XmlReader,System.Xml.XmlWriter)
  - Songhay.Xml.XmlUtility.WriteXslTransform(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.IXPathNavigable,System.String)
  - Songhay.Xml.XmlUtility.WriteXslTransform(System.Xml.XmlReader,System.Xml.XPath.IXPathNavigable,System.String)
  - Songhay.Xml.XmlUtility.Write``1(``0,System.String)
  - Songhay.Xml.XmlUtility.XmlDecode(System.String)
  - Songhay.Xml.XmlUtility.XmlEncode(System.String)
  langs:
  - csharp
  - vb
  name: XmlUtility
  nameWithType: XmlUtility
  fullName: Songhay.Xml.XmlUtility
  type: Class
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility._.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: XmlUtility
    path: SonghayCore/Xml/XmlUtility._.cs
    startLine: 11
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: Static helper members for XML-related routines.
  remarks: >-
    These definitions are biased toward

    emitting <xref href="System.Xml.XPath.XPathDocument" data-throw-if-not-resolved="false"></xref> documents.

    However, many accept any input implementing the

    <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> interface.
  example: []
  syntax:
    content: public static class XmlUtility
    content.vb: Public Module XmlUtility
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Songhay.Xml.XmlUtility.CombineNavigableDocuments(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.IXPathNavigable)
  commentId: M:Songhay.Xml.XmlUtility.CombineNavigableDocuments(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.IXPathNavigable)
  id: CombineNavigableDocuments(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.IXPathNavigable)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: CombineNavigableDocuments(IXPathNavigable?, IXPathNavigable?)
  nameWithType: XmlUtility.CombineNavigableDocuments(IXPathNavigable?, IXPathNavigable?)
  fullName: Songhay.Xml.XmlUtility.CombineNavigableDocuments(System.Xml.XPath.IXPathNavigable?, System.Xml.XPath.IXPathNavigable?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.CombineNavigableDocuments.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: CombineNavigableDocuments
    path: SonghayCore/Xml/XmlUtility.CombineNavigableDocuments.cs
    startLine: 9
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: Combines two <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> documents.
  example: []
  syntax:
    content: public static XPathDocument? CombineNavigableDocuments(IXPathNavigable? parentDocument, IXPathNavigable? childDocument)
    parameters:
    - id: parentDocument
      type: System.Xml.XPath.IXPathNavigable
      description: The <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> “hosting” document.
    - id: childDocument
      type: System.Xml.XPath.IXPathNavigable
      description: The <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> child document.
    return:
      type: System.Xml.XPath.XPathDocument
    content.vb: Public Shared Function CombineNavigableDocuments(parentDocument As IXPathNavigable, childDocument As IXPathNavigable) As XPathDocument
  overload: Songhay.Xml.XmlUtility.CombineNavigableDocuments*
  nameWithType.vb: XmlUtility.CombineNavigableDocuments(IXPathNavigable, IXPathNavigable)
  fullName.vb: Songhay.Xml.XmlUtility.CombineNavigableDocuments(System.Xml.XPath.IXPathNavigable, System.Xml.XPath.IXPathNavigable)
  name.vb: CombineNavigableDocuments(IXPathNavigable, IXPathNavigable)
- uid: Songhay.Xml.XmlUtility.CombineNavigableDocuments(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.IXPathNavigable,System.String)
  commentId: M:Songhay.Xml.XmlUtility.CombineNavigableDocuments(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.IXPathNavigable,System.String)
  id: CombineNavigableDocuments(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.IXPathNavigable,System.String)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: CombineNavigableDocuments(IXPathNavigable?, IXPathNavigable?, string?)
  nameWithType: XmlUtility.CombineNavigableDocuments(IXPathNavigable?, IXPathNavigable?, string?)
  fullName: Songhay.Xml.XmlUtility.CombineNavigableDocuments(System.Xml.XPath.IXPathNavigable?, System.Xml.XPath.IXPathNavigable?, string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.CombineNavigableDocuments.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: CombineNavigableDocuments
    path: SonghayCore/Xml/XmlUtility.CombineNavigableDocuments.cs
    startLine: 20
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: Combines two <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> documents.
  example: []
  syntax:
    content: public static XPathDocument? CombineNavigableDocuments(IXPathNavigable? parentDocument, IXPathNavigable? childDocument, string? nodeQuery)
    parameters:
    - id: parentDocument
      type: System.Xml.XPath.IXPathNavigable
      description: The <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> “hosting” document.
    - id: childDocument
      type: System.Xml.XPath.IXPathNavigable
      description: The <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> child document.
    - id: nodeQuery
      type: System.String
      description: The XPath query to the child document location in the “hosting” document.
    return:
      type: System.Xml.XPath.XPathDocument
    content.vb: Public Shared Function CombineNavigableDocuments(parentDocument As IXPathNavigable, childDocument As IXPathNavigable, nodeQuery As String) As XPathDocument
  overload: Songhay.Xml.XmlUtility.CombineNavigableDocuments*
  nameWithType.vb: XmlUtility.CombineNavigableDocuments(IXPathNavigable, IXPathNavigable, String)
  fullName.vb: Songhay.Xml.XmlUtility.CombineNavigableDocuments(System.Xml.XPath.IXPathNavigable, System.Xml.XPath.IXPathNavigable, String)
  name.vb: CombineNavigableDocuments(IXPathNavigable, IXPathNavigable, String)
- uid: Songhay.Xml.XmlUtility.GetInstance``1(System.String)
  commentId: M:Songhay.Xml.XmlUtility.GetInstance``1(System.String)
  id: GetInstance``1(System.String)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetInstance<T>(string?)
  nameWithType: XmlUtility.GetInstance<T>(string?)
  fullName: Songhay.Xml.XmlUtility.GetInstance<T>(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetInstance.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetInstance
    path: SonghayCore/Xml/XmlUtility.GetInstance.cs
    startLine: 11
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: Deserializes based on the specified XML file.
  example: []
  syntax:
    content: 'public static T? GetInstance<T>(string? xmlPath) where T : class'
    parameters:
    - id: xmlPath
      type: System.String
      description: The XML file path.
    typeParameters:
    - id: T
      description: The specified type to deserialize.
    return:
      type: '{T}'
    content.vb: Public Shared Function GetInstance(Of T As Class)(xmlPath As String) As T
  overload: Songhay.Xml.XmlUtility.GetInstance*
  nameWithType.vb: XmlUtility.GetInstance(Of T)(String)
  fullName.vb: Songhay.Xml.XmlUtility.GetInstance(Of T)(String)
  name.vb: GetInstance(Of T)(String)
- uid: Songhay.Xml.XmlUtility.GetInstanceRaw``1(System.String)
  commentId: M:Songhay.Xml.XmlUtility.GetInstanceRaw``1(System.String)
  id: GetInstanceRaw``1(System.String)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetInstanceRaw<T>(string?)
  nameWithType: XmlUtility.GetInstanceRaw<T>(string?)
  fullName: Songhay.Xml.XmlUtility.GetInstanceRaw<T>(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetInstance.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetInstanceRaw
    path: SonghayCore/Xml/XmlUtility.GetInstance.cs
    startLine: 28
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: Deserializes based on the specified raw XML.
  example: []
  syntax:
    content: 'public static T? GetInstanceRaw<T>(string? xmlFragment) where T : class'
    parameters:
    - id: xmlFragment
      type: System.String
      description: The raw XML.
    typeParameters:
    - id: T
      description: The specified type to deserialize.
    return:
      type: '{T}'
    content.vb: Public Shared Function GetInstanceRaw(Of T As Class)(xmlFragment As String) As T
  overload: Songhay.Xml.XmlUtility.GetInstanceRaw*
  nameWithType.vb: XmlUtility.GetInstanceRaw(Of T)(String)
  fullName.vb: Songhay.Xml.XmlUtility.GetInstanceRaw(Of T)(String)
  name.vb: GetInstanceRaw(Of T)(String)
- uid: Songhay.Xml.XmlUtility.GetInternalMessage(System.String)
  commentId: M:Songhay.Xml.XmlUtility.GetInternalMessage(System.String)
  id: GetInternalMessage(System.String)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetInternalMessage(string)
  nameWithType: XmlUtility.GetInternalMessage(string)
  fullName: Songhay.Xml.XmlUtility.GetInternalMessage(string)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetInternalMessage.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetInternalMessage
    path: SonghayCore/Xml/XmlUtility.GetInternalMessage.cs
    startLine: 9
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns an XML <xref href="System.String" data-throw-if-not-resolved="false"></xref>

    based on the specified header and lines.
  example: []
  syntax:
    content: public static string GetInternalMessage(string messageHeader)
    parameters:
    - id: messageHeader
      type: System.String
      description: Message header.
    return:
      type: System.String
    content.vb: Public Shared Function GetInternalMessage(messageHeader As String) As String
  overload: Songhay.Xml.XmlUtility.GetInternalMessage*
  nameWithType.vb: XmlUtility.GetInternalMessage(String)
  fullName.vb: Songhay.Xml.XmlUtility.GetInternalMessage(String)
  name.vb: GetInternalMessage(String)
- uid: Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.String[])
  commentId: M:Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.String[])
  id: GetInternalMessage(System.String,System.String[])
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetInternalMessage(string, string[])
  nameWithType: XmlUtility.GetInternalMessage(string, string[])
  fullName: Songhay.Xml.XmlUtility.GetInternalMessage(string, string[])
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetInternalMessage.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetInternalMessage
    path: SonghayCore/Xml/XmlUtility.GetInternalMessage.cs
    startLine: 18
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns an XML <xref href="System.String" data-throw-if-not-resolved="false"></xref>

    based on the specified header and lines.
  example: []
  syntax:
    content: public static string GetInternalMessage(string messageHeader, string[] messageLines)
    parameters:
    - id: messageHeader
      type: System.String
      description: Message header.
    - id: messageLines
      type: System.String[]
      description: Message lines.
    return:
      type: System.String
    content.vb: Public Shared Function GetInternalMessage(messageHeader As String, messageLines As String()) As String
  overload: Songhay.Xml.XmlUtility.GetInternalMessage*
  nameWithType.vb: XmlUtility.GetInternalMessage(String, String())
  fullName.vb: Songhay.Xml.XmlUtility.GetInternalMessage(String, String())
  name.vb: GetInternalMessage(String, String())
- uid: Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.String})
  commentId: M:Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.String})
  id: GetInternalMessage(System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.String})
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetInternalMessage(string, ReadOnlyCollection<string>?)
  nameWithType: XmlUtility.GetInternalMessage(string, ReadOnlyCollection<string>?)
  fullName: Songhay.Xml.XmlUtility.GetInternalMessage(string, System.Collections.ObjectModel.ReadOnlyCollection<string>?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetInternalMessage.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetInternalMessage
    path: SonghayCore/Xml/XmlUtility.GetInternalMessage.cs
    startLine: 27
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns an XML <xref href="System.String" data-throw-if-not-resolved="false"></xref>

    based on the specified header and lines.
  example: []
  syntax:
    content: public static string GetInternalMessage(string messageHeader, ReadOnlyCollection<string>? messageLines)
    parameters:
    - id: messageHeader
      type: System.String
      description: Message header.
    - id: messageLines
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
      description: Message lines.
    return:
      type: System.String
    content.vb: Public Shared Function GetInternalMessage(messageHeader As String, messageLines As ReadOnlyCollection(Of String)) As String
  overload: Songhay.Xml.XmlUtility.GetInternalMessage*
  nameWithType.vb: XmlUtility.GetInternalMessage(String, ReadOnlyCollection(Of String))
  fullName.vb: Songhay.Xml.XmlUtility.GetInternalMessage(String, System.Collections.ObjectModel.ReadOnlyCollection(Of String))
  name.vb: GetInternalMessage(String, ReadOnlyCollection(Of String))
- uid: Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  id: GetInternalMessage(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetInternalMessage(string?, string?, IEnumerable<string>?)
  nameWithType: XmlUtility.GetInternalMessage(string?, string?, IEnumerable<string>?)
  fullName: Songhay.Xml.XmlUtility.GetInternalMessage(string?, string?, System.Collections.Generic.IEnumerable<string>?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetInternalMessage.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetInternalMessage
    path: SonghayCore/Xml/XmlUtility.GetInternalMessage.cs
    startLine: 37
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns an XML <xref href="System.String" data-throw-if-not-resolved="false"></xref>

    based on the specified header and lines.
  example: []
  syntax:
    content: public static string GetInternalMessage(string? messageHeader, string? messageCode, IEnumerable<string>? messageLines)
    parameters:
    - id: messageHeader
      type: System.String
      description: Message header.
    - id: messageCode
      type: System.String
      description: Message code for errors, exceptions or faults.
    - id: messageLines
      type: System.Collections.Generic.IEnumerable{System.String}
      description: Message lines.
    return:
      type: System.String
    content.vb: Public Shared Function GetInternalMessage(messageHeader As String, messageCode As String, messageLines As IEnumerable(Of String)) As String
  overload: Songhay.Xml.XmlUtility.GetInternalMessage*
  nameWithType.vb: XmlUtility.GetInternalMessage(String, String, IEnumerable(Of String))
  fullName.vb: Songhay.Xml.XmlUtility.GetInternalMessage(String, String, System.Collections.Generic.IEnumerable(Of String))
  name.vb: GetInternalMessage(String, String, IEnumerable(Of String))
- uid: Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.String[],System.Xml.XmlWriter)
  commentId: M:Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.String[],System.Xml.XmlWriter)
  id: GetInternalMessage(System.String,System.String[],System.Xml.XmlWriter)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetInternalMessage(string?, string[]?, XmlWriter?)
  nameWithType: XmlUtility.GetInternalMessage(string?, string[]?, XmlWriter?)
  fullName: Songhay.Xml.XmlUtility.GetInternalMessage(string?, string[]?, System.Xml.XmlWriter?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetInternalMessage.XmlTextWriter.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetInternalMessage
    path: SonghayCore/Xml/XmlUtility.GetInternalMessage.XmlTextWriter.cs
    startLine: 10
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: Gets the conventional, XML <code>&lt;InternalMessage&gt;</code>.
  example: []
  syntax:
    content: public static void GetInternalMessage(string? messageHeader, string[]? messageLines, XmlWriter? xmlDataWriter)
    parameters:
    - id: messageHeader
      type: System.String
      description: Message header.
    - id: messageLines
      type: System.String[]
      description: Message lines.
    - id: xmlDataWriter
      type: System.Xml.XmlWriter
      description: The <xref href="System.Xml.XmlWriter" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Sub GetInternalMessage(messageHeader As String, messageLines As String(), xmlDataWriter As XmlWriter)
  overload: Songhay.Xml.XmlUtility.GetInternalMessage*
  nameWithType.vb: XmlUtility.GetInternalMessage(String, String(), XmlWriter)
  fullName.vb: Songhay.Xml.XmlUtility.GetInternalMessage(String, String(), System.Xml.XmlWriter)
  name.vb: GetInternalMessage(String, String(), XmlWriter)
- uid: Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.String,System.String[],System.Xml.XmlWriter)
  commentId: M:Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.String,System.String[],System.Xml.XmlWriter)
  id: GetInternalMessage(System.String,System.String,System.String[],System.Xml.XmlWriter)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetInternalMessage(string?, string?, string[]?, XmlWriter)
  nameWithType: XmlUtility.GetInternalMessage(string?, string?, string[]?, XmlWriter)
  fullName: Songhay.Xml.XmlUtility.GetInternalMessage(string?, string?, string[]?, System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetInternalMessage.XmlTextWriter.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetInternalMessage
    path: SonghayCore/Xml/XmlUtility.GetInternalMessage.XmlTextWriter.cs
    startLine: 20
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: Gets the conventional, XML <code>&lt;InternalMessage&gt;</code>.
  example: []
  syntax:
    content: public static void GetInternalMessage(string? messageHeader, string? messageCode, string[]? messageLines, XmlWriter xmlDataWriter)
    parameters:
    - id: messageHeader
      type: System.String
      description: Message header.
    - id: messageCode
      type: System.String
      description: Message code for errors, exceptions or faults.
    - id: messageLines
      type: System.String[]
      description: Message lines.
    - id: xmlDataWriter
      type: System.Xml.XmlWriter
      description: The <xref href="System.Xml.XmlTextWriter" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Sub GetInternalMessage(messageHeader As String, messageCode As String, messageLines As String(), xmlDataWriter As XmlWriter)
  overload: Songhay.Xml.XmlUtility.GetInternalMessage*
  nameWithType.vb: XmlUtility.GetInternalMessage(String, String, String(), XmlWriter)
  fullName.vb: Songhay.Xml.XmlUtility.GetInternalMessage(String, String, String(), System.Xml.XmlWriter)
  name.vb: GetInternalMessage(String, String, String(), XmlWriter)
- uid: Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.String[],System.Xml.XmlWriter,System.Boolean)
  commentId: M:Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.String[],System.Xml.XmlWriter,System.Boolean)
  id: GetInternalMessage(System.String,System.String[],System.Xml.XmlWriter,System.Boolean)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetInternalMessage(string?, string[]?, XmlWriter?, bool)
  nameWithType: XmlUtility.GetInternalMessage(string?, string[]?, XmlWriter?, bool)
  fullName: Songhay.Xml.XmlUtility.GetInternalMessage(string?, string[]?, System.Xml.XmlWriter?, bool)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetInternalMessage.XmlTextWriter.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetInternalMessage
    path: SonghayCore/Xml/XmlUtility.GetInternalMessage.XmlTextWriter.cs
    startLine: 30
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: Gets the conventional, XML <code>&lt;InternalMessage&gt;</code>.
  example: []
  syntax:
    content: public static void GetInternalMessage(string? messageHeader, string[]? messageLines, XmlWriter? xmlDataWriter, bool isFragment)
    parameters:
    - id: messageHeader
      type: System.String
      description: Message header.
    - id: messageLines
      type: System.String[]
      description: Message lines.
    - id: xmlDataWriter
      type: System.Xml.XmlWriter
      description: The <xref href="System.Xml.XmlWriter" data-throw-if-not-resolved="false"></xref>.
    - id: isFragment
      type: System.Boolean
      description: When <code>false</code> a new document is started.
    content.vb: Public Shared Sub GetInternalMessage(messageHeader As String, messageLines As String(), xmlDataWriter As XmlWriter, isFragment As Boolean)
  overload: Songhay.Xml.XmlUtility.GetInternalMessage*
  nameWithType.vb: XmlUtility.GetInternalMessage(String, String(), XmlWriter, Boolean)
  fullName.vb: Songhay.Xml.XmlUtility.GetInternalMessage(String, String(), System.Xml.XmlWriter, Boolean)
  name.vb: GetInternalMessage(String, String(), XmlWriter, Boolean)
- uid: Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.String,System.String[],System.Xml.XmlWriter,System.Boolean)
  commentId: M:Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.String,System.String[],System.Xml.XmlWriter,System.Boolean)
  id: GetInternalMessage(System.String,System.String,System.String[],System.Xml.XmlWriter,System.Boolean)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetInternalMessage(string?, string?, string[]?, XmlWriter?, bool)
  nameWithType: XmlUtility.GetInternalMessage(string?, string?, string[]?, XmlWriter?, bool)
  fullName: Songhay.Xml.XmlUtility.GetInternalMessage(string?, string?, string[]?, System.Xml.XmlWriter?, bool)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetInternalMessage.XmlTextWriter.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetInternalMessage
    path: SonghayCore/Xml/XmlUtility.GetInternalMessage.XmlTextWriter.cs
    startLine: 41
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: Gets the conventional, XML <code>&lt;InternalMessage&gt;</code>.
  example: []
  syntax:
    content: public static void GetInternalMessage(string? messageHeader, string? messageCode, string[]? messageLines, XmlWriter? xmlDataWriter, bool isFragment)
    parameters:
    - id: messageHeader
      type: System.String
      description: Message header.
    - id: messageCode
      type: System.String
      description: Message code for errors, exceptions or faults.
    - id: messageLines
      type: System.String[]
      description: Message lines.
    - id: xmlDataWriter
      type: System.Xml.XmlWriter
      description: The <xref href="System.Xml.XmlWriter" data-throw-if-not-resolved="false"></xref>.
    - id: isFragment
      type: System.Boolean
      description: When <code>false</code> a new document is started.
    content.vb: Public Shared Sub GetInternalMessage(messageHeader As String, messageCode As String, messageLines As String(), xmlDataWriter As XmlWriter, isFragment As Boolean)
  overload: Songhay.Xml.XmlUtility.GetInternalMessage*
  nameWithType.vb: XmlUtility.GetInternalMessage(String, String, String(), XmlWriter, Boolean)
  fullName.vb: Songhay.Xml.XmlUtility.GetInternalMessage(String, String, String(), System.Xml.XmlWriter, Boolean)
  name.vb: GetInternalMessage(String, String, String(), XmlWriter, Boolean)
- uid: Songhay.Xml.XmlUtility.GetInternalMessageDocument(System.String,System.String[])
  commentId: M:Songhay.Xml.XmlUtility.GetInternalMessageDocument(System.String,System.String[])
  id: GetInternalMessageDocument(System.String,System.String[])
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetInternalMessageDocument(string?, string[]?)
  nameWithType: XmlUtility.GetInternalMessageDocument(string?, string[]?)
  fullName: Songhay.Xml.XmlUtility.GetInternalMessageDocument(string?, string[]?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetInternalMessageDocument.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetInternalMessageDocument
    path: SonghayCore/Xml/XmlUtility.GetInternalMessageDocument.cs
    startLine: 10
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns an <xref href="System.Xml.XPath.XPathDocument" data-throw-if-not-resolved="false"></xref>

    based on the specified header and lines.
  example: []
  syntax:
    content: public static XPathDocument? GetInternalMessageDocument(string? messageHeader, string[]? messageLines)
    parameters:
    - id: messageHeader
      type: System.String
      description: Message header.
    - id: messageLines
      type: System.String[]
      description: Message lines.
    return:
      type: System.Xml.XPath.XPathDocument
    content.vb: Public Shared Function GetInternalMessageDocument(messageHeader As String, messageLines As String()) As XPathDocument
  overload: Songhay.Xml.XmlUtility.GetInternalMessageDocument*
  nameWithType.vb: XmlUtility.GetInternalMessageDocument(String, String())
  fullName.vb: Songhay.Xml.XmlUtility.GetInternalMessageDocument(String, String())
  name.vb: GetInternalMessageDocument(String, String())
- uid: Songhay.Xml.XmlUtility.GetInternalMessageDocument(System.String,System.String,System.String[])
  commentId: M:Songhay.Xml.XmlUtility.GetInternalMessageDocument(System.String,System.String,System.String[])
  id: GetInternalMessageDocument(System.String,System.String,System.String[])
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetInternalMessageDocument(string?, string?, string[]?)
  nameWithType: XmlUtility.GetInternalMessageDocument(string?, string?, string[]?)
  fullName: Songhay.Xml.XmlUtility.GetInternalMessageDocument(string?, string?, string[]?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetInternalMessageDocument.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetInternalMessageDocument
    path: SonghayCore/Xml/XmlUtility.GetInternalMessageDocument.cs
    startLine: 23
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns an <xref href="System.Xml.XPath.XPathDocument" data-throw-if-not-resolved="false"></xref>

    based on the specified header and lines.
  example: []
  syntax:
    content: public static XPathDocument? GetInternalMessageDocument(string? messageHeader, string? messageCode, string[]? messageLines)
    parameters:
    - id: messageHeader
      type: System.String
      description: Message header.
    - id: messageCode
      type: System.String
      description: Message code for errors, exceptions or faults
    - id: messageLines
      type: System.String[]
      description: Message lines.
    return:
      type: System.Xml.XPath.XPathDocument
    content.vb: Public Shared Function GetInternalMessageDocument(messageHeader As String, messageCode As String, messageLines As String()) As XPathDocument
  overload: Songhay.Xml.XmlUtility.GetInternalMessageDocument*
  nameWithType.vb: XmlUtility.GetInternalMessageDocument(String, String, String())
  fullName.vb: Songhay.Xml.XmlUtility.GetInternalMessageDocument(String, String, String())
  name.vb: GetInternalMessageDocument(String, String, String())
- uid: Songhay.Xml.XmlUtility.GetNamespaceManager(System.Xml.XPath.IXPathNavigable)
  commentId: M:Songhay.Xml.XmlUtility.GetNamespaceManager(System.Xml.XPath.IXPathNavigable)
  id: GetNamespaceManager(System.Xml.XPath.IXPathNavigable)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetNamespaceManager(IXPathNavigable?)
  nameWithType: XmlUtility.GetNamespaceManager(IXPathNavigable?)
  fullName: Songhay.Xml.XmlUtility.GetNamespaceManager(System.Xml.XPath.IXPathNavigable?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetNamespaceManager.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetNamespaceManager
    path: SonghayCore/Xml/XmlUtility.GetNamespaceManager.cs
    startLine: 12
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns a <xref href="System.Xml.XmlNamespaceManager" data-throw-if-not-resolved="false"></xref>

    with respect to the document element of the specified

    <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> document.
  example: []
  syntax:
    content: public static XmlNamespaceManager? GetNamespaceManager(IXPathNavigable? navigable)
    parameters:
    - id: navigable
      type: System.Xml.XPath.IXPathNavigable
      description: The <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> document.
    return:
      type: System.Xml.XmlNamespaceManager
    content.vb: Public Shared Function GetNamespaceManager(navigable As IXPathNavigable) As XmlNamespaceManager
  overload: Songhay.Xml.XmlUtility.GetNamespaceManager*
  nameWithType.vb: XmlUtility.GetNamespaceManager(IXPathNavigable)
  fullName.vb: Songhay.Xml.XmlUtility.GetNamespaceManager(System.Xml.XPath.IXPathNavigable)
  name.vb: GetNamespaceManager(IXPathNavigable)
- uid: Songhay.Xml.XmlUtility.GetNavigableDocument(System.String)
  commentId: M:Songhay.Xml.XmlUtility.GetNavigableDocument(System.String)
  id: GetNavigableDocument(System.String)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetNavigableDocument(string?)
  nameWithType: XmlUtility.GetNavigableDocument(string?)
  fullName: Songhay.Xml.XmlUtility.GetNavigableDocument(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetNavigableDocument.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetNavigableDocument
    path: SonghayCore/Xml/XmlUtility.GetNavigableDocument.cs
    startLine: 11
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns an <xref href="System.Xml.XPath.XPathDocument" data-throw-if-not-resolved="false"></xref>

    based on the specified <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static XPathDocument? GetNavigableDocument(string? xmlFragment)
    parameters:
    - id: xmlFragment
      type: System.String
      description: A well-formed XML <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Xml.XPath.XPathDocument
    content.vb: Public Shared Function GetNavigableDocument(xmlFragment As String) As XPathDocument
  overload: Songhay.Xml.XmlUtility.GetNavigableDocument*
  nameWithType.vb: XmlUtility.GetNavigableDocument(String)
  fullName.vb: Songhay.Xml.XmlUtility.GetNavigableDocument(String)
  name.vb: GetNavigableDocument(String)
- uid: Songhay.Xml.XmlUtility.GetNavigableDocument(System.Xml.XPath.IXPathNavigable)
  commentId: M:Songhay.Xml.XmlUtility.GetNavigableDocument(System.Xml.XPath.IXPathNavigable)
  id: GetNavigableDocument(System.Xml.XPath.IXPathNavigable)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetNavigableDocument(IXPathNavigable?)
  nameWithType: XmlUtility.GetNavigableDocument(IXPathNavigable?)
  fullName: Songhay.Xml.XmlUtility.GetNavigableDocument(System.Xml.XPath.IXPathNavigable?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetNavigableDocument.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetNavigableDocument
    path: SonghayCore/Xml/XmlUtility.GetNavigableDocument.cs
    startLine: 33
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns an <xref href="System.Xml.XPath.XPathDocument" data-throw-if-not-resolved="false"></xref>

    based on the specified <xref href="System.Xml.XmlNode" data-throw-if-not-resolved="false"></xref>.
  remarks: Use this member to convert <xref href="System.Xml.XmlDocument" data-throw-if-not-resolved="false"></xref> documents.
  example: []
  syntax:
    content: public static XPathDocument? GetNavigableDocument(IXPathNavigable? navigable)
    parameters:
    - id: navigable
      type: System.Xml.XPath.IXPathNavigable
      description: The source <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> document.
    return:
      type: System.Xml.XPath.XPathDocument
    content.vb: Public Shared Function GetNavigableDocument(navigable As IXPathNavigable) As XPathDocument
  overload: Songhay.Xml.XmlUtility.GetNavigableDocument*
  nameWithType.vb: XmlUtility.GetNavigableDocument(IXPathNavigable)
  fullName.vb: Songhay.Xml.XmlUtility.GetNavigableDocument(System.Xml.XPath.IXPathNavigable)
  name.vb: GetNavigableDocument(IXPathNavigable)
- uid: Songhay.Xml.XmlUtility.GetNavigableDocument(System.IO.Stream)
  commentId: M:Songhay.Xml.XmlUtility.GetNavigableDocument(System.IO.Stream)
  id: GetNavigableDocument(System.IO.Stream)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetNavigableDocument(Stream?)
  nameWithType: XmlUtility.GetNavigableDocument(Stream?)
  fullName: Songhay.Xml.XmlUtility.GetNavigableDocument(System.IO.Stream?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetNavigableDocument.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetNavigableDocument
    path: SonghayCore/Xml/XmlUtility.GetNavigableDocument.cs
    startLine: 51
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns an <xref href="System.Xml.XPath.XPathDocument" data-throw-if-not-resolved="false"></xref>

    based on the specified <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static XPathDocument? GetNavigableDocument(Stream? stream)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The stream.
    return:
      type: System.Xml.XPath.XPathDocument
    content.vb: Public Shared Function GetNavigableDocument(stream As Stream) As XPathDocument
  overload: Songhay.Xml.XmlUtility.GetNavigableDocument*
  nameWithType.vb: XmlUtility.GetNavigableDocument(Stream)
  fullName.vb: Songhay.Xml.XmlUtility.GetNavigableDocument(System.IO.Stream)
  name.vb: GetNavigableDocument(Stream)
- uid: Songhay.Xml.XmlUtility.GetNavigableNode(System.Xml.XPath.IXPathNavigable,System.String)
  commentId: M:Songhay.Xml.XmlUtility.GetNavigableNode(System.Xml.XPath.IXPathNavigable,System.String)
  id: GetNavigableNode(System.Xml.XPath.IXPathNavigable,System.String)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetNavigableNode(IXPathNavigable?, string?)
  nameWithType: XmlUtility.GetNavigableNode(IXPathNavigable?, string?)
  fullName: Songhay.Xml.XmlUtility.GetNavigableNode(System.Xml.XPath.IXPathNavigable?, string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetNavigableNode.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetNavigableNode
    path: SonghayCore/Xml/XmlUtility.GetNavigableNode.cs
    startLine: 15
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns an <xref href="System.Xml.XPath.XPathNavigator" data-throw-if-not-resolved="false"></xref>

    based on the nodeQuery Expression toward the source document.
  example: []
  syntax:
    content: public static XPathNavigator? GetNavigableNode(IXPathNavigable? navigable, string? nodeQuery)
    parameters:
    - id: navigable
      type: System.Xml.XPath.IXPathNavigable
      description: The source <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> document.
    - id: nodeQuery
      type: System.String
      description: >-
        The value to be compiled

        into an <xref href="System.Xml.XPath.XPathExpression" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Xml.XPath.XPathNavigator
    content.vb: Public Shared Function GetNavigableNode(navigable As IXPathNavigable, nodeQuery As String) As XPathNavigator
  overload: Songhay.Xml.XmlUtility.GetNavigableNode*
  nameWithType.vb: XmlUtility.GetNavigableNode(IXPathNavigable, String)
  fullName.vb: Songhay.Xml.XmlUtility.GetNavigableNode(System.Xml.XPath.IXPathNavigable, String)
  name.vb: GetNavigableNode(IXPathNavigable, String)
- uid: Songhay.Xml.XmlUtility.GetNavigableNode(System.Xml.XPath.IXPathNavigable,System.String,System.Xml.XmlNamespaceManager)
  commentId: M:Songhay.Xml.XmlUtility.GetNavigableNode(System.Xml.XPath.IXPathNavigable,System.String,System.Xml.XmlNamespaceManager)
  id: GetNavigableNode(System.Xml.XPath.IXPathNavigable,System.String,System.Xml.XmlNamespaceManager)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetNavigableNode(IXPathNavigable?, string?, XmlNamespaceManager?)
  nameWithType: XmlUtility.GetNavigableNode(IXPathNavigable?, string?, XmlNamespaceManager?)
  fullName: Songhay.Xml.XmlUtility.GetNavigableNode(System.Xml.XPath.IXPathNavigable?, string?, System.Xml.XmlNamespaceManager?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetNavigableNode.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetNavigableNode
    path: SonghayCore/Xml/XmlUtility.GetNavigableNode.cs
    startLine: 42
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns an <xref href="System.Xml.XPath.XPathNavigator" data-throw-if-not-resolved="false"></xref>

    based on the nodeQuery Expression toward the source document.
  example: []
  syntax:
    content: public static XPathNavigator? GetNavigableNode(IXPathNavigable? navigable, string? nodeQuery, XmlNamespaceManager? nsMan)
    parameters:
    - id: navigable
      type: System.Xml.XPath.IXPathNavigable
      description: The source <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> document.
    - id: nodeQuery
      type: System.String
      description: >-
        The value to be compiled

        into an <xref href="System.Xml.XPath.XPathExpression" data-throw-if-not-resolved="false"></xref>.
    - id: nsMan
      type: System.Xml.XmlNamespaceManager
      description: >-
        The <xref href="System.Xml.XmlNamespaceManager" data-throw-if-not-resolved="false"></xref>

        to use to resolve prefixes.
    return:
      type: System.Xml.XPath.XPathNavigator
    content.vb: Public Shared Function GetNavigableNode(navigable As IXPathNavigable, nodeQuery As String, nsMan As XmlNamespaceManager) As XPathNavigator
  overload: Songhay.Xml.XmlUtility.GetNavigableNode*
  nameWithType.vb: XmlUtility.GetNavigableNode(IXPathNavigable, String, XmlNamespaceManager)
  fullName.vb: Songhay.Xml.XmlUtility.GetNavigableNode(System.Xml.XPath.IXPathNavigable, String, System.Xml.XmlNamespaceManager)
  name.vb: GetNavigableNode(IXPathNavigable, String, XmlNamespaceManager)
- uid: Songhay.Xml.XmlUtility.GetNavigableNodes(System.Xml.XPath.IXPathNavigable,System.String)
  commentId: M:Songhay.Xml.XmlUtility.GetNavigableNodes(System.Xml.XPath.IXPathNavigable,System.String)
  id: GetNavigableNodes(System.Xml.XPath.IXPathNavigable,System.String)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetNavigableNodes(IXPathNavigable?, string?)
  nameWithType: XmlUtility.GetNavigableNodes(IXPathNavigable?, string?)
  fullName: Songhay.Xml.XmlUtility.GetNavigableNodes(System.Xml.XPath.IXPathNavigable?, string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetNavigableNode.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetNavigableNodes
    path: SonghayCore/Xml/XmlUtility.GetNavigableNode.cs
    startLine: 66
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns an <xref href="System.Xml.XPath.XPathNodeIterator" data-throw-if-not-resolved="false"></xref>

    based on the nodeQuery Expression toward the source document.
  example: []
  syntax:
    content: public static XPathNodeIterator? GetNavigableNodes(IXPathNavigable? navigable, string? nodeQuery)
    parameters:
    - id: navigable
      type: System.Xml.XPath.IXPathNavigable
      description: The source <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> document.
    - id: nodeQuery
      type: System.String
      description: >-
        The value to be compiled

        into an <xref href="System.Xml.XPath.XPathExpression" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Xml.XPath.XPathNodeIterator
    content.vb: Public Shared Function GetNavigableNodes(navigable As IXPathNavigable, nodeQuery As String) As XPathNodeIterator
  overload: Songhay.Xml.XmlUtility.GetNavigableNodes*
  nameWithType.vb: XmlUtility.GetNavigableNodes(IXPathNavigable, String)
  fullName.vb: Songhay.Xml.XmlUtility.GetNavigableNodes(System.Xml.XPath.IXPathNavigable, String)
  name.vb: GetNavigableNodes(IXPathNavigable, String)
- uid: Songhay.Xml.XmlUtility.GetNavigableNodes(System.Xml.XPath.IXPathNavigable,System.String,System.Xml.XmlNamespaceManager)
  commentId: M:Songhay.Xml.XmlUtility.GetNavigableNodes(System.Xml.XPath.IXPathNavigable,System.String,System.Xml.XmlNamespaceManager)
  id: GetNavigableNodes(System.Xml.XPath.IXPathNavigable,System.String,System.Xml.XmlNamespaceManager)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetNavigableNodes(IXPathNavigable?, string?, XmlNamespaceManager)
  nameWithType: XmlUtility.GetNavigableNodes(IXPathNavigable?, string?, XmlNamespaceManager)
  fullName: Songhay.Xml.XmlUtility.GetNavigableNodes(System.Xml.XPath.IXPathNavigable?, string?, System.Xml.XmlNamespaceManager)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetNavigableNode.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetNavigableNodes
    path: SonghayCore/Xml/XmlUtility.GetNavigableNode.cs
    startLine: 94
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns an <xref href="System.Xml.XPath.XPathNodeIterator" data-throw-if-not-resolved="false"></xref>

    based on the nodeQuery Expression toward the source document.
  example: []
  syntax:
    content: public static XPathNodeIterator? GetNavigableNodes(IXPathNavigable? navigable, string? nodeQuery, XmlNamespaceManager nsMan)
    parameters:
    - id: navigable
      type: System.Xml.XPath.IXPathNavigable
      description: The source <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> document.
    - id: nodeQuery
      type: System.String
      description: >-
        The value to be compiled

        into an <xref href="System.Xml.XPath.XPathExpression" data-throw-if-not-resolved="false"></xref>.
    - id: nsMan
      type: System.Xml.XmlNamespaceManager
      description: >-
        The <xref href="System.Xml.XmlNamespaceManager" data-throw-if-not-resolved="false"></xref>

        to use to resolve prefixes.
    return:
      type: System.Xml.XPath.XPathNodeIterator
    content.vb: Public Shared Function GetNavigableNodes(navigable As IXPathNavigable, nodeQuery As String, nsMan As XmlNamespaceManager) As XPathNodeIterator
  overload: Songhay.Xml.XmlUtility.GetNavigableNodes*
  nameWithType.vb: XmlUtility.GetNavigableNodes(IXPathNavigable, String, XmlNamespaceManager)
  fullName.vb: Songhay.Xml.XmlUtility.GetNavigableNodes(System.Xml.XPath.IXPathNavigable, String, System.Xml.XmlNamespaceManager)
  name.vb: GetNavigableNodes(IXPathNavigable, String, XmlNamespaceManager)
- uid: Songhay.Xml.XmlUtility.GetNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean)
  commentId: M:Songhay.Xml.XmlUtility.GetNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean)
  id: GetNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetNodeValue(IXPathNavigable?, string?, bool)
  nameWithType: XmlUtility.GetNodeValue(IXPathNavigable?, string?, bool)
  fullName: Songhay.Xml.XmlUtility.GetNodeValue(System.Xml.XPath.IXPathNavigable?, string?, bool)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetNodeValue.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetNodeValue
    path: SonghayCore/Xml/XmlUtility.GetNodeValue.cs
    startLine: 11
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns an object for parsing

    and adding to a list of parameters for data access.
  example: []
  syntax:
    content: public static object? GetNodeValue(IXPathNavigable? node, string? nodeQuery, bool throwException)
    parameters:
    - id: node
      type: System.Xml.XPath.IXPathNavigable
      description: The <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> node.
    - id: nodeQuery
      type: System.String
      description: The node query <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
    - id: throwException
      type: System.Boolean
      description: When <code>true</code>, throw an exception for null nodes.
    return:
      type: System.Object
    content.vb: Public Shared Function GetNodeValue(node As IXPathNavigable, nodeQuery As String, throwException As Boolean) As Object
  overload: Songhay.Xml.XmlUtility.GetNodeValue*
  nameWithType.vb: XmlUtility.GetNodeValue(IXPathNavigable, String, Boolean)
  fullName.vb: Songhay.Xml.XmlUtility.GetNodeValue(System.Xml.XPath.IXPathNavigable, String, Boolean)
  name.vb: GetNodeValue(IXPathNavigable, String, Boolean)
- uid: Songhay.Xml.XmlUtility.GetNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.Object)
  commentId: M:Songhay.Xml.XmlUtility.GetNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.Object)
  id: GetNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.Object)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetNodeValue(IXPathNavigable?, string?, bool, object?)
  nameWithType: XmlUtility.GetNodeValue(IXPathNavigable?, string?, bool, object?)
  fullName: Songhay.Xml.XmlUtility.GetNodeValue(System.Xml.XPath.IXPathNavigable?, string?, bool, object?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetNodeValue.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetNodeValue
    path: SonghayCore/Xml/XmlUtility.GetNodeValue.cs
    startLine: 22
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns an object for parsing

    and adding to a list of parameters for data access.
  example: []
  syntax:
    content: public static object? GetNodeValue(IXPathNavigable? node, string? nodeQuery, bool throwException, object? defaultValue)
    parameters:
    - id: node
      type: System.Xml.XPath.IXPathNavigable
      description: The <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> node.
    - id: nodeQuery
      type: System.String
      description: The node query <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
    - id: throwException
      type: System.Boolean
      description: When <code>true</code>, throw an exception for null nodes.
    - id: defaultValue
      type: System.Object
      description: Return the specified default value for “zero-length” text nodes.
    return:
      type: System.Object
    content.vb: Public Shared Function GetNodeValue(node As IXPathNavigable, nodeQuery As String, throwException As Boolean, defaultValue As Object) As Object
  overload: Songhay.Xml.XmlUtility.GetNodeValue*
  nameWithType.vb: XmlUtility.GetNodeValue(IXPathNavigable, String, Boolean, Object)
  fullName.vb: Songhay.Xml.XmlUtility.GetNodeValue(System.Xml.XPath.IXPathNavigable, String, Boolean, Object)
  name.vb: GetNodeValue(IXPathNavigable, String, Boolean, Object)
- uid: Songhay.Xml.XmlUtility.GetNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.Object,System.Xml.XmlNamespaceManager)
  commentId: M:Songhay.Xml.XmlUtility.GetNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.Object,System.Xml.XmlNamespaceManager)
  id: GetNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.Object,System.Xml.XmlNamespaceManager)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetNodeValue(IXPathNavigable?, string?, bool, object?, XmlNamespaceManager?)
  nameWithType: XmlUtility.GetNodeValue(IXPathNavigable?, string?, bool, object?, XmlNamespaceManager?)
  fullName: Songhay.Xml.XmlUtility.GetNodeValue(System.Xml.XPath.IXPathNavigable?, string?, bool, object?, System.Xml.XmlNamespaceManager?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetNodeValue.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetNodeValue
    path: SonghayCore/Xml/XmlUtility.GetNodeValue.cs
    startLine: 37
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns an object for parsing

    and adding to a list of parameters for data access.
  example: []
  syntax:
    content: public static object? GetNodeValue(IXPathNavigable? node, string? nodeQuery, bool throwException, object? defaultValue, XmlNamespaceManager? nsMan)
    parameters:
    - id: node
      type: System.Xml.XPath.IXPathNavigable
      description: The <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> node.
    - id: nodeQuery
      type: System.String
      description: The node query <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
    - id: throwException
      type: System.Boolean
      description: When <code>true</code>, throw an exception for null nodes.
    - id: defaultValue
      type: System.Object
      description: Return the specified default value for “zero-length” text nodes.
    - id: nsMan
      type: System.Xml.XmlNamespaceManager
      description: >-
        The <xref href="System.Xml.XmlNamespaceManager" data-throw-if-not-resolved="false"></xref>

        to use to resolve prefixes.
    return:
      type: System.Object
    content.vb: Public Shared Function GetNodeValue(node As IXPathNavigable, nodeQuery As String, throwException As Boolean, defaultValue As Object, nsMan As XmlNamespaceManager) As Object
  overload: Songhay.Xml.XmlUtility.GetNodeValue*
  nameWithType.vb: XmlUtility.GetNodeValue(IXPathNavigable, String, Boolean, Object, XmlNamespaceManager)
  fullName.vb: Songhay.Xml.XmlUtility.GetNodeValue(System.Xml.XPath.IXPathNavigable, String, Boolean, Object, System.Xml.XmlNamespaceManager)
  name.vb: GetNodeValue(IXPathNavigable, String, Boolean, Object, XmlNamespaceManager)
- uid: Songhay.Xml.XmlUtility.GetNodeValueAndParse``1(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,``0)
  commentId: M:Songhay.Xml.XmlUtility.GetNodeValueAndParse``1(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,``0)
  id: GetNodeValueAndParse``1(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,``0)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetNodeValueAndParse<T>(IXPathNavigable?, string?, bool, T)
  nameWithType: XmlUtility.GetNodeValueAndParse<T>(IXPathNavigable?, string?, bool, T)
  fullName: Songhay.Xml.XmlUtility.GetNodeValueAndParse<T>(System.Xml.XPath.IXPathNavigable?, string?, bool, T)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetNodeValue.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetNodeValueAndParse
    path: SonghayCore/Xml/XmlUtility.GetNodeValue.cs
    startLine: 65
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns an object for parsing

    and adding to a list of parameters for data access.
  example: []
  syntax:
    content: public static object? GetNodeValueAndParse<T>(IXPathNavigable? node, string? nodeQuery, bool throwException, T defaultValue)
    parameters:
    - id: node
      type: System.Xml.XPath.IXPathNavigable
      description: The <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> node.
    - id: nodeQuery
      type: System.String
      description: The XPath <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
    - id: throwException
      type: System.Boolean
      description: When <code>true</code>, throw an exception for null nodes and nodes that do not parse into the specified type.
    - id: defaultValue
      type: '{T}'
      description: Return a boxing <xref href="System.Object" data-throw-if-not-resolved="false"></xref> for “zero-length” text nodes.
    typeParameters:
    - id: T
      description: The type to parse from the node value.
    return:
      type: System.Object
    content.vb: Public Shared Function GetNodeValueAndParse(Of T)(node As IXPathNavigable, nodeQuery As String, throwException As Boolean, defaultValue As T) As Object
  overload: Songhay.Xml.XmlUtility.GetNodeValueAndParse*
  nameWithType.vb: XmlUtility.GetNodeValueAndParse(Of T)(IXPathNavigable, String, Boolean, T)
  fullName.vb: Songhay.Xml.XmlUtility.GetNodeValueAndParse(Of T)(System.Xml.XPath.IXPathNavigable, String, Boolean, T)
  name.vb: GetNodeValueAndParse(Of T)(IXPathNavigable, String, Boolean, T)
- uid: Songhay.Xml.XmlUtility.GetNodeValueAndParse``1(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,``0,System.Xml.XmlNamespaceManager)
  commentId: M:Songhay.Xml.XmlUtility.GetNodeValueAndParse``1(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,``0,System.Xml.XmlNamespaceManager)
  id: GetNodeValueAndParse``1(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,``0,System.Xml.XmlNamespaceManager)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetNodeValueAndParse<T>(IXPathNavigable?, string?, bool, T?, XmlNamespaceManager?)
  nameWithType: XmlUtility.GetNodeValueAndParse<T>(IXPathNavigable?, string?, bool, T?, XmlNamespaceManager?)
  fullName: Songhay.Xml.XmlUtility.GetNodeValueAndParse<T>(System.Xml.XPath.IXPathNavigable?, string?, bool, T?, System.Xml.XmlNamespaceManager?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetNodeValue.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetNodeValueAndParse
    path: SonghayCore/Xml/XmlUtility.GetNodeValue.cs
    startLine: 81
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns an object for parsing

    and adding to a list of parameters for data access.
  example: []
  syntax:
    content: public static object? GetNodeValueAndParse<T>(IXPathNavigable? node, string? nodeQuery, bool throwException, T? defaultValue, XmlNamespaceManager? nsMan)
    parameters:
    - id: node
      type: System.Xml.XPath.IXPathNavigable
      description: The <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> node.
    - id: nodeQuery
      type: System.String
      description: The XPath <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
    - id: throwException
      type: System.Boolean
      description: When <code>true</code>, throw an exception for null nodes and nodes that do not parse into the specified type.
    - id: defaultValue
      type: '{T}'
      description: Return a boxing <xref href="System.Object" data-throw-if-not-resolved="false"></xref> for “zero-length” text nodes.
    - id: nsMan
      type: System.Xml.XmlNamespaceManager
      description: >-
        The <xref href="System.Xml.XmlNamespaceManager" data-throw-if-not-resolved="false"></xref>

        to use to resolve prefixes.
    typeParameters:
    - id: T
      description: The type to parse from the node value.
    return:
      type: System.Object
    content.vb: Public Shared Function GetNodeValueAndParse(Of T)(node As IXPathNavigable, nodeQuery As String, throwException As Boolean, defaultValue As T, nsMan As XmlNamespaceManager) As Object
  overload: Songhay.Xml.XmlUtility.GetNodeValueAndParse*
  nameWithType.vb: XmlUtility.GetNodeValueAndParse(Of T)(IXPathNavigable, String, Boolean, T, XmlNamespaceManager)
  fullName.vb: Songhay.Xml.XmlUtility.GetNodeValueAndParse(Of T)(System.Xml.XPath.IXPathNavigable, String, Boolean, T, System.Xml.XmlNamespaceManager)
  name.vb: GetNodeValueAndParse(Of T)(IXPathNavigable, String, Boolean, T, XmlNamespaceManager)
- uid: Songhay.Xml.XmlUtility.GetText(System.IO.MemoryStream)
  commentId: M:Songhay.Xml.XmlUtility.GetText(System.IO.MemoryStream)
  id: GetText(System.IO.MemoryStream)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetText(MemoryStream?)
  nameWithType: XmlUtility.GetText(MemoryStream?)
  fullName: Songhay.Xml.XmlUtility.GetText(System.IO.MemoryStream?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetText.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetText
    path: SonghayCore/Xml/XmlUtility.GetText.cs
    startLine: 9
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    “Cleans” XML data returning

    in a <xref href="System.IO.MemoryStream" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static string? GetText(MemoryStream? ramStream)
    parameters:
    - id: ramStream
      type: System.IO.MemoryStream
      description: <xref href="System.IO.MemoryStream" data-throw-if-not-resolved="false"></xref>
    return:
      type: System.String
    content.vb: Public Shared Function GetText(ramStream As MemoryStream) As String
  overload: Songhay.Xml.XmlUtility.GetText*
  nameWithType.vb: XmlUtility.GetText(MemoryStream)
  fullName.vb: Songhay.Xml.XmlUtility.GetText(System.IO.MemoryStream)
  name.vb: GetText(MemoryStream)
- uid: Songhay.Xml.XmlUtility.GetXslResult(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.IXPathNavigable)
  commentId: M:Songhay.Xml.XmlUtility.GetXslResult(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.IXPathNavigable)
  id: GetXslResult(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.IXPathNavigable)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetXslResult(IXPathNavigable?, IXPathNavigable?)
  nameWithType: XmlUtility.GetXslResult(IXPathNavigable?, IXPathNavigable?)
  fullName: Songhay.Xml.XmlUtility.GetXslResult(System.Xml.XPath.IXPathNavigable?, System.Xml.XPath.IXPathNavigable?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetXslResult.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetXslResult
    path: SonghayCore/Xml/XmlUtility.GetXslResult.cs
    startLine: 15
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns a <xref href="System.Xml.XPath.XPathDocument" data-throw-if-not-resolved="false"></xref>

    for the transformation of the XSLT document

    and the XML document.
  example: []
  syntax:
    content: public static XPathDocument GetXslResult(IXPathNavigable? navigableXsl, IXPathNavigable? navigableSet)
    parameters:
    - id: navigableXsl
      type: System.Xml.XPath.IXPathNavigable
      description: The source <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> XSL document.
    - id: navigableSet
      type: System.Xml.XPath.IXPathNavigable
      description: The source <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> XML document.
    return:
      type: System.Xml.XPath.XPathDocument
    content.vb: Public Shared Function GetXslResult(navigableXsl As IXPathNavigable, navigableSet As IXPathNavigable) As XPathDocument
  overload: Songhay.Xml.XmlUtility.GetXslResult*
  nameWithType.vb: XmlUtility.GetXslResult(IXPathNavigable, IXPathNavigable)
  fullName.vb: Songhay.Xml.XmlUtility.GetXslResult(System.Xml.XPath.IXPathNavigable, System.Xml.XPath.IXPathNavigable)
  name.vb: GetXslResult(IXPathNavigable, IXPathNavigable)
- uid: Songhay.Xml.XmlUtility.GetXslResult(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XPath.IXPathNavigable)
  commentId: M:Songhay.Xml.XmlUtility.GetXslResult(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XPath.IXPathNavigable)
  id: GetXslResult(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XPath.IXPathNavigable)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetXslResult(IXPathNavigable?, XsltArgumentList?, IXPathNavigable?)
  nameWithType: XmlUtility.GetXslResult(IXPathNavigable?, XsltArgumentList?, IXPathNavigable?)
  fullName: Songhay.Xml.XmlUtility.GetXslResult(System.Xml.XPath.IXPathNavigable?, System.Xml.Xsl.XsltArgumentList?, System.Xml.XPath.IXPathNavigable?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetXslResult.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetXslResult
    path: SonghayCore/Xml/XmlUtility.GetXslResult.cs
    startLine: 34
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns a <xref href="System.Xml.XPath.XPathDocument" data-throw-if-not-resolved="false"></xref>

    for the transformation of the XSLT document

    and the XML document.
  example: []
  syntax:
    content: public static XPathDocument GetXslResult(IXPathNavigable? navigableXsl, XsltArgumentList? xslArgs, IXPathNavigable? navigableXml)
    parameters:
    - id: navigableXsl
      type: System.Xml.XPath.IXPathNavigable
      description: The source <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> XSL document.
    - id: xslArgs
      type: System.Xml.Xsl.XsltArgumentList
      description: The <xref href="System.Xml.Xsl.XsltArgumentList" data-throw-if-not-resolved="false"></xref>.
    - id: navigableXml
      type: System.Xml.XPath.IXPathNavigable
      description: The source <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> XML document.
    return:
      type: System.Xml.XPath.XPathDocument
    content.vb: Public Shared Function GetXslResult(navigableXsl As IXPathNavigable, xslArgs As XsltArgumentList, navigableXml As IXPathNavigable) As XPathDocument
  overload: Songhay.Xml.XmlUtility.GetXslResult*
  nameWithType.vb: XmlUtility.GetXslResult(IXPathNavigable, XsltArgumentList, IXPathNavigable)
  fullName.vb: Songhay.Xml.XmlUtility.GetXslResult(System.Xml.XPath.IXPathNavigable, System.Xml.Xsl.XsltArgumentList, System.Xml.XPath.IXPathNavigable)
  name.vb: GetXslResult(IXPathNavigable, XsltArgumentList, IXPathNavigable)
- uid: Songhay.Xml.XmlUtility.GetXslString(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.IXPathNavigable)
  commentId: M:Songhay.Xml.XmlUtility.GetXslString(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.IXPathNavigable)
  id: GetXslString(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.IXPathNavigable)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetXslString(IXPathNavigable?, IXPathNavigable?)
  nameWithType: XmlUtility.GetXslString(IXPathNavigable?, IXPathNavigable?)
  fullName: Songhay.Xml.XmlUtility.GetXslString(System.Xml.XPath.IXPathNavigable?, System.Xml.XPath.IXPathNavigable?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetXslString.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetXslString
    path: SonghayCore/Xml/XmlUtility.GetXslString.cs
    startLine: 11
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref>

    for the transformation of the XSLT document

    and the XML document.
  example: []
  syntax:
    content: public static string? GetXslString(IXPathNavigable? navigableXsl, IXPathNavigable? navigableSet)
    parameters:
    - id: navigableXsl
      type: System.Xml.XPath.IXPathNavigable
      description: The source <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> XSL document.
    - id: navigableSet
      type: System.Xml.XPath.IXPathNavigable
      description: The source <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> XML document.
    return:
      type: System.String
    content.vb: Public Shared Function GetXslString(navigableXsl As IXPathNavigable, navigableSet As IXPathNavigable) As String
  overload: Songhay.Xml.XmlUtility.GetXslString*
  nameWithType.vb: XmlUtility.GetXslString(IXPathNavigable, IXPathNavigable)
  fullName.vb: Songhay.Xml.XmlUtility.GetXslString(System.Xml.XPath.IXPathNavigable, System.Xml.XPath.IXPathNavigable)
  name.vb: GetXslString(IXPathNavigable, IXPathNavigable)
- uid: Songhay.Xml.XmlUtility.GetXslString(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XPath.IXPathNavigable)
  commentId: M:Songhay.Xml.XmlUtility.GetXslString(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XPath.IXPathNavigable)
  id: GetXslString(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XPath.IXPathNavigable)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetXslString(IXPathNavigable?, XsltArgumentList?, IXPathNavigable?)
  nameWithType: XmlUtility.GetXslString(IXPathNavigable?, XsltArgumentList?, IXPathNavigable?)
  fullName: Songhay.Xml.XmlUtility.GetXslString(System.Xml.XPath.IXPathNavigable?, System.Xml.Xsl.XsltArgumentList?, System.Xml.XPath.IXPathNavigable?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetXslString.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetXslString
    path: SonghayCore/Xml/XmlUtility.GetXslString.cs
    startLine: 28
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref>

    for the transformation of the XSLT document

    and the XML document.
  example: []
  syntax:
    content: public static string? GetXslString(IXPathNavigable? navigableXsl, XsltArgumentList? xslArgs, IXPathNavigable? navigableXml)
    parameters:
    - id: navigableXsl
      type: System.Xml.XPath.IXPathNavigable
      description: The source <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> XSL document.
    - id: xslArgs
      type: System.Xml.Xsl.XsltArgumentList
      description: The <xref href="System.Xml.Xsl.XsltArgumentList" data-throw-if-not-resolved="false"></xref>.
    - id: navigableXml
      type: System.Xml.XPath.IXPathNavigable
      description: The source <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> XML document.
    return:
      type: System.String
    content.vb: Public Shared Function GetXslString(navigableXsl As IXPathNavigable, xslArgs As XsltArgumentList, navigableXml As IXPathNavigable) As String
  overload: Songhay.Xml.XmlUtility.GetXslString*
  nameWithType.vb: XmlUtility.GetXslString(IXPathNavigable, XsltArgumentList, IXPathNavigable)
  fullName.vb: Songhay.Xml.XmlUtility.GetXslString(System.Xml.XPath.IXPathNavigable, System.Xml.Xsl.XsltArgumentList, System.Xml.XPath.IXPathNavigable)
  name.vb: GetXslString(IXPathNavigable, XsltArgumentList, IXPathNavigable)
- uid: Songhay.Xml.XmlUtility.GetXslString(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriterSettings)
  commentId: M:Songhay.Xml.XmlUtility.GetXslString(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriterSettings)
  id: GetXslString(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriterSettings)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetXslString(IXPathNavigable?, XsltArgumentList?, IXPathNavigable?, XmlWriterSettings?)
  nameWithType: XmlUtility.GetXslString(IXPathNavigable?, XsltArgumentList?, IXPathNavigable?, XmlWriterSettings?)
  fullName: Songhay.Xml.XmlUtility.GetXslString(System.Xml.XPath.IXPathNavigable?, System.Xml.Xsl.XsltArgumentList?, System.Xml.XPath.IXPathNavigable?, System.Xml.XmlWriterSettings?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.GetXslString.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetXslString
    path: SonghayCore/Xml/XmlUtility.GetXslString.cs
    startLine: 41
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref>

    for the transformation of the XSLT document

    and the XML document.
  example: []
  syntax:
    content: public static string? GetXslString(IXPathNavigable? navigableXsl, XsltArgumentList? xslArgs, IXPathNavigable? navigableXml, XmlWriterSettings? settings)
    parameters:
    - id: navigableXsl
      type: System.Xml.XPath.IXPathNavigable
      description: The source <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> XSL document.
    - id: xslArgs
      type: System.Xml.Xsl.XsltArgumentList
      description: The <xref href="System.Xml.Xsl.XsltArgumentList" data-throw-if-not-resolved="false"></xref>.
    - id: navigableXml
      type: System.Xml.XPath.IXPathNavigable
      description: The source <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> XML document.
    - id: settings
      type: System.Xml.XmlWriterSettings
      description: The settings.
    return:
      type: System.String
    content.vb: Public Shared Function GetXslString(navigableXsl As IXPathNavigable, xslArgs As XsltArgumentList, navigableXml As IXPathNavigable, settings As XmlWriterSettings) As String
  overload: Songhay.Xml.XmlUtility.GetXslString*
  nameWithType.vb: XmlUtility.GetXslString(IXPathNavigable, XsltArgumentList, IXPathNavigable, XmlWriterSettings)
  fullName.vb: Songhay.Xml.XmlUtility.GetXslString(System.Xml.XPath.IXPathNavigable, System.Xml.Xsl.XsltArgumentList, System.Xml.XPath.IXPathNavigable, System.Xml.XmlWriterSettings)
  name.vb: GetXslString(IXPathNavigable, XsltArgumentList, IXPathNavigable, XmlWriterSettings)
- uid: Songhay.Xml.XmlUtility.InputAs``1(``0)
  commentId: M:Songhay.Xml.XmlUtility.InputAs``1(``0)
  id: InputAs``1(``0)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: InputAs<TIn>(TIn?)
  nameWithType: XmlUtility.InputAs<TIn>(TIn?)
  fullName: Songhay.Xml.XmlUtility.InputAs<TIn>(TIn?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.InputAs.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: InputAs
    path: SonghayCore/Xml/XmlUtility.InputAs.cs
    startLine: 15
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns an <xref href="System.Xml.XPath.XPathDocument" data-throw-if-not-resolved="false"></xref>,

    converted from the specified input.
  remarks: >-
    This member only supports <code>TIn</code> as

    <xref href="System.String" data-throw-if-not-resolved="false"></xref>, <xref href="System.Xml.XmlDocument" data-throw-if-not-resolved="false"></xref> or <xref href="System.Xml.XPath.XPathDocument" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: 'public static XPathDocument? InputAs<TIn>(TIn? input) where TIn : class'
    parameters:
    - id: input
      type: '{TIn}'
      description: The input.
    typeParameters:
    - id: TIn
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the input.
    return:
      type: System.Xml.XPath.XPathDocument
      description: Returns an <xref href="System.Xml.XPath.XPathDocument" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function InputAs(Of TIn As Class)(input As TIn) As XPathDocument
  overload: Songhay.Xml.XmlUtility.InputAs*
  nameWithType.vb: XmlUtility.InputAs(Of TIn)(TIn)
  fullName.vb: Songhay.Xml.XmlUtility.InputAs(Of TIn)(TIn)
  name.vb: InputAs(Of TIn)(TIn)
- uid: Songhay.Xml.XmlUtility.IsNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.String)
  commentId: M:Songhay.Xml.XmlUtility.IsNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.String)
  id: IsNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.String)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: IsNodeValue(IXPathNavigable?, string?, bool, string?)
  nameWithType: XmlUtility.IsNodeValue(IXPathNavigable?, string?, bool, string?)
  fullName: Songhay.Xml.XmlUtility.IsNodeValue(System.Xml.XPath.IXPathNavigable?, string?, bool, string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.IsNodeValue.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: IsNodeValue
    path: SonghayCore/Xml/XmlUtility.IsNodeValue.cs
    startLine: 11
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: Returns true when the node has the specified value.
  example: []
  syntax:
    content: public static bool IsNodeValue(IXPathNavigable? node, string? nodeQuery, bool throwException, string? testValue)
    parameters:
    - id: node
      type: System.Xml.XPath.IXPathNavigable
      description: The <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> node.
    - id: nodeQuery
      type: System.String
      description: The node query <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
    - id: throwException
      type: System.Boolean
      description: When <pre><code class="lang-csharp">true</code></pre>, throw an exception for null nodes.
    - id: testValue
      type: System.String
      description: The specified value to test with the node value.
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsNodeValue(node As IXPathNavigable, nodeQuery As String, throwException As Boolean, testValue As String) As Boolean
  overload: Songhay.Xml.XmlUtility.IsNodeValue*
  nameWithType.vb: XmlUtility.IsNodeValue(IXPathNavigable, String, Boolean, String)
  fullName.vb: Songhay.Xml.XmlUtility.IsNodeValue(System.Xml.XPath.IXPathNavigable, String, Boolean, String)
  name.vb: IsNodeValue(IXPathNavigable, String, Boolean, String)
- uid: Songhay.Xml.XmlUtility.IsNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.String,System.StringComparison)
  commentId: M:Songhay.Xml.XmlUtility.IsNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.String,System.StringComparison)
  id: IsNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.String,System.StringComparison)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: IsNodeValue(IXPathNavigable?, string?, bool, string?, StringComparison)
  nameWithType: XmlUtility.IsNodeValue(IXPathNavigable?, string?, bool, string?, StringComparison)
  fullName: Songhay.Xml.XmlUtility.IsNodeValue(System.Xml.XPath.IXPathNavigable?, string?, bool, string?, System.StringComparison)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.IsNodeValue.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: IsNodeValue
    path: SonghayCore/Xml/XmlUtility.IsNodeValue.cs
    startLine: 26
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: Returns true when the node has the specified value.
  example: []
  syntax:
    content: public static bool IsNodeValue(IXPathNavigable? node, string? nodeQuery, bool throwException, string? testValue, StringComparison comparisonType)
    parameters:
    - id: node
      type: System.Xml.XPath.IXPathNavigable
      description: The <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> node.
    - id: nodeQuery
      type: System.String
      description: The node query <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
    - id: throwException
      type: System.Boolean
      description: When <pre><code class="lang-csharp">true</code></pre>, throw an exception for null nodes.
    - id: testValue
      type: System.String
      description: The specified value to test with the node value.
    - id: comparisonType
      type: System.StringComparison
      description: The <xref href="System.StringComparison" data-throw-if-not-resolved="false"></xref> type.
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsNodeValue(node As IXPathNavigable, nodeQuery As String, throwException As Boolean, testValue As String, comparisonType As StringComparison) As Boolean
  overload: Songhay.Xml.XmlUtility.IsNodeValue*
  nameWithType.vb: XmlUtility.IsNodeValue(IXPathNavigable, String, Boolean, String, StringComparison)
  fullName.vb: Songhay.Xml.XmlUtility.IsNodeValue(System.Xml.XPath.IXPathNavigable, String, Boolean, String, System.StringComparison)
  name.vb: IsNodeValue(IXPathNavigable, String, Boolean, String, StringComparison)
- uid: Songhay.Xml.XmlUtility.IsNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.String,System.Xml.XmlNamespaceManager)
  commentId: M:Songhay.Xml.XmlUtility.IsNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.String,System.Xml.XmlNamespaceManager)
  id: IsNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.String,System.Xml.XmlNamespaceManager)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: IsNodeValue(IXPathNavigable?, string?, bool, string?, XmlNamespaceManager)
  nameWithType: XmlUtility.IsNodeValue(IXPathNavigable?, string?, bool, string?, XmlNamespaceManager)
  fullName: Songhay.Xml.XmlUtility.IsNodeValue(System.Xml.XPath.IXPathNavigable?, string?, bool, string?, System.Xml.XmlNamespaceManager)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.IsNodeValue.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: IsNodeValue
    path: SonghayCore/Xml/XmlUtility.IsNodeValue.cs
    startLine: 45
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: Returns true when the node has the specified value.
  example: []
  syntax:
    content: public static bool IsNodeValue(IXPathNavigable? node, string? nodeQuery, bool throwException, string? testValue, XmlNamespaceManager nsMan)
    parameters:
    - id: node
      type: System.Xml.XPath.IXPathNavigable
      description: The <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> node.
    - id: nodeQuery
      type: System.String
      description: The node query <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
    - id: throwException
      type: System.Boolean
      description: When <pre><code class="lang-csharp">true</code></pre>, throw an exception for null nodes.
    - id: testValue
      type: System.String
      description: The specified value to test with the node value.
    - id: nsMan
      type: System.Xml.XmlNamespaceManager
      description: >-
        The <xref href="System.Xml.XmlNamespaceManager" data-throw-if-not-resolved="false"></xref>

        to use to resolve prefixes.
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsNodeValue(node As IXPathNavigable, nodeQuery As String, throwException As Boolean, testValue As String, nsMan As XmlNamespaceManager) As Boolean
  overload: Songhay.Xml.XmlUtility.IsNodeValue*
  nameWithType.vb: XmlUtility.IsNodeValue(IXPathNavigable, String, Boolean, String, XmlNamespaceManager)
  fullName.vb: Songhay.Xml.XmlUtility.IsNodeValue(System.Xml.XPath.IXPathNavigable, String, Boolean, String, System.Xml.XmlNamespaceManager)
  name.vb: IsNodeValue(IXPathNavigable, String, Boolean, String, XmlNamespaceManager)
- uid: Songhay.Xml.XmlUtility.IsNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.String,System.Xml.XmlNamespaceManager,System.StringComparison)
  commentId: M:Songhay.Xml.XmlUtility.IsNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.String,System.Xml.XmlNamespaceManager,System.StringComparison)
  id: IsNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.String,System.Xml.XmlNamespaceManager,System.StringComparison)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: IsNodeValue(IXPathNavigable?, string?, bool, string?, XmlNamespaceManager, StringComparison)
  nameWithType: XmlUtility.IsNodeValue(IXPathNavigable?, string?, bool, string?, XmlNamespaceManager, StringComparison)
  fullName: Songhay.Xml.XmlUtility.IsNodeValue(System.Xml.XPath.IXPathNavigable?, string?, bool, string?, System.Xml.XmlNamespaceManager, System.StringComparison)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.IsNodeValue.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: IsNodeValue
    path: SonghayCore/Xml/XmlUtility.IsNodeValue.cs
    startLine: 65
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: Returns true when the node has the specified value.
  example: []
  syntax:
    content: public static bool IsNodeValue(IXPathNavigable? node, string? nodeQuery, bool throwException, string? testValue, XmlNamespaceManager nsMan, StringComparison comparisonType)
    parameters:
    - id: node
      type: System.Xml.XPath.IXPathNavigable
      description: The <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> node.
    - id: nodeQuery
      type: System.String
      description: The node query <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
    - id: throwException
      type: System.Boolean
      description: When <pre><code class="lang-csharp">true</code></pre>, throw an exception for null nodes.
    - id: testValue
      type: System.String
      description: The specified value to test with the node value.
    - id: nsMan
      type: System.Xml.XmlNamespaceManager
      description: >-
        The <xref href="System.Xml.XmlNamespaceManager" data-throw-if-not-resolved="false"></xref>

        to use to resolve prefixes.
    - id: comparisonType
      type: System.StringComparison
      description: The <xref href="System.StringComparison" data-throw-if-not-resolved="false"></xref> type.
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsNodeValue(node As IXPathNavigable, nodeQuery As String, throwException As Boolean, testValue As String, nsMan As XmlNamespaceManager, comparisonType As StringComparison) As Boolean
  overload: Songhay.Xml.XmlUtility.IsNodeValue*
  nameWithType.vb: XmlUtility.IsNodeValue(IXPathNavigable, String, Boolean, String, XmlNamespaceManager, StringComparison)
  fullName.vb: Songhay.Xml.XmlUtility.IsNodeValue(System.Xml.XPath.IXPathNavigable, String, Boolean, String, System.Xml.XmlNamespaceManager, System.StringComparison)
  name.vb: IsNodeValue(IXPathNavigable, String, Boolean, String, XmlNamespaceManager, StringComparison)
- uid: Songhay.Xml.XmlUtility.IsNoNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean)
  commentId: M:Songhay.Xml.XmlUtility.IsNoNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean)
  id: IsNoNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: IsNoNodeValue(IXPathNavigable?, string?, bool)
  nameWithType: XmlUtility.IsNoNodeValue(IXPathNavigable?, string?, bool)
  fullName: Songhay.Xml.XmlUtility.IsNoNodeValue(System.Xml.XPath.IXPathNavigable?, string?, bool)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.IsNodeValue.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: IsNoNodeValue
    path: SonghayCore/Xml/XmlUtility.IsNodeValue.cs
    startLine: 79
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: Returns true when the node has the value “no”.
  example: []
  syntax:
    content: public static bool IsNoNodeValue(IXPathNavigable? node, string? nodeQuery, bool throwException)
    parameters:
    - id: node
      type: System.Xml.XPath.IXPathNavigable
      description: The <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> node.
    - id: nodeQuery
      type: System.String
      description: The node query <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
    - id: throwException
      type: System.Boolean
      description: When <pre><code class="lang-csharp">true</code></pre>, throw an exception for null nodes.
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsNoNodeValue(node As IXPathNavigable, nodeQuery As String, throwException As Boolean) As Boolean
  overload: Songhay.Xml.XmlUtility.IsNoNodeValue*
  nameWithType.vb: XmlUtility.IsNoNodeValue(IXPathNavigable, String, Boolean)
  fullName.vb: Songhay.Xml.XmlUtility.IsNoNodeValue(System.Xml.XPath.IXPathNavigable, String, Boolean)
  name.vb: IsNoNodeValue(IXPathNavigable, String, Boolean)
- uid: Songhay.Xml.XmlUtility.IsYesNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean)
  commentId: M:Songhay.Xml.XmlUtility.IsYesNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean)
  id: IsYesNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: IsYesNodeValue(IXPathNavigable?, string?, bool)
  nameWithType: XmlUtility.IsYesNodeValue(IXPathNavigable?, string?, bool)
  fullName: Songhay.Xml.XmlUtility.IsYesNodeValue(System.Xml.XPath.IXPathNavigable?, string?, bool)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.IsNodeValue.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: IsYesNodeValue
    path: SonghayCore/Xml/XmlUtility.IsNodeValue.cs
    startLine: 88
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: Returns true when the node has the value “yes”.
  example: []
  syntax:
    content: public static bool IsYesNodeValue(IXPathNavigable? node, string? nodeQuery, bool throwException)
    parameters:
    - id: node
      type: System.Xml.XPath.IXPathNavigable
      description: The <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> node.
    - id: nodeQuery
      type: System.String
      description: The node query <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
    - id: throwException
      type: System.Boolean
      description: When <pre><code class="lang-csharp">true</code></pre>, throw an exception for null nodes.
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsYesNodeValue(node As IXPathNavigable, nodeQuery As String, throwException As Boolean) As Boolean
  overload: Songhay.Xml.XmlUtility.IsYesNodeValue*
  nameWithType.vb: XmlUtility.IsYesNodeValue(IXPathNavigable, String, Boolean)
  fullName.vb: Songhay.Xml.XmlUtility.IsYesNodeValue(System.Xml.XPath.IXPathNavigable, String, Boolean)
  name.vb: IsYesNodeValue(IXPathNavigable, String, Boolean)
- uid: Songhay.Xml.XmlUtility.IsXml(System.String)
  commentId: M:Songhay.Xml.XmlUtility.IsXml(System.String)
  id: IsXml(System.String)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: IsXml(string?)
  nameWithType: XmlUtility.IsXml(string?)
  fullName: Songhay.Xml.XmlUtility.IsXml(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.IsXml.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: IsXml
    path: SonghayCore/Xml/XmlUtility.IsXml.cs
    startLine: 8
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: Returns <code>true</code> when the fragment is XML-like.
  example: []
  syntax:
    content: public static bool IsXml(string? fragment)
    parameters:
    - id: fragment
      type: System.String
      description: The fragment to test.
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsXml(fragment As String) As Boolean
  overload: Songhay.Xml.XmlUtility.IsXml*
  nameWithType.vb: XmlUtility.IsXml(String)
  fullName.vb: Songhay.Xml.XmlUtility.IsXml(String)
  name.vb: IsXml(String)
- uid: Songhay.Xml.XmlUtility.LoadXslTransform(System.String,System.String)
  commentId: M:Songhay.Xml.XmlUtility.LoadXslTransform(System.String,System.String)
  id: LoadXslTransform(System.String,System.String)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: LoadXslTransform(string?, string?)
  nameWithType: XmlUtility.LoadXslTransform(string?, string?)
  fullName: Songhay.Xml.XmlUtility.LoadXslTransform(string?, string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.LoadXslTransform.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: LoadXslTransform
    path: SonghayCore/Xml/XmlUtility.LoadXslTransform.cs
    startLine: 15
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref>

    for the transformation of the XSLT file

    and the XML file.
  example: []
  syntax:
    content: public static string? LoadXslTransform(string? xslPath, string? xmlPath)
    parameters:
    - id: xslPath
      type: System.String
      description: Output path to the XSLT file.
    - id: xmlPath
      type: System.String
      description: Output path to the XML file.
    return:
      type: System.String
    content.vb: Public Shared Function LoadXslTransform(xslPath As String, xmlPath As String) As String
  overload: Songhay.Xml.XmlUtility.LoadXslTransform*
  nameWithType.vb: XmlUtility.LoadXslTransform(String, String)
  fullName.vb: Songhay.Xml.XmlUtility.LoadXslTransform(String, String)
  name.vb: LoadXslTransform(String, String)
- uid: Songhay.Xml.XmlUtility.LoadXslTransform(System.String,System.String,System.String)
  commentId: M:Songhay.Xml.XmlUtility.LoadXslTransform(System.String,System.String,System.String)
  id: LoadXslTransform(System.String,System.String,System.String)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: LoadXslTransform(string?, string?, string?)
  nameWithType: XmlUtility.LoadXslTransform(string?, string?, string?)
  fullName: Songhay.Xml.XmlUtility.LoadXslTransform(string?, string?, string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.LoadXslTransform.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: LoadXslTransform
    path: SonghayCore/Xml/XmlUtility.LoadXslTransform.cs
    startLine: 32
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref>

    for the transformation of the XSLT file

    and the XML file.
  example: []
  syntax:
    content: public static string? LoadXslTransform(string? xslPath, string? commandName, string? xmlPath)
    parameters:
    - id: xslPath
      type: System.String
      description: Output path to the XSLT file.
    - id: commandName
      type: System.String
      description: The value for the <pre><code class="lang-csharp">cmd</code></pre>-parameter convention.
    - id: xmlPath
      type: System.String
      description: Output path to the XML file.
    return:
      type: System.String
    content.vb: Public Shared Function LoadXslTransform(xslPath As String, commandName As String, xmlPath As String) As String
  overload: Songhay.Xml.XmlUtility.LoadXslTransform*
  nameWithType.vb: XmlUtility.LoadXslTransform(String, String, String)
  fullName.vb: Songhay.Xml.XmlUtility.LoadXslTransform(String, String, String)
  name.vb: LoadXslTransform(String, String, String)
- uid: Songhay.Xml.XmlUtility.LoadXslTransform(System.String,System.Xml.Xsl.XsltArgumentList,System.String)
  commentId: M:Songhay.Xml.XmlUtility.LoadXslTransform(System.String,System.Xml.Xsl.XsltArgumentList,System.String)
  id: LoadXslTransform(System.String,System.Xml.Xsl.XsltArgumentList,System.String)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: LoadXslTransform(string?, XsltArgumentList?, string?)
  nameWithType: XmlUtility.LoadXslTransform(string?, XsltArgumentList?, string?)
  fullName: Songhay.Xml.XmlUtility.LoadXslTransform(string?, System.Xml.Xsl.XsltArgumentList?, string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.LoadXslTransform.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: LoadXslTransform
    path: SonghayCore/Xml/XmlUtility.LoadXslTransform.cs
    startLine: 53
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref>

    for the transformation of the XSLT file

    and the XML file.
  example: []
  syntax:
    content: public static string? LoadXslTransform(string? xslPath, XsltArgumentList? xslArgs, string? xmlPath)
    parameters:
    - id: xslPath
      type: System.String
      description: Output path to the XSLT file.
    - id: xslArgs
      type: System.Xml.Xsl.XsltArgumentList
      description: The <xref href="System.Xml.Xsl.XsltArgumentList" data-throw-if-not-resolved="false"></xref>.
    - id: xmlPath
      type: System.String
      description: Output path to the XML file.
    return:
      type: System.String
    content.vb: Public Shared Function LoadXslTransform(xslPath As String, xslArgs As XsltArgumentList, xmlPath As String) As String
  overload: Songhay.Xml.XmlUtility.LoadXslTransform*
  nameWithType.vb: XmlUtility.LoadXslTransform(String, XsltArgumentList, String)
  fullName.vb: Songhay.Xml.XmlUtility.LoadXslTransform(String, System.Xml.Xsl.XsltArgumentList, String)
  name.vb: LoadXslTransform(String, XsltArgumentList, String)
- uid: Songhay.Xml.XmlUtility.LoadXslTransformForMemoryInput(System.String,System.String,System.String)
  commentId: M:Songhay.Xml.XmlUtility.LoadXslTransformForMemoryInput(System.String,System.String,System.String)
  id: LoadXslTransformForMemoryInput(System.String,System.String,System.String)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: LoadXslTransformForMemoryInput(string?, string?, string?)
  nameWithType: XmlUtility.LoadXslTransformForMemoryInput(string?, string?, string?)
  fullName: Songhay.Xml.XmlUtility.LoadXslTransformForMemoryInput(string?, string?, string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.LoadXslTransform.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: LoadXslTransformForMemoryInput
    path: SonghayCore/Xml/XmlUtility.LoadXslTransform.cs
    startLine: 92
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref>

    for the transformation of the XSLT file

    and the specified <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> in memory.
  remarks: This convention is used in ASP.NET Web applications.
  example: []
  syntax:
    content: public static string? LoadXslTransformForMemoryInput(string? xslPath, string? commandName, string? xmlFragment)
    parameters:
    - id: xslPath
      type: System.String
      description: Output path to the XSLT file.
    - id: commandName
      type: System.String
      description: The value for the <pre><code class="lang-csharp">cmd</code></pre>-parameter convention.
    - id: xmlFragment
      type: System.String
      description: A well-formed XML <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.String
    content.vb: Public Shared Function LoadXslTransformForMemoryInput(xslPath As String, commandName As String, xmlFragment As String) As String
  overload: Songhay.Xml.XmlUtility.LoadXslTransformForMemoryInput*
  nameWithType.vb: XmlUtility.LoadXslTransformForMemoryInput(String, String, String)
  fullName.vb: Songhay.Xml.XmlUtility.LoadXslTransformForMemoryInput(String, String, String)
  name.vb: LoadXslTransformForMemoryInput(String, String, String)
- uid: Songhay.Xml.XmlUtility.LoadXslTransformForMemoryInput(System.String,System.String,System.Xml.XPath.IXPathNavigable)
  commentId: M:Songhay.Xml.XmlUtility.LoadXslTransformForMemoryInput(System.String,System.String,System.Xml.XPath.IXPathNavigable)
  id: LoadXslTransformForMemoryInput(System.String,System.String,System.Xml.XPath.IXPathNavigable)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: LoadXslTransformForMemoryInput(string?, string?, IXPathNavigable)
  nameWithType: XmlUtility.LoadXslTransformForMemoryInput(string?, string?, IXPathNavigable)
  fullName: Songhay.Xml.XmlUtility.LoadXslTransformForMemoryInput(string?, string?, System.Xml.XPath.IXPathNavigable)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.LoadXslTransform.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: LoadXslTransformForMemoryInput
    path: SonghayCore/Xml/XmlUtility.LoadXslTransform.cs
    startLine: 117
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref>

    for the transformation of the XSLT file

    and the specified <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> in memory.
  remarks: This convention is used in ASP.NET Web applications.
  example: []
  syntax:
    content: public static string? LoadXslTransformForMemoryInput(string? xslPath, string? commandName, IXPathNavigable navigableXml)
    parameters:
    - id: xslPath
      type: System.String
      description: Output path to the XSLT file.
    - id: commandName
      type: System.String
      description: The value for the <pre><code class="lang-csharp">cmd</code></pre>-parameter convention.
    - id: navigableXml
      type: System.Xml.XPath.IXPathNavigable
      description: The <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> in memory.
    return:
      type: System.String
    content.vb: Public Shared Function LoadXslTransformForMemoryInput(xslPath As String, commandName As String, navigableXml As IXPathNavigable) As String
  overload: Songhay.Xml.XmlUtility.LoadXslTransformForMemoryInput*
  nameWithType.vb: XmlUtility.LoadXslTransformForMemoryInput(String, String, IXPathNavigable)
  fullName.vb: Songhay.Xml.XmlUtility.LoadXslTransformForMemoryInput(String, String, System.Xml.XPath.IXPathNavigable)
  name.vb: LoadXslTransformForMemoryInput(String, String, IXPathNavigable)
- uid: Songhay.Xml.XmlUtility.LoadXslTransformForMemoryInput(System.String,System.Xml.Xsl.XsltArgumentList,System.String)
  commentId: M:Songhay.Xml.XmlUtility.LoadXslTransformForMemoryInput(System.String,System.Xml.Xsl.XsltArgumentList,System.String)
  id: LoadXslTransformForMemoryInput(System.String,System.Xml.Xsl.XsltArgumentList,System.String)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: LoadXslTransformForMemoryInput(string?, XsltArgumentList?, string?)
  nameWithType: XmlUtility.LoadXslTransformForMemoryInput(string?, XsltArgumentList?, string?)
  fullName: Songhay.Xml.XmlUtility.LoadXslTransformForMemoryInput(string?, System.Xml.Xsl.XsltArgumentList?, string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.LoadXslTransform.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: LoadXslTransformForMemoryInput
    path: SonghayCore/Xml/XmlUtility.LoadXslTransform.cs
    startLine: 146
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref>

    for the transformation of the XSLT file

    and the XML in-memory fragment.
  remarks: This convention is used in ASP.NET Web applications.
  example: []
  syntax:
    content: public static string? LoadXslTransformForMemoryInput(string? xslPath, XsltArgumentList? xslArgs, string? xmlFragment)
    parameters:
    - id: xslPath
      type: System.String
      description: Output path to the XSLT file.
    - id: xslArgs
      type: System.Xml.Xsl.XsltArgumentList
      description: The <xref href="System.Xml.Xsl.XsltArgumentList" data-throw-if-not-resolved="false"></xref>.
    - id: xmlFragment
      type: System.String
      description: A well-formed XML <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.String
    content.vb: Public Shared Function LoadXslTransformForMemoryInput(xslPath As String, xslArgs As XsltArgumentList, xmlFragment As String) As String
  overload: Songhay.Xml.XmlUtility.LoadXslTransformForMemoryInput*
  nameWithType.vb: XmlUtility.LoadXslTransformForMemoryInput(String, XsltArgumentList, String)
  fullName.vb: Songhay.Xml.XmlUtility.LoadXslTransformForMemoryInput(String, System.Xml.Xsl.XsltArgumentList, String)
  name.vb: LoadXslTransformForMemoryInput(String, XsltArgumentList, String)
- uid: Songhay.Xml.XmlUtility.OutputAs``1(System.String)
  commentId: M:Songhay.Xml.XmlUtility.OutputAs``1(System.String)
  id: OutputAs``1(System.String)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: OutputAs<TOut>(string)
  nameWithType: XmlUtility.OutputAs<TOut>(string)
  fullName: Songhay.Xml.XmlUtility.OutputAs<TOut>(string)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.OutputAs.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: OutputAs
    path: SonghayCore/Xml/XmlUtility.OutputAs.cs
    startLine: 14
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: Returns strongly typed output, converting the XML fragment.
  remarks: >-
    This member only supports <code>TIn</code> as

    <xref href="System.String" data-throw-if-not-resolved="false"></xref>, <xref href="System.Xml.XmlDocument" data-throw-if-not-resolved="false"></xref> or <xref href="System.Xml.XPath.XPathDocument" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: 'public static TOut? OutputAs<TOut>(string xmlFragment) where TOut : class'
    parameters:
    - id: xmlFragment
      type: System.String
      description: An XML fragment or document as a well-formed <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TOut
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of output to return (constrained to <code>class</code>).
    return:
      type: '{TOut}'
      description: Returns the specified <xref href="System.Type" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function OutputAs(Of TOut As Class)(xmlFragment As String) As TOut
  overload: Songhay.Xml.XmlUtility.OutputAs*
  nameWithType.vb: XmlUtility.OutputAs(Of TOut)(String)
  fullName.vb: Songhay.Xml.XmlUtility.OutputAs(Of TOut)(String)
  name.vb: OutputAs(Of TOut)(String)
- uid: Songhay.Xml.XmlUtility.OutputAs``1(System.Xml.XPath.IXPathNavigable)
  commentId: M:Songhay.Xml.XmlUtility.OutputAs``1(System.Xml.XPath.IXPathNavigable)
  id: OutputAs``1(System.Xml.XPath.IXPathNavigable)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: OutputAs<TOut>(IXPathNavigable?)
  nameWithType: XmlUtility.OutputAs<TOut>(IXPathNavigable?)
  fullName: Songhay.Xml.XmlUtility.OutputAs<TOut>(System.Xml.XPath.IXPathNavigable?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.OutputAs.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: OutputAs
    path: SonghayCore/Xml/XmlUtility.OutputAs.cs
    startLine: 36
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: Returns strongly typed output, converting the Navigable document.
  remarks: >-
    This member only supports <code>TIn</code> as

    <xref href="System.String" data-throw-if-not-resolved="false"></xref>, <xref href="System.Xml.XmlDocument" data-throw-if-not-resolved="false"></xref> or <xref href="System.Xml.XPath.XPathDocument" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: 'public static TOut? OutputAs<TOut>(IXPathNavigable? navigableDocument) where TOut : class'
    parameters:
    - id: navigableDocument
      type: System.Xml.XPath.IXPathNavigable
      description: An <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TOut
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of output to return (constrained to <code>class</code>).
    return:
      type: '{TOut}'
      description: Returns the specified <xref href="System.Type" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function OutputAs(Of TOut As Class)(navigableDocument As IXPathNavigable) As TOut
  overload: Songhay.Xml.XmlUtility.OutputAs*
  nameWithType.vb: XmlUtility.OutputAs(Of TOut)(IXPathNavigable)
  fullName.vb: Songhay.Xml.XmlUtility.OutputAs(Of TOut)(System.Xml.XPath.IXPathNavigable)
  name.vb: OutputAs(Of TOut)(IXPathNavigable)
- uid: Songhay.Xml.XmlUtility.StripNamespaces(System.String)
  commentId: M:Songhay.Xml.XmlUtility.StripNamespaces(System.String)
  id: StripNamespaces(System.String)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: StripNamespaces(string)
  nameWithType: XmlUtility.StripNamespaces(string)
  fullName: Songhay.Xml.XmlUtility.StripNamespaces(string)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.StripNamespaces.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: StripNamespaces
    path: SonghayCore/Xml/XmlUtility.StripNamespaces.cs
    startLine: 17
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: Strip the namespaces from specified <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
  remarks: >-
    WARNING: Stripping namespaces “flattens” the document

    and can cause local-name collisions.


    This routine does not remove namespace prefixes.
  example: []
  syntax:
    content: public static string? StripNamespaces(string xml)
    parameters:
    - id: xml
      type: System.String
      description: The source <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.String
    content.vb: Public Shared Function StripNamespaces(xml As String) As String
  overload: Songhay.Xml.XmlUtility.StripNamespaces*
  nameWithType.vb: XmlUtility.StripNamespaces(String)
  fullName.vb: Songhay.Xml.XmlUtility.StripNamespaces(String)
  name.vb: StripNamespaces(String)
- uid: Songhay.Xml.XmlUtility.StripNamespaces(System.String,System.Boolean)
  commentId: M:Songhay.Xml.XmlUtility.StripNamespaces(System.String,System.Boolean)
  id: StripNamespaces(System.String,System.Boolean)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: StripNamespaces(string?, bool)
  nameWithType: XmlUtility.StripNamespaces(string?, bool)
  fullName: Songhay.Xml.XmlUtility.StripNamespaces(string?, bool)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.StripNamespaces.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: StripNamespaces
    path: SonghayCore/Xml/XmlUtility.StripNamespaces.cs
    startLine: 35
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: Strip the namespaces from specified <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
  remarks: >-
    WARNING: Stripping namespaces “flattens” the document

    and can cause local-name collisions.


    This routine does not remove namespace prefixes.
  example: []
  syntax:
    content: public static string? StripNamespaces(string? xml, bool removeDocType)
    parameters:
    - id: xml
      type: System.String
      description: The source <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
    - id: removeDocType
      type: System.Boolean
      description: When <code>true</code>, removes any DOCTYPE preambles.
    return:
      type: System.String
    content.vb: Public Shared Function StripNamespaces(xml As String, removeDocType As Boolean) As String
  overload: Songhay.Xml.XmlUtility.StripNamespaces*
  nameWithType.vb: XmlUtility.StripNamespaces(String, Boolean)
  fullName.vb: Songhay.Xml.XmlUtility.StripNamespaces(String, Boolean)
  name.vb: StripNamespaces(String, Boolean)
- uid: Songhay.Xml.XmlUtility.StripNamespaces(System.Xml.XPath.IXPathNavigable)
  commentId: M:Songhay.Xml.XmlUtility.StripNamespaces(System.Xml.XPath.IXPathNavigable)
  id: StripNamespaces(System.Xml.XPath.IXPathNavigable)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: StripNamespaces(IXPathNavigable?)
  nameWithType: XmlUtility.StripNamespaces(IXPathNavigable?)
  fullName: Songhay.Xml.XmlUtility.StripNamespaces(System.Xml.XPath.IXPathNavigable?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.StripNamespaces.IXPathNavigable.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: StripNamespaces
    path: SonghayCore/Xml/XmlUtility.StripNamespaces.IXPathNavigable.cs
    startLine: 17
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: Strip the namespaces from specified document.
  remarks: >-
    WARNING: Stripping namespaces “flattens” the document

    and can cause local-name collisions.


    This routine does not remove namespace prefixes.
  example: []
  syntax:
    content: public static XPathDocument? StripNamespaces(IXPathNavigable? navigable)
    parameters:
    - id: navigable
      type: System.Xml.XPath.IXPathNavigable
      description: The source <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> document.
    return:
      type: System.Xml.XPath.XPathDocument
    content.vb: Public Shared Function StripNamespaces(navigable As IXPathNavigable) As XPathDocument
  overload: Songhay.Xml.XmlUtility.StripNamespaces*
  nameWithType.vb: XmlUtility.StripNamespaces(IXPathNavigable)
  fullName.vb: Songhay.Xml.XmlUtility.StripNamespaces(System.Xml.XPath.IXPathNavigable)
  name.vb: StripNamespaces(IXPathNavigable)
- uid: Songhay.Xml.XmlUtility.StripNamespaces(System.Xml.XPath.IXPathNavigable,System.Boolean)
  commentId: M:Songhay.Xml.XmlUtility.StripNamespaces(System.Xml.XPath.IXPathNavigable,System.Boolean)
  id: StripNamespaces(System.Xml.XPath.IXPathNavigable,System.Boolean)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: StripNamespaces(IXPathNavigable?, bool)
  nameWithType: XmlUtility.StripNamespaces(IXPathNavigable?, bool)
  fullName: Songhay.Xml.XmlUtility.StripNamespaces(System.Xml.XPath.IXPathNavigable?, bool)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.StripNamespaces.IXPathNavigable.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: StripNamespaces
    path: SonghayCore/Xml/XmlUtility.StripNamespaces.IXPathNavigable.cs
    startLine: 37
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: Strip the namespaces from specified document.
  remarks: >-
    WARNING: Stripping namespaces “flattens” the document

    and can cause local-name collisions.


    This routine does not remove namespace prefixes.
  example: []
  syntax:
    content: public static XPathDocument? StripNamespaces(IXPathNavigable? navigable, bool removeDocType)
    parameters:
    - id: navigable
      type: System.Xml.XPath.IXPathNavigable
      description: The source <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> document.
    - id: removeDocType
      type: System.Boolean
      description: When <code>true</code>, removes any DOCTYPE preambles.
    return:
      type: System.Xml.XPath.XPathDocument
    content.vb: Public Shared Function StripNamespaces(navigable As IXPathNavigable, removeDocType As Boolean) As XPathDocument
  overload: Songhay.Xml.XmlUtility.StripNamespaces*
  nameWithType.vb: XmlUtility.StripNamespaces(IXPathNavigable, Boolean)
  fullName.vb: Songhay.Xml.XmlUtility.StripNamespaces(System.Xml.XPath.IXPathNavigable, Boolean)
  name.vb: StripNamespaces(IXPathNavigable, Boolean)
- uid: Songhay.Xml.XmlUtility.GetXmlSchema(System.Xml.XPath.IXPathNavigable,System.Xml.Schema.ValidationEventHandler)
  commentId: M:Songhay.Xml.XmlUtility.GetXmlSchema(System.Xml.XPath.IXPathNavigable,System.Xml.Schema.ValidationEventHandler)
  id: GetXmlSchema(System.Xml.XPath.IXPathNavigable,System.Xml.Schema.ValidationEventHandler)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: GetXmlSchema(IXPathNavigable, ValidationEventHandler)
  nameWithType: XmlUtility.GetXmlSchema(IXPathNavigable, ValidationEventHandler)
  fullName: Songhay.Xml.XmlUtility.GetXmlSchema(System.Xml.XPath.IXPathNavigable, System.Xml.Schema.ValidationEventHandler)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.ValidateNavigableNode.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: GetXmlSchema
    path: SonghayCore/Xml/XmlUtility.ValidateNavigableNode.cs
    startLine: 17
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Returns an <xref href="System.Xml.Schema.XmlSchema" data-throw-if-not-resolved="false"></xref> based

    on the specified navigable set and validation event handler.
  example: []
  syntax:
    content: public static XmlSchema? GetXmlSchema(IXPathNavigable navigable, ValidationEventHandler eventHandler)
    parameters:
    - id: navigable
      type: System.Xml.XPath.IXPathNavigable
      description: The source <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> document.
    - id: eventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: >-
        The <xref href="System.Xml.Schema.ValidationEventHandler" data-throw-if-not-resolved="false"></xref>

        with signature MyHandler(object sender, ValidationEventArgs args).
    return:
      type: System.Xml.Schema.XmlSchema
    content.vb: Public Shared Function GetXmlSchema(navigable As IXPathNavigable, eventHandler As ValidationEventHandler) As XmlSchema
  overload: Songhay.Xml.XmlUtility.GetXmlSchema*
- uid: Songhay.Xml.XmlUtility.LoadXmlSchema(System.String,System.Xml.Schema.ValidationEventHandler)
  commentId: M:Songhay.Xml.XmlUtility.LoadXmlSchema(System.String,System.Xml.Schema.ValidationEventHandler)
  id: LoadXmlSchema(System.String,System.Xml.Schema.ValidationEventHandler)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: LoadXmlSchema(string?, ValidationEventHandler?)
  nameWithType: XmlUtility.LoadXmlSchema(string?, ValidationEventHandler?)
  fullName: Songhay.Xml.XmlUtility.LoadXmlSchema(string?, System.Xml.Schema.ValidationEventHandler?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.ValidateNavigableNode.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: LoadXmlSchema
    path: SonghayCore/Xml/XmlUtility.ValidateNavigableNode.cs
    startLine: 42
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Loads an <xref href="System.Xml.Schema.XmlSchema" data-throw-if-not-resolved="false"></xref> based

    on the specified navigable set and validation event handler.
  example: []
  syntax:
    content: public static XmlSchema? LoadXmlSchema(string? pathToSchema, ValidationEventHandler? eventHandler)
    parameters:
    - id: pathToSchema
      type: System.String
      description: The valid path to an XML Schema file.
    - id: eventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: >-
        The <xref href="System.Xml.Schema.ValidationEventHandler" data-throw-if-not-resolved="false"></xref>

        with signature MyHandler(object sender, ValidationEventArgs args).
    return:
      type: System.Xml.Schema.XmlSchema
    content.vb: Public Shared Function LoadXmlSchema(pathToSchema As String, eventHandler As ValidationEventHandler) As XmlSchema
  overload: Songhay.Xml.XmlUtility.LoadXmlSchema*
  nameWithType.vb: XmlUtility.LoadXmlSchema(String, ValidationEventHandler)
  fullName.vb: Songhay.Xml.XmlUtility.LoadXmlSchema(String, System.Xml.Schema.ValidationEventHandler)
  name.vb: LoadXmlSchema(String, ValidationEventHandler)
- uid: Songhay.Xml.XmlUtility.ValidateNavigableNode(System.Xml.XPath.IXPathNavigable,System.Xml.Schema.XmlSchema,System.Xml.Schema.ValidationEventHandler)
  commentId: M:Songhay.Xml.XmlUtility.ValidateNavigableNode(System.Xml.XPath.IXPathNavigable,System.Xml.Schema.XmlSchema,System.Xml.Schema.ValidationEventHandler)
  id: ValidateNavigableNode(System.Xml.XPath.IXPathNavigable,System.Xml.Schema.XmlSchema,System.Xml.Schema.ValidationEventHandler)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: ValidateNavigableNode(IXPathNavigable?, XmlSchema?, ValidationEventHandler?)
  nameWithType: XmlUtility.ValidateNavigableNode(IXPathNavigable?, XmlSchema?, ValidationEventHandler?)
  fullName: Songhay.Xml.XmlUtility.ValidateNavigableNode(System.Xml.XPath.IXPathNavigable?, System.Xml.Schema.XmlSchema?, System.Xml.Schema.ValidationEventHandler?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.ValidateNavigableNode.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: ValidateNavigableNode
    path: SonghayCore/Xml/XmlUtility.ValidateNavigableNode.cs
    startLine: 70
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Validates the specified navigable set

    with the specified schema and validation event handler.
  example: []
  syntax:
    content: public static void ValidateNavigableNode(IXPathNavigable? navigable, XmlSchema? schema, ValidationEventHandler? eventHandler)
    parameters:
    - id: navigable
      type: System.Xml.XPath.IXPathNavigable
      description: The source <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> document.
    - id: schema
      type: System.Xml.Schema.XmlSchema
      description: The <xref href="System.Xml.Schema.XmlSchema" data-throw-if-not-resolved="false"></xref>.
    - id: eventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: >-
        The <xref href="System.Xml.Schema.ValidationEventHandler" data-throw-if-not-resolved="false"></xref>

        with signature MyHandler(object sender, ValidationEventArgs args).
    content.vb: Public Shared Sub ValidateNavigableNode(navigable As IXPathNavigable, schema As XmlSchema, eventHandler As ValidationEventHandler)
  overload: Songhay.Xml.XmlUtility.ValidateNavigableNode*
  nameWithType.vb: XmlUtility.ValidateNavigableNode(IXPathNavigable, XmlSchema, ValidationEventHandler)
  fullName.vb: Songhay.Xml.XmlUtility.ValidateNavigableNode(System.Xml.XPath.IXPathNavigable, System.Xml.Schema.XmlSchema, System.Xml.Schema.ValidationEventHandler)
  name.vb: ValidateNavigableNode(IXPathNavigable, XmlSchema, ValidationEventHandler)
- uid: Songhay.Xml.XmlUtility.Write``1(``0,System.String)
  commentId: M:Songhay.Xml.XmlUtility.Write``1(``0,System.String)
  id: Write``1(``0,System.String)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: Write<T>(T?, string?)
  nameWithType: XmlUtility.Write<T>(T?, string?)
  fullName: Songhay.Xml.XmlUtility.Write<T>(T?, string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.Write.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: Write
    path: SonghayCore/Xml/XmlUtility.Write.cs
    startLine: 10
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: Serializes and writes to the specified path.
  example: []
  syntax:
    content: 'public static void Write<T>(T? instance, string? path) where T : class'
    parameters:
    - id: instance
      type: '{T}'
      description: The instance.
    - id: path
      type: System.String
      description: The path.
    typeParameters:
    - id: T
      description: The type of the instance.
    content.vb: Public Shared Sub Write(Of T As Class)(instance As T, path As String)
  overload: Songhay.Xml.XmlUtility.Write*
  nameWithType.vb: XmlUtility.Write(Of T)(T, String)
  fullName.vb: Songhay.Xml.XmlUtility.Write(Of T)(T, String)
  name.vb: Write(Of T)(T, String)
- uid: Songhay.Xml.XmlUtility.WriteReader(System.Xml.XmlReader,System.Xml.XmlWriter)
  commentId: M:Songhay.Xml.XmlUtility.WriteReader(System.Xml.XmlReader,System.Xml.XmlWriter)
  id: WriteReader(System.Xml.XmlReader,System.Xml.XmlWriter)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: WriteReader(XmlReader?, XmlWriter?)
  nameWithType: XmlUtility.WriteReader(XmlReader?, XmlWriter?)
  fullName: Songhay.Xml.XmlUtility.WriteReader(System.Xml.XmlReader?, System.Xml.XmlWriter?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.Write.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: WriteReader
    path: SonghayCore/Xml/XmlUtility.Write.cs
    startLine: 37
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: Transfers the data in the Source to the Destination.
  example: []
  syntax:
    content: public static void WriteReader(XmlReader? readerSource, XmlWriter? writerDestination)
    parameters:
    - id: readerSource
      type: System.Xml.XmlReader
      description: The <xref href="System.Xml.XmlReader" data-throw-if-not-resolved="false"></xref>.
    - id: writerDestination
      type: System.Xml.XmlWriter
      description: The <xref href="System.Xml.XmlWriter" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Sub WriteReader(readerSource As XmlReader, writerDestination As XmlWriter)
  overload: Songhay.Xml.XmlUtility.WriteReader*
  nameWithType.vb: XmlUtility.WriteReader(XmlReader, XmlWriter)
  fullName.vb: Songhay.Xml.XmlUtility.WriteReader(System.Xml.XmlReader, System.Xml.XmlWriter)
  name.vb: WriteReader(XmlReader, XmlWriter)
- uid: Songhay.Xml.XmlUtility.WriteXslTransform(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.IXPathNavigable,System.String)
  commentId: M:Songhay.Xml.XmlUtility.WriteXslTransform(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.IXPathNavigable,System.String)
  id: WriteXslTransform(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.IXPathNavigable,System.String)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: WriteXslTransform(IXPathNavigable?, IXPathNavigable?, string?)
  nameWithType: XmlUtility.WriteXslTransform(IXPathNavigable?, IXPathNavigable?, string?)
  fullName: Songhay.Xml.XmlUtility.WriteXslTransform(System.Xml.XPath.IXPathNavigable?, System.Xml.XPath.IXPathNavigable?, string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.Write.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: WriteXslTransform
    path: SonghayCore/Xml/XmlUtility.Write.cs
    startLine: 56
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Transforms the specified navigable documents

    and writes to disk with the specified path.
  example: []
  syntax:
    content: public static void WriteXslTransform(IXPathNavigable? xmlInput, IXPathNavigable? navigableXsl, string? outputPath)
    parameters:
    - id: xmlInput
      type: System.Xml.XPath.IXPathNavigable
      description: The specified input.
    - id: navigableXsl
      type: System.Xml.XPath.IXPathNavigable
      description: The source <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> document.
    - id: outputPath
      type: System.String
      description: The file-system, target path.
    content.vb: Public Shared Sub WriteXslTransform(xmlInput As IXPathNavigable, navigableXsl As IXPathNavigable, outputPath As String)
  overload: Songhay.Xml.XmlUtility.WriteXslTransform*
  nameWithType.vb: XmlUtility.WriteXslTransform(IXPathNavigable, IXPathNavigable, String)
  fullName.vb: Songhay.Xml.XmlUtility.WriteXslTransform(System.Xml.XPath.IXPathNavigable, System.Xml.XPath.IXPathNavigable, String)
  name.vb: WriteXslTransform(IXPathNavigable, IXPathNavigable, String)
- uid: Songhay.Xml.XmlUtility.WriteXslTransform(System.Xml.XmlReader,System.Xml.XPath.IXPathNavigable,System.String)
  commentId: M:Songhay.Xml.XmlUtility.WriteXslTransform(System.Xml.XmlReader,System.Xml.XPath.IXPathNavigable,System.String)
  id: WriteXslTransform(System.Xml.XmlReader,System.Xml.XPath.IXPathNavigable,System.String)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: WriteXslTransform(XmlReader?, IXPathNavigable?, string?)
  nameWithType: XmlUtility.WriteXslTransform(XmlReader?, IXPathNavigable?, string?)
  fullName: Songhay.Xml.XmlUtility.WriteXslTransform(System.Xml.XmlReader?, System.Xml.XPath.IXPathNavigable?, string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.Write.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: WriteXslTransform
    path: SonghayCore/Xml/XmlUtility.Write.cs
    startLine: 85
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: Transforms the specified input and writes to disk.
  example: []
  syntax:
    content: public static void WriteXslTransform(XmlReader? xmlInput, IXPathNavigable? navigableXsl, string? outputPath)
    parameters:
    - id: xmlInput
      type: System.Xml.XmlReader
      description: The specified input.
    - id: navigableXsl
      type: System.Xml.XPath.IXPathNavigable
      description: The source <xref href="System.Xml.XPath.IXPathNavigable" data-throw-if-not-resolved="false"></xref> document.
    - id: outputPath
      type: System.String
      description: The file-system, target path.
    content.vb: Public Shared Sub WriteXslTransform(xmlInput As XmlReader, navigableXsl As IXPathNavigable, outputPath As String)
  overload: Songhay.Xml.XmlUtility.WriteXslTransform*
  nameWithType.vb: XmlUtility.WriteXslTransform(XmlReader, IXPathNavigable, String)
  fullName.vb: Songhay.Xml.XmlUtility.WriteXslTransform(System.Xml.XmlReader, System.Xml.XPath.IXPathNavigable, String)
  name.vb: WriteXslTransform(XmlReader, IXPathNavigable, String)
- uid: Songhay.Xml.XmlUtility.ConventionalHtmlEntities
  commentId: F:Songhay.Xml.XmlUtility.ConventionalHtmlEntities
  id: ConventionalHtmlEntities
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: ConventionalHtmlEntities
  nameWithType: XmlUtility.ConventionalHtmlEntities
  fullName: Songhay.Xml.XmlUtility.ConventionalHtmlEntities
  type: Field
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.XmlDecode.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: ConventionalHtmlEntities
    path: SonghayCore/Xml/XmlUtility.XmlDecode.cs
    startLine: 7
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: The conventional HTML entities mapped to their respective glyphs.
  example: []
  syntax:
    content: public static readonly Dictionary<string, string> ConventionalHtmlEntities
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
    content.vb: Public Shared ReadOnly ConventionalHtmlEntities As Dictionary(Of String, String)
- uid: Songhay.Xml.XmlUtility.XmlEncode(System.String)
  commentId: M:Songhay.Xml.XmlUtility.XmlEncode(System.String)
  id: XmlEncode(System.String)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: XmlEncode(string?)
  nameWithType: XmlUtility.XmlEncode(string?)
  fullName: Songhay.Xml.XmlUtility.XmlEncode(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.XmlDecode.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: XmlEncode
    path: SonghayCore/Xml/XmlUtility.XmlDecode.cs
    startLine: 23
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Transforms selected XML glyphs

    into their respective HTML entities.
  remarks: This member will preserve HTML comments.
  example: []
  syntax:
    content: public static string? XmlEncode(string? value)
    parameters:
    - id: value
      type: System.String
      description: The value.
    return:
      type: System.String
    content.vb: Public Shared Function XmlEncode(value As String) As String
  overload: Songhay.Xml.XmlUtility.XmlEncode*
  seealso:
  - linkId: Songhay.Xml.LatinGlyphsUtility.Expand(System.String,System.Boolean)
    commentId: M:Songhay.Xml.LatinGlyphsUtility.Expand(System.String,System.Boolean)
  nameWithType.vb: XmlUtility.XmlEncode(String)
  fullName.vb: Songhay.Xml.XmlUtility.XmlEncode(String)
  name.vb: XmlEncode(String)
- uid: Songhay.Xml.XmlUtility.XmlDecode(System.String)
  commentId: M:Songhay.Xml.XmlUtility.XmlDecode(System.String)
  id: XmlDecode(System.String)
  parent: Songhay.Xml.XmlUtility
  langs:
  - csharp
  - vb
  name: XmlDecode(string?)
  nameWithType: XmlUtility.XmlDecode(string?)
  fullName: Songhay.Xml.XmlUtility.XmlDecode(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Xml/XmlUtility.XmlDecode.cs
      branch: dev/version-8.0.0
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: XmlDecode
    path: SonghayCore/Xml/XmlUtility.XmlDecode.cs
    startLine: 46
  assemblies:
  - SonghayCore
  namespace: Songhay.Xml
  summary: >-
    Transforms selected HTML entities

    into their respective glyphs.
  example: []
  syntax:
    content: public static string? XmlDecode(string? value)
    parameters:
    - id: value
      type: System.String
      description: The value.
    return:
      type: System.String
    content.vb: Public Shared Function XmlDecode(value As String) As String
  overload: Songhay.Xml.XmlUtility.XmlDecode*
  seealso:
  - linkId: Songhay.Xml.LatinGlyphsUtility.Condense(System.String,System.Boolean)
    commentId: M:Songhay.Xml.LatinGlyphsUtility.Condense(System.String,System.Boolean)
  nameWithType.vb: XmlUtility.XmlDecode(String)
  fullName.vb: Songhay.Xml.XmlUtility.XmlDecode(String)
  name.vb: XmlDecode(String)
references:
- uid: System.Xml.XPath.XPathDocument
  commentId: T:System.Xml.XPath.XPathDocument
  parent: System.Xml.XPath
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.xpath.xpathdocument
  name: XPathDocument
  nameWithType: XPathDocument
  fullName: System.Xml.XPath.XPathDocument
- uid: System.Xml.XPath.IXPathNavigable
  commentId: T:System.Xml.XPath.IXPathNavigable
  parent: System.Xml.XPath
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.xpath.ixpathnavigable
  name: IXPathNavigable
  nameWithType: IXPathNavigable
  fullName: System.Xml.XPath.IXPathNavigable
- uid: Songhay.Xml
  commentId: N:Songhay.Xml
  href: Songhay.html
  name: Songhay.Xml
  nameWithType: Songhay.Xml
  fullName: Songhay.Xml
  spec.csharp:
  - uid: Songhay
    name: Songhay
    href: Songhay.html
  - name: .
  - uid: Songhay.Xml
    name: Xml
    href: Songhay.Xml.html
  spec.vb:
  - uid: Songhay
    name: Songhay
    href: Songhay.html
  - name: .
  - uid: Songhay.Xml
    name: Xml
    href: Songhay.Xml.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Xml.XPath
  commentId: N:System.Xml.XPath
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Xml.XPath
  nameWithType: System.Xml.XPath
  fullName: System.Xml.XPath
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
  - name: .
  - uid: System.Xml.XPath
    name: XPath
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.xpath
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
  - name: .
  - uid: System.Xml.XPath
    name: XPath
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.xpath
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Songhay.Xml.XmlUtility.CombineNavigableDocuments*
  commentId: Overload:Songhay.Xml.XmlUtility.CombineNavigableDocuments
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_CombineNavigableDocuments_System_Xml_XPath_IXPathNavigable_System_Xml_XPath_IXPathNavigable_
  name: CombineNavigableDocuments
  nameWithType: XmlUtility.CombineNavigableDocuments
  fullName: Songhay.Xml.XmlUtility.CombineNavigableDocuments
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Songhay.Xml.XmlUtility.GetInstance*
  commentId: Overload:Songhay.Xml.XmlUtility.GetInstance
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_GetInstance__1_System_String_
  name: GetInstance
  nameWithType: XmlUtility.GetInstance
  fullName: Songhay.Xml.XmlUtility.GetInstance
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Songhay.Xml.XmlUtility.GetInstanceRaw*
  commentId: Overload:Songhay.Xml.XmlUtility.GetInstanceRaw
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_GetInstanceRaw__1_System_String_
  name: GetInstanceRaw
  nameWithType: XmlUtility.GetInstanceRaw
  fullName: Songhay.Xml.XmlUtility.GetInstanceRaw
- uid: Songhay.Xml.XmlUtility.GetInternalMessage*
  commentId: Overload:Songhay.Xml.XmlUtility.GetInternalMessage
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_GetInternalMessage_System_String_
  name: GetInternalMessage
  nameWithType: XmlUtility.GetInternalMessage
  fullName: Songhay.Xml.XmlUtility.GetInternalMessage
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{System.String}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlycollection-1
  name: ReadOnlyCollection<string>
  nameWithType: ReadOnlyCollection<string>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<string>
  nameWithType.vb: ReadOnlyCollection(Of String)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of String)
  name.vb: ReadOnlyCollection(Of String)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlycollection-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlycollection-1
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlycollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlycollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.ObjectModel
    name: ObjectModel
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.ObjectModel
    name: ObjectModel
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<string>
  nameWithType: IEnumerable<string>
  fullName: System.Collections.Generic.IEnumerable<string>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.xmlwriter
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
- uid: System.Xml.XmlTextWriter
  commentId: T:System.Xml.XmlTextWriter
  isExternal: true
  name: XmlTextWriter
  nameWithType: XmlTextWriter
  fullName: System.Xml.XmlTextWriter
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Songhay.Xml.XmlUtility.GetInternalMessageDocument*
  commentId: Overload:Songhay.Xml.XmlUtility.GetInternalMessageDocument
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_GetInternalMessageDocument_System_String_System_String___
  name: GetInternalMessageDocument
  nameWithType: XmlUtility.GetInternalMessageDocument
  fullName: Songhay.Xml.XmlUtility.GetInternalMessageDocument
- uid: System.Xml.XmlNamespaceManager
  commentId: T:System.Xml.XmlNamespaceManager
  parent: System.Xml
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.xmlnamespacemanager
  name: XmlNamespaceManager
  nameWithType: XmlNamespaceManager
  fullName: System.Xml.XmlNamespaceManager
- uid: Songhay.Xml.XmlUtility.GetNamespaceManager*
  commentId: Overload:Songhay.Xml.XmlUtility.GetNamespaceManager
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_GetNamespaceManager_System_Xml_XPath_IXPathNavigable_
  name: GetNamespaceManager
  nameWithType: XmlUtility.GetNamespaceManager
  fullName: Songhay.Xml.XmlUtility.GetNamespaceManager
- uid: Songhay.Xml.XmlUtility.GetNavigableDocument*
  commentId: Overload:Songhay.Xml.XmlUtility.GetNavigableDocument
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_GetNavigableDocument_System_String_
  name: GetNavigableDocument
  nameWithType: XmlUtility.GetNavigableDocument
  fullName: Songhay.Xml.XmlUtility.GetNavigableDocument
- uid: System.Xml.XmlNode
  commentId: T:System.Xml.XmlNode
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.xmlnode
  name: XmlNode
  nameWithType: XmlNode
  fullName: System.Xml.XmlNode
- uid: System.Xml.XmlDocument
  commentId: T:System.Xml.XmlDocument
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.xmldocument
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.io.stream
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
- uid: System.Xml.XPath.XPathNavigator
  commentId: T:System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.xpath.xpathnavigator
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: System.Xml.XPath.XPathExpression
  commentId: T:System.Xml.XPath.XPathExpression
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.xpath.xpathexpression
  name: XPathExpression
  nameWithType: XPathExpression
  fullName: System.Xml.XPath.XPathExpression
- uid: Songhay.Xml.XmlUtility.GetNavigableNode*
  commentId: Overload:Songhay.Xml.XmlUtility.GetNavigableNode
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_GetNavigableNode_System_Xml_XPath_IXPathNavigable_System_String_
  name: GetNavigableNode
  nameWithType: XmlUtility.GetNavigableNode
  fullName: Songhay.Xml.XmlUtility.GetNavigableNode
- uid: System.Xml.XPath.XPathNodeIterator
  commentId: T:System.Xml.XPath.XPathNodeIterator
  parent: System.Xml.XPath
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.xpath.xpathnodeiterator
  name: XPathNodeIterator
  nameWithType: XPathNodeIterator
  fullName: System.Xml.XPath.XPathNodeIterator
- uid: Songhay.Xml.XmlUtility.GetNavigableNodes*
  commentId: Overload:Songhay.Xml.XmlUtility.GetNavigableNodes
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_GetNavigableNodes_System_Xml_XPath_IXPathNavigable_System_String_
  name: GetNavigableNodes
  nameWithType: XmlUtility.GetNavigableNodes
  fullName: Songhay.Xml.XmlUtility.GetNavigableNodes
- uid: Songhay.Xml.XmlUtility.GetNodeValue*
  commentId: Overload:Songhay.Xml.XmlUtility.GetNodeValue
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_GetNodeValue_System_Xml_XPath_IXPathNavigable_System_String_System_Boolean_
  name: GetNodeValue
  nameWithType: XmlUtility.GetNodeValue
  fullName: Songhay.Xml.XmlUtility.GetNodeValue
- uid: Songhay.Xml.XmlUtility.GetNodeValueAndParse*
  commentId: Overload:Songhay.Xml.XmlUtility.GetNodeValueAndParse
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_GetNodeValueAndParse__1_System_Xml_XPath_IXPathNavigable_System_String_System_Boolean___0_
  name: GetNodeValueAndParse
  nameWithType: XmlUtility.GetNodeValueAndParse
  fullName: Songhay.Xml.XmlUtility.GetNodeValueAndParse
- uid: System.IO.MemoryStream
  commentId: T:System.IO.MemoryStream
  parent: System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.io.memorystream
  name: MemoryStream
  nameWithType: MemoryStream
  fullName: System.IO.MemoryStream
- uid: Songhay.Xml.XmlUtility.GetText*
  commentId: Overload:Songhay.Xml.XmlUtility.GetText
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_GetText_System_IO_MemoryStream_
  name: GetText
  nameWithType: XmlUtility.GetText
  fullName: Songhay.Xml.XmlUtility.GetText
- uid: Songhay.Xml.XmlUtility.GetXslResult*
  commentId: Overload:Songhay.Xml.XmlUtility.GetXslResult
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_GetXslResult_System_Xml_XPath_IXPathNavigable_System_Xml_XPath_IXPathNavigable_
  name: GetXslResult
  nameWithType: XmlUtility.GetXslResult
  fullName: Songhay.Xml.XmlUtility.GetXslResult
- uid: System.Xml.Xsl.XsltArgumentList
  commentId: T:System.Xml.Xsl.XsltArgumentList
  parent: System.Xml.Xsl
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.xsl.xsltargumentlist
  name: XsltArgumentList
  nameWithType: XsltArgumentList
  fullName: System.Xml.Xsl.XsltArgumentList
- uid: System.Xml.Xsl
  commentId: N:System.Xml.Xsl
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Xml.Xsl
  nameWithType: System.Xml.Xsl
  fullName: System.Xml.Xsl
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
  - name: .
  - uid: System.Xml.Xsl
    name: Xsl
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.xsl
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
  - name: .
  - uid: System.Xml.Xsl
    name: Xsl
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.xsl
- uid: Songhay.Xml.XmlUtility.GetXslString*
  commentId: Overload:Songhay.Xml.XmlUtility.GetXslString
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_GetXslString_System_Xml_XPath_IXPathNavigable_System_Xml_XPath_IXPathNavigable_
  name: GetXslString
  nameWithType: XmlUtility.GetXslString
  fullName: Songhay.Xml.XmlUtility.GetXslString
- uid: System.Xml.XmlWriterSettings
  commentId: T:System.Xml.XmlWriterSettings
  parent: System.Xml
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.xmlwritersettings
  name: XmlWriterSettings
  nameWithType: XmlWriterSettings
  fullName: System.Xml.XmlWriterSettings
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Songhay.Xml.XmlUtility.InputAs*
  commentId: Overload:Songhay.Xml.XmlUtility.InputAs
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_InputAs__1___0_
  name: InputAs
  nameWithType: XmlUtility.InputAs
  fullName: Songhay.Xml.XmlUtility.InputAs
- uid: '{TIn}'
  commentId: '!:TIn'
  definition: TIn
  name: TIn
  nameWithType: TIn
  fullName: TIn
- uid: TIn
  commentId: '!:TIn'
  name: TIn
  nameWithType: TIn
  fullName: TIn
- uid: Songhay.Xml.XmlUtility.IsNodeValue*
  commentId: Overload:Songhay.Xml.XmlUtility.IsNodeValue
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_IsNodeValue_System_Xml_XPath_IXPathNavigable_System_String_System_Boolean_System_String_
  name: IsNodeValue
  nameWithType: XmlUtility.IsNodeValue
  fullName: Songhay.Xml.XmlUtility.IsNodeValue
- uid: System.StringComparison
  commentId: T:System.StringComparison
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.stringcomparison
  name: StringComparison
  nameWithType: StringComparison
  fullName: System.StringComparison
- uid: Songhay.Xml.XmlUtility.IsNoNodeValue*
  commentId: Overload:Songhay.Xml.XmlUtility.IsNoNodeValue
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_IsNoNodeValue_System_Xml_XPath_IXPathNavigable_System_String_System_Boolean_
  name: IsNoNodeValue
  nameWithType: XmlUtility.IsNoNodeValue
  fullName: Songhay.Xml.XmlUtility.IsNoNodeValue
- uid: Songhay.Xml.XmlUtility.IsYesNodeValue*
  commentId: Overload:Songhay.Xml.XmlUtility.IsYesNodeValue
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_IsYesNodeValue_System_Xml_XPath_IXPathNavigable_System_String_System_Boolean_
  name: IsYesNodeValue
  nameWithType: XmlUtility.IsYesNodeValue
  fullName: Songhay.Xml.XmlUtility.IsYesNodeValue
- uid: Songhay.Xml.XmlUtility.IsXml*
  commentId: Overload:Songhay.Xml.XmlUtility.IsXml
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_IsXml_System_String_
  name: IsXml
  nameWithType: XmlUtility.IsXml
  fullName: Songhay.Xml.XmlUtility.IsXml
- uid: Songhay.Xml.XmlUtility.LoadXslTransform*
  commentId: Overload:Songhay.Xml.XmlUtility.LoadXslTransform
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_LoadXslTransform_System_String_System_String_
  name: LoadXslTransform
  nameWithType: XmlUtility.LoadXslTransform
  fullName: Songhay.Xml.XmlUtility.LoadXslTransform
- uid: Songhay.Xml.XmlUtility.LoadXslTransformForMemoryInput*
  commentId: Overload:Songhay.Xml.XmlUtility.LoadXslTransformForMemoryInput
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_LoadXslTransformForMemoryInput_System_String_System_String_System_String_
  name: LoadXslTransformForMemoryInput
  nameWithType: XmlUtility.LoadXslTransformForMemoryInput
  fullName: Songhay.Xml.XmlUtility.LoadXslTransformForMemoryInput
- uid: Songhay.Xml.XmlUtility.OutputAs*
  commentId: Overload:Songhay.Xml.XmlUtility.OutputAs
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_OutputAs__1_System_String_
  name: OutputAs
  nameWithType: XmlUtility.OutputAs
  fullName: Songhay.Xml.XmlUtility.OutputAs
- uid: '{TOut}'
  commentId: '!:TOut'
  definition: TOut
  name: TOut
  nameWithType: TOut
  fullName: TOut
- uid: TOut
  name: TOut
  nameWithType: TOut
  fullName: TOut
- uid: Songhay.Xml.XmlUtility.StripNamespaces*
  commentId: Overload:Songhay.Xml.XmlUtility.StripNamespaces
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_StripNamespaces_System_String_
  name: StripNamespaces
  nameWithType: XmlUtility.StripNamespaces
  fullName: Songhay.Xml.XmlUtility.StripNamespaces
- uid: System.Xml.Schema.XmlSchema
  commentId: T:System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.schema.xmlschema
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Xml.Schema.ValidationEventHandler
  commentId: T:System.Xml.Schema.ValidationEventHandler
  parent: System.Xml.Schema
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.schema.validationeventhandler
  name: ValidationEventHandler
  nameWithType: ValidationEventHandler
  fullName: System.Xml.Schema.ValidationEventHandler
- uid: Songhay.Xml.XmlUtility.GetXmlSchema*
  commentId: Overload:Songhay.Xml.XmlUtility.GetXmlSchema
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_GetXmlSchema_System_Xml_XPath_IXPathNavigable_System_Xml_Schema_ValidationEventHandler_
  name: GetXmlSchema
  nameWithType: XmlUtility.GetXmlSchema
  fullName: Songhay.Xml.XmlUtility.GetXmlSchema
- uid: System.Xml.Schema
  commentId: N:System.Xml.Schema
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Xml.Schema
  nameWithType: System.Xml.Schema
  fullName: System.Xml.Schema
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
  - name: .
  - uid: System.Xml.Schema
    name: Schema
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.schema
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
  - name: .
  - uid: System.Xml.Schema
    name: Schema
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.schema
- uid: Songhay.Xml.XmlUtility.LoadXmlSchema*
  commentId: Overload:Songhay.Xml.XmlUtility.LoadXmlSchema
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_LoadXmlSchema_System_String_System_Xml_Schema_ValidationEventHandler_
  name: LoadXmlSchema
  nameWithType: XmlUtility.LoadXmlSchema
  fullName: Songhay.Xml.XmlUtility.LoadXmlSchema
- uid: Songhay.Xml.XmlUtility.ValidateNavigableNode*
  commentId: Overload:Songhay.Xml.XmlUtility.ValidateNavigableNode
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_ValidateNavigableNode_System_Xml_XPath_IXPathNavigable_System_Xml_Schema_XmlSchema_System_Xml_Schema_ValidationEventHandler_
  name: ValidateNavigableNode
  nameWithType: XmlUtility.ValidateNavigableNode
  fullName: Songhay.Xml.XmlUtility.ValidateNavigableNode
- uid: Songhay.Xml.XmlUtility.Write*
  commentId: Overload:Songhay.Xml.XmlUtility.Write
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_Write__1___0_System_String_
  name: Write
  nameWithType: XmlUtility.Write
  fullName: Songhay.Xml.XmlUtility.Write
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.xmlreader
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: Songhay.Xml.XmlUtility.WriteReader*
  commentId: Overload:Songhay.Xml.XmlUtility.WriteReader
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_WriteReader_System_Xml_XmlReader_System_Xml_XmlWriter_
  name: WriteReader
  nameWithType: XmlUtility.WriteReader
  fullName: Songhay.Xml.XmlUtility.WriteReader
- uid: Songhay.Xml.XmlUtility.WriteXslTransform*
  commentId: Overload:Songhay.Xml.XmlUtility.WriteXslTransform
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_WriteXslTransform_System_Xml_XPath_IXPathNavigable_System_Xml_XPath_IXPathNavigable_System_String_
  name: WriteXslTransform
  nameWithType: XmlUtility.WriteXslTransform
  fullName: Songhay.Xml.XmlUtility.WriteXslTransform
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<string, string>
  nameWithType: Dictionary<string, string>
  fullName: System.Collections.Generic.Dictionary<string, string>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of String, String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Songhay.Xml.LatinGlyphsUtility.Expand(System.String,System.Boolean)
  commentId: M:Songhay.Xml.LatinGlyphsUtility.Expand(System.String,System.Boolean)
  isExternal: true
  href: Songhay.Xml.LatinGlyphsUtility.html#Songhay_Xml_LatinGlyphsUtility_Expand_System_String_System_Boolean_
  name: Expand(string, bool)
  nameWithType: LatinGlyphsUtility.Expand(string, bool)
  fullName: Songhay.Xml.LatinGlyphsUtility.Expand(string, bool)
  nameWithType.vb: LatinGlyphsUtility.Expand(String, Boolean)
  fullName.vb: Songhay.Xml.LatinGlyphsUtility.Expand(String, Boolean)
  name.vb: Expand(String, Boolean)
  spec.csharp:
  - uid: Songhay.Xml.LatinGlyphsUtility.Expand(System.String,System.Boolean)
    name: Expand
    href: Songhay.Xml.LatinGlyphsUtility.html#Songhay_Xml_LatinGlyphsUtility_Expand_System_String_System_Boolean_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Songhay.Xml.LatinGlyphsUtility.Expand(System.String,System.Boolean)
    name: Expand
    href: Songhay.Xml.LatinGlyphsUtility.html#Songhay_Xml_LatinGlyphsUtility_Expand_System_String_System_Boolean_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Songhay.Xml.XmlUtility.XmlEncode*
  commentId: Overload:Songhay.Xml.XmlUtility.XmlEncode
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_XmlEncode_System_String_
  name: XmlEncode
  nameWithType: XmlUtility.XmlEncode
  fullName: Songhay.Xml.XmlUtility.XmlEncode
- uid: Songhay.Xml.LatinGlyphsUtility.Condense(System.String,System.Boolean)
  commentId: M:Songhay.Xml.LatinGlyphsUtility.Condense(System.String,System.Boolean)
  isExternal: true
  href: Songhay.Xml.LatinGlyphsUtility.html#Songhay_Xml_LatinGlyphsUtility_Condense_System_String_System_Boolean_
  name: Condense(string, bool)
  nameWithType: LatinGlyphsUtility.Condense(string, bool)
  fullName: Songhay.Xml.LatinGlyphsUtility.Condense(string, bool)
  nameWithType.vb: LatinGlyphsUtility.Condense(String, Boolean)
  fullName.vb: Songhay.Xml.LatinGlyphsUtility.Condense(String, Boolean)
  name.vb: Condense(String, Boolean)
  spec.csharp:
  - uid: Songhay.Xml.LatinGlyphsUtility.Condense(System.String,System.Boolean)
    name: Condense
    href: Songhay.Xml.LatinGlyphsUtility.html#Songhay_Xml_LatinGlyphsUtility_Condense_System_String_System_Boolean_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Songhay.Xml.LatinGlyphsUtility.Condense(System.String,System.Boolean)
    name: Condense
    href: Songhay.Xml.LatinGlyphsUtility.html#Songhay_Xml_LatinGlyphsUtility_Condense_System_String_System_Boolean_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Songhay.Xml.XmlUtility.XmlDecode*
  commentId: Overload:Songhay.Xml.XmlUtility.XmlDecode
  href: Songhay.Xml.XmlUtility.html#Songhay_Xml_XmlUtility_XmlDecode_System_String_
  name: XmlDecode
  nameWithType: XmlUtility.XmlDecode
  fullName: Songhay.Xml.XmlUtility.XmlDecode
