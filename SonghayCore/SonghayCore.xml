<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SonghayCore</name>
    </assembly>
    <members>
        <member name="T:Songhay.Collections.ObservableSortingCollection`1">
            <summary>
            Extends <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>
            with sorting.
            </summary>
            <typeparam name="T">Collection Type</typeparam>
            <remarks>
                There are many ways to handle this issue. The code here is based on
                “Write a Sortable ObservableCollection for WPF” by Brian Lagunas
                [http://elegantcode.com/2009/05/14/write-a-sortable-observablecollection-for-wpf/]
            </remarks>
        </member>
        <member name="M:Songhay.Collections.ObservableSortingCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Collections.ObservableSortingCollection`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Songhay.Collections.ObservableSortingCollection`1.Sort``1(System.Func{`0,``0},System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the specified key selector.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="keySelector">The key selector.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Songhay.Collections.ObservableSortingCollection`1.Sort``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the specified key selector.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="keySelector">The key selector.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="T:Songhay.ComponentModel.BackgroundWorkerUtility">
            <summary>
            Static members
            for <see cref="T:System.ComponentModel.BackgroundWorker"/>.
            </summary>
        </member>
        <member name="M:Songhay.ComponentModel.BackgroundWorkerUtility.DoWork(System.Action{System.Object,System.ComponentModel.DoWorkEventArgs},System.Action{System.Object,System.ComponentModel.RunWorkerCompletedEventArgs})">
            <summary>
            Encapsulates a thread of work that cannot be canceled.
            </summary>
            <param name="workAction">The work action.</param>
            <param name="workCompleteAction">The work complete action.</param>
        </member>
        <member name="M:Songhay.ComponentModel.BackgroundWorkerUtility.DoWork(System.Action{System.Object,System.ComponentModel.DoWorkEventArgs},System.Action{System.Object,System.ComponentModel.RunWorkerCompletedEventArgs},System.Action{System.Object,System.ComponentModel.ProgressChangedEventArgs})">
            <summary>
            Does the work.
            </summary>
            <param name="workAction">The work action.</param>
            <param name="workCompleteAction">The work complete action.</param>
            <param name="workProgressAction">The work progress action.</param>
        </member>
        <member name="T:Songhay.Security.Cryptography.Decryptor">
            <summary>Decryption class.</summary>
            <remarks>
            This class is based
            on Microsoft Patterns and Practices
            "How To: Create an Encryption Library"
            by J.D. Meier, Alex Mackman, Michael Dunner, and Srinath Vasireddy
            at http://msdn.microsoft.com/library/en-us/dnnetsec/html/SecNetHT10.asp.
            </remarks>
        </member>
        <member name="M:Songhay.Security.Cryptography.Decryptor.#ctor(Songhay.Security.Cryptography.EncryptionAlgorithm)">
            <summary>Default constructor.</summary>
            <param name="AlgorithmEnum">
            <see cref="T:Songhay.Security.Cryptography.EncryptionAlgorithm"/>
            enumerated constant.
            </param>
        </member>
        <member name="M:Songhay.Security.Cryptography.Decryptor.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            Decrypts scalar values
            into a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="bytesData">The data to decrypt.</param>
            <param name="bytesKey">The encryption key.</param>
        </member>
        <member name="M:Songhay.Security.Cryptography.Decryptor.Decrypt(System.String,System.String,System.String)">
            <summary>
            Decrypts scalar values
            into a <see cref="T:System.String"/>.
            </summary>
            <param name="EncryptedString">
            Encrypted data.
            </param>
            <param name="EncryptedKey">
            Encrypted key.
            </param>
            <param name="EncryptedIniVector">
            Encrypted initialization vector.
            </param>
            <returns>
            A decrypted <see cref="T:System.Text.UnicodeEncoding"/>
            <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="P:Songhay.Security.Cryptography.Decryptor.IV">
            <summary>Initial Vector</summary>
        </member>
        <member name="T:Songhay.Security.Cryptography.DecryptTransformer">
            <summary>
            Generates a decryption service provider
            for cryptographic transformations defined by the
            <see cref="T:System.Security.Cryptography.ICryptoTransform"/>
            interface.
            </summary>
        </member>
        <member name="M:Songhay.Security.Cryptography.DecryptTransformer.#ctor(Songhay.Security.Cryptography.EncryptionAlgorithm)">
            <summary>Default constructor.</summary>
            <param name="AlgorithmEnum">
            <see cref="T:Songhay.Security.Cryptography.EncryptionAlgorithm"/>
            enumerated constant.
            </param>
        </member>
        <member name="M:Songhay.Security.Cryptography.DecryptTransformer.GetCryptoServiceProvider(System.Byte[])">
            <summary>
            Generates a decryption service provider
            from one of the known providers enumerated
            in <see cref="T:Songhay.Security.Cryptography.EncryptionAlgorithm"/>.
            </summary>
            <param name="bytesKey">Encryption key.</param>
        </member>
        <member name="P:Songhay.Security.Cryptography.DecryptTransformer.IV">
            <summary>
            Initialization Vector
            </summary>
        </member>
        <member name="T:Songhay.Security.Cryptography.Encryptor">
            <summary>Encryption class.</summary>
            <remarks>
            This class is based
            on Microsoft Patterns and Practices
            "How To: Create an Encryption Library"
            by J.D. Meier, Alex Mackman, Michael Dunner, and Srinath Vasireddy
            at http://msdn.microsoft.com/library/en-us/dnnetsec/html/SecNetHT10.asp.
            </remarks>
        </member>
        <member name="M:Songhay.Security.Cryptography.Encryptor.#ctor(Songhay.Security.Cryptography.EncryptionAlgorithm)">
            <summary>Default constructor.</summary>
            <param name="AlgorithmEnum">
            <see cref="T:Songhay.Security.Cryptography.EncryptionAlgorithm"/>
            enumerated constant.
            </param>
        </member>
        <member name="M:Songhay.Security.Cryptography.Encryptor.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            Encrypts <see cref="T:System.Byte"/> data.
            </summary>
            <param name="bytesData">
            The data to encrypt.
            </param>
            <param name="bytesKey">
            The encryption key.
            </param>
        </member>
        <member name="M:Songhay.Security.Cryptography.Encryptor.Encrypt(System.String,System.String)">
            <summary>
            Encrypts <see cref="T:System.String"/> data.
            </summary>
            <param name="StringLiteral">
            The data to encrypt.
            </param>
            <param name="Key">
            The encryption key.
            </param>
            <returns>
            A string representation
            of the encrypted data.
            </returns>
        </member>
        <member name="M:Songhay.Security.Cryptography.Encryptor.Encrypt(System.String)">
            <summary>
            Encrypts <see cref="T:System.String"/> data.
            </summary>
            <param name="StringLiteral">
            The data to encrypt.
            </param>
            <returns>
            A string representation
            of the encrypted data.
            </returns>
            <remarks>
            Calling this method generates random
            <see cref="P:Songhay.Security.Cryptography.EncryptTransformer.IV"/>
            and <see cref="P:Songhay.Security.Cryptography.EncryptTransformer.Key"/> values.
            </remarks>
        </member>
        <member name="P:Songhay.Security.Cryptography.Encryptor.IV">
            <summary>Initial Vector</summary>
        </member>
        <member name="P:Songhay.Security.Cryptography.Encryptor.IvString">
            <summary>Initial Vector</summary>
        </member>
        <member name="P:Songhay.Security.Cryptography.Encryptor.Key">
            <summary>Encryption Key</summary>
        </member>
        <member name="P:Songhay.Security.Cryptography.Encryptor.KeyString">
            <summary>Encryption Key</summary>
        </member>
        <member name="T:Songhay.Security.Cryptography.EncryptionAlgorithm">
            <summary>
            Enumerates the encryption/decryption algorithms
            available in this class.
            </summary>
        </member>
        <member name="F:Songhay.Security.Cryptography.EncryptionAlgorithm.Des">
            <summary>
            Specifies the Data Encryption Standard (DES) algorithm.
            </summary>
        </member>
        <member name="F:Songhay.Security.Cryptography.EncryptionAlgorithm.Rc2">
            <summary>
            Specifies the RC2 algorithm.
            </summary>
        </member>
        <member name="F:Songhay.Security.Cryptography.EncryptionAlgorithm.Rijndael">
            <summary>
            Specifies the Rijndael symmetric encryption algorithm.
            </summary>
        </member>
        <member name="F:Songhay.Security.Cryptography.EncryptionAlgorithm.TripleDes">
            <summary>
            Specifies the "triple" Data Encryption Standard (DES) algorithm.
            </summary>
        </member>
        <member name="T:Songhay.Security.Cryptography.EncryptTransformer">
            <summary>
            Generates an encryption service provider
            for cryptographic transformations defined by the
            <see cref="T:System.Security.Cryptography.ICryptoTransform"/>
            interface.
            </summary>
        </member>
        <member name="M:Songhay.Security.Cryptography.EncryptTransformer.#ctor(Songhay.Security.Cryptography.EncryptionAlgorithm)">
            <summary>Default constructor.</summary>
            <param name="AlgorithmEnum">
            <see cref="T:Songhay.Security.Cryptography.EncryptionAlgorithm"/>
            enumerated constant.
            </param>
        </member>
        <member name="M:Songhay.Security.Cryptography.EncryptTransformer.GetCryptoServiceProvider(System.Byte[])">
            <summary>
            Generates an encryption service provider
            from one of the known providers enumerated
            in <see cref="T:Songhay.Security.Cryptography.EncryptionAlgorithm"/>.
            </summary>
            <param name="bytesKey">Encryption key.</param>
        </member>
        <member name="P:Songhay.Security.Cryptography.EncryptTransformer.IV">
            <summary>
            Initialization Vector
            </summary>
        </member>
        <member name="P:Songhay.Security.Cryptography.EncryptTransformer.Key">
            <summary>
            Encryption Key
            </summary>
        </member>
        <member name="T:Songhay.Security.SaltedHash">
            <summary>
            A Salted Hash implementation
            </summary>
            <remarks>
            For more information, see “Creating salted hash passwords in C#”
            by Martijn Dijksterhuis [http://www.dijksterhuis.org/creating-salted-hash-values-in-c/]
            </remarks>
        </member>
        <member name="M:Songhay.Security.SaltedHash.#ctor(System.Security.Cryptography.HashAlgorithm,System.Int32)">
            <summary>
            The constructor takes a HashAlgorithm as a parameter.
            </summary>
            <param name="hashAlgorithm">A <see cref="T:System.Security.Cryptography.HashAlgorithm" /> HashAlgorihm which is derived from HashAlgorithm. C# provides
            the following classes: SHA1Managed,SHA256Managed, SHA384Managed, SHA512Managed and MD5CryptoServiceProvider</param>
            <param name="theSaltLength">Length of the salt.</param>
        </member>
        <member name="M:Songhay.Security.SaltedHash.#ctor">
            <summary>
            Default constructor which initializes the SaltedHash with the SHA256Managed algorithm
            and a Salt of 4 bytes ( or 4*8 = 32 bits)
            </summary>
        </member>
        <member name="M:Songhay.Security.SaltedHash.GetHashAndSalt(System.Byte[],System.Byte[]@,System.Byte[]@)">
            <summary>
            Given a data block this routine returns both a Hash and a Salt
            </summary>
            <param name="data">
            A <see cref="T:System.Byte"/>byte array containing the data from which to derive the salt
            </param>
            <param name="hash">
            A <see cref="T:System.Byte"/>byte array which will contain the hash calculated
            </param>
            <param name="salt">
            A <see cref="T:System.Byte"/>byte array which will contain the salt generated
            </param>
        </member>
        <member name="M:Songhay.Security.SaltedHash.GetHashAndSalt(System.String,System.String@,System.String@)">
            <summary>
            The routine provides a wrapper around the GetHashAndSalt function providing conversion
            from the required byte arrays to strings. Both the Hash and Salt are returned as Base-64 encoded strings.
            </summary>
            <param name="data">
            A <see cref="T:System.String"/> string containing the data to hash
            </param>
            <param name="hash">
            A <see cref="T:System.String"/> base64 encoded string containing the generated hash
            </param>
            <param name="salt">
            A <see cref="T:System.String"/> base64 encoded string containing the generated salt
            </param>
        </member>
        <member name="M:Songhay.Security.SaltedHash.VerifyHash(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            This routine verifies whether the data generates the same hash as we had stored previously
            </summary>
            <param name="data">The data to verify </param>
            <param name="hash">The hash we had stored previously</param>
            <param name="salt">The salt we had stored previously</param>
            <returns>True on a successful match</returns>
        </member>
        <member name="M:Songhay.Security.SaltedHash.VerifyHash(System.String,System.String,System.String)">
            <summary>
            This routine provides a wrapper around VerifyHash converting the strings containing the
            data, hash and salt into byte arrays before calling VerifyHash.
            </summary>
            <param name="data">A UTF-8 encoded string containing the data to verify</param>
            <param name="hash">A base-64 encoded string containing the previously stored hash</param>
            <param name="salt">A base-64 encoded string containing the previously stored salt</param>
        </member>
        <member name="T:Songhay.Security.SymmetricCrypt">
            <summary>
            Implements symmetric encryption/decryption
            for <see cref="T:System.Security.Cryptography.AesCryptoServiceProvider"/>.
            </summary>
            <remarks>
            For more information, see “AesCryptoServiceProvider Class”
            [http://msdn.microsoft.com/en-us/library/system.security.cryptography.aescryptoserviceprovider.aspx]
            </remarks>
        </member>
        <member name="M:Songhay.Security.SymmetricCrypt.GetKey">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="M:Songhay.Security.SymmetricCrypt.GetInitialVector">
            <summary>
            Gets the initial vector.
            </summary>
        </member>
        <member name="M:Songhay.Security.SymmetricCrypt.Decrypt(System.String,System.Byte[],System.Byte[])">
            <summary>
            Decrypts the specified text.
            </summary>
            <param name="input">The text.</param>
            <param name="key">The key.</param>
            <param name="vector">The vector.</param>
        </member>
        <member name="M:Songhay.Security.SymmetricCrypt.Decrypt(System.String,System.String,System.String)">
            <summary>
            Decrypts the specified text.
            </summary>
            <param name="input">The input.</param>
            <param name="key">The key.</param>
            <param name="vector">The vector.</param>
        </member>
        <member name="M:Songhay.Security.SymmetricCrypt.Encrypt(System.String,System.Byte[],System.Byte[])">
            <summary>
            Encrypts the specified text.
            </summary>
            <param name="input">The text.</param>
            <param name="key">The key.</param>
            <param name="vector">The vector.</param>
        </member>
        <member name="M:Songhay.Security.SymmetricCrypt.Encrypt(System.String,System.String,System.String)">
            <summary>
            Encrypts the specified input.
            </summary>
            <param name="input">The input.</param>
            <param name="key">The key.</param>
            <param name="vector">The vector.</param>
        </member>
        <member name="T:Songhay.Diagnostics.TraceSources">
            <summary>
            Singleton wrapper for <see cref="T:System.Diagnostics.TraceSource"/>
            </summary>
            <remarks>
            Based on Fonlow.Diagnostics by Zijian Huang [https://github.com/zijianhuang/Fonlow.Diagnostics]
            Also see “Use TraceSource Efficiently” [http://www.codeproject.com/Tips/1071853/Use-TraceSource-Efficiently]
            </remarks>
        </member>
        <member name="F:Songhay.Diagnostics.TraceSources.DefaultTraceSourceName">
            <summary>
            The conventional <see cref="T:System.Diagnostics.TraceSource"/> name.
            </summary>
        </member>
        <member name="P:Songhay.Diagnostics.TraceSources.ConfiguredTraceSourceName">
            <summary>
            The configured trace source name
            </summary>
        </member>
        <member name="P:Songhay.Diagnostics.TraceSources.IsConfiguredTraceSourceNameLoaded">
            <summary>
            The is configured trace source name loaded?
            </summary>
        </member>
        <member name="M:Songhay.Diagnostics.TraceSources.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Songhay.Diagnostics.TraceSources"/> class from being created.
            </summary>
        </member>
        <member name="M:Songhay.Diagnostics.TraceSources.GetTraceSourceFromConfiguredName">
            <summary>
            Gets the name of the trace source from configuration.
            </summary>
            <returns></returns>
            <remarks>
            When the trace source name is not configured
            then <see cref="F:Songhay.Diagnostics.TraceSources.DefaultTraceSourceName"/> is used.
            </remarks>
        </member>
        <member name="M:Songhay.Diagnostics.TraceSources.GetTraceSource(System.String)">
            <summary>
            Gets the trace source.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="P:Songhay.Diagnostics.TraceSources.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceSource"/> with the specified name.
            </summary>
            <value>
            The <see cref="T:System.Diagnostics.TraceSource"/>.
            </value>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="P:Songhay.Diagnostics.TraceSources.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="T:Songhay.CsvParseException">
            <summary>
            Exception for CSV parsing
            in <see cref="M:Songhay.Extensions.StringExtensions.CsvSplit(System.String)"/>.
            </summary>
        </member>
        <member name="M:Songhay.CsvParseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.CsvParseException"/> class.
            </summary>
        </member>
        <member name="M:Songhay.CsvParseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.CsvParseException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Songhay.CsvParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.CsvParseException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Songhay.CsvParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.CsvParseException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Songhay.ExpressionSeed">
            <summary>
            Seeds of <see cref="T:System.Linq.Expressions.Expression"/>
            </summary>
        </member>
        <member name="M:Songhay.ExpressionSeed.True``1">
            <summary>
            <see cref="T:System.Linq.Expressions.Expression"/> <c>true</c>.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Songhay.ExpressionSeed.False``1">
            <summary>
            <see cref="T:System.Linq.Expressions.Expression"/> <c>false</c>.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Songhay.Extensions.ArrayExtensions">
            <summary>
            Extensions of <see cref="T:System.Array"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.ArrayExtensions.Next``1(System.Array,``0)">
            <summary>
            Gets the next item in the specified array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Songhay.Extensions.ArrayExtensions.Previous``1(System.Array,``0)">
            <summary>
            Gets the previous item in the specified array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            <param name="item">The item.</param>
        </member>
        <member name="T:Songhay.Extensions.AssemblyExtensions">
            <summary>Extensions of <see cref="T:System.Reflection.Assembly"/>.</summary>
        </member>
        <member name="M:Songhay.Extensions.AssemblyExtensions.GetPathFromAssembly(System.Reflection.Assembly)">
            <summary>Gets the path from assembly.</summary>
            <param name="assembly">The assembly.</param>
            <exception cref="T:System.ArgumentNullException">assembly - The expected assembly is not here.</exception>
        </member>
        <member name="M:Songhay.Extensions.AssemblyExtensions.GetPathFromAssembly(System.Reflection.Assembly,System.String)">
            <summary>Gets the path from assembly.</summary>
            <param name="assembly">The assembly.</param>
            <param name="fileSegment">The file segment.</param>
            <exception cref="T:System.ArgumentNullException">assembly - The expected assembly is not here.</exception>
        </member>
        <member name="T:Songhay.Extensions.CharExtensions">
            <summary>
            Extension of <see cref="T:System.Char"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.CharExtensions.FromCharsToString(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Converts an enumeration of <see cref="T:System.Char"/>
            to <see cref="T:System.String"/>
            </summary>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="T:Songhay.Extensions.ConfigurationManagerExtensions">
            <summary>
            Extensions of <see cref="T:System.Configuration.ConfigurationManager"/>
            </summary>
            <remarks>
            Several members in this class depend on <see cref="T:Songhay.Models.DeploymentEnvironment"/> constants.
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetConnectionNameFromEnvironment(System.Configuration.ConnectionStringSettingsCollection,System.String,System.String)">
            <summary>
            Gets the connection name from environment.
            </summary>
            <param name="collection">The collection.</param>
            <param name="unqualifiedKey">The unqualified key.</param>
            <param name="environmentName">Name of the environment.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetConnectionNameFromEnvironment(System.Configuration.ConnectionStringSettingsCollection,System.String,System.String,System.String)">
            <summary>
            Gets the connection name from environment.
            </summary>
            <param name="collection">The collection.</param>
            <param name="unqualifiedKey">The unqualified key.</param>
            <param name="environmentName">Name of the environment.</param>
            <param name="delimiter">The delimiter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">unqualifiedKey - The expected App Settings key is not here.</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"></exception>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetConnectionNameFromEnvironment(System.Configuration.ConnectionStringSettingsCollection,System.String,System.String,System.Boolean)">
            <summary>
            Gets the connection name from environment.
            </summary>
            <param name="collection">The collection.</param>
            <param name="unqualifiedKey">The unqualified key.</param>
            <param name="environmentName">Name of the environment.</param>
            <param name="throwConfigurationErrorsException">if set to <c>true</c> throw configuration errors exception.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetConnectionNameFromEnvironment(System.Configuration.ConnectionStringSettingsCollection,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets the connection name from environment.
            </summary>
            <param name="collection">The collection.</param>
            <param name="unqualifiedKey">The unqualified key.</param>
            <param name="environmentName">Name of the environment.</param>
            <param name="delimiter">The delimiter.</param>
            <param name="throwConfigurationErrorsException">if set to <c>true</c> throw configuration errors exception.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">unqualifiedKey</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"></exception>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetConnectionStringSettings(System.Configuration.ConnectionStringSettingsCollection,System.String)">
            <summary>
            Gets the connection string settings.
            </summary>
            <param name="collection">The collection.</param>
            <param name="connectionName">Name of the connection.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetConnectionStringSettings(System.Configuration.ConnectionStringSettingsCollection,System.String,System.Boolean)">
            <summary>
            Gets the connection string settings.
            </summary>
            <param name="collection">The collection.</param>
            <param name="connectionName">Name of the connection.</param>
            <param name="throwConfigurationErrorsException">if set to <c>true</c> throw configuration errors exception.</param>
            <returns></returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"></exception>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetEnvironmentName(System.Configuration.KeyValueConfigurationCollection)">
            <summary>
            Gets the name of the conventional deployment environment.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetEnvironmentName(System.Configuration.KeyValueConfigurationCollection,System.String)">
            <summary>
            Gets the name of the conventional deployment environment.
            </summary>
            <param name="settings">The settings.</param>
            <param name="environmentKey">The environment key.</param>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetEnvironmentName(System.Configuration.KeyValueConfigurationCollection,System.String,System.String)">
            <summary>
            Gets the name of the conventional deployment environment.
            </summary>
            <param name="settings">The settings.</param>
            <param name="environmentKey">The environment key.</param>
            <param name="defaultEnvironmentName">Default name of the environment.</param>
            <returns></returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"></exception>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetEnvironmentName(System.Configuration.KeyValueConfigurationCollection,System.String,System.String,System.Boolean)">
            <summary>
            Gets the name of the conventional deployment environment.
            </summary>
            <param name="settings">The settings.</param>
            <param name="environmentKey">The environment key.</param>
            <param name="defaultEnvironmentName">Default name of the environment.</param>
            <param name="throwConfigurationErrorsException">if set to <c>true</c> throw configuration errors exception.</param>
            <returns></returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"></exception>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetKeyWithEnvironmentName(System.Configuration.KeyValueConfigurationCollection,System.String,System.String)">
            <summary>
            Gets the name of the key with environment.
            </summary>
            <param name="settings">The settings.</param>
            <param name="unqualifiedKey">The unqualified key.</param>
            <param name="environmentName">Name of the environment.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetKeyWithEnvironmentName(System.Configuration.KeyValueConfigurationCollection,System.String,System.String,System.String)">
            <summary>
            Gets the key with environment name.
            </summary>
            <param name="settings">The settings.</param>
            <param name="unqualifiedKey">The unqualified key.</param>
            <param name="environmentName">Name of the environment.</param>
            <param name="delimiter">The delimiter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">unqualifiedKey - The expected App Settings key is not here.</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"></exception>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetKeyWithEnvironmentName(System.Configuration.KeyValueConfigurationCollection,System.String,System.String,System.Boolean)">
            <summary>
            Gets the name of the key with environment.
            </summary>
            <param name="settings">The settings.</param>
            <param name="unqualifiedKey">The unqualified key.</param>
            <param name="environmentName">Name of the environment.</param>
            <param name="throwConfigurationErrorsException">if set to <c>true</c> [throw configuration errors exception].</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetKeyWithEnvironmentName(System.Configuration.KeyValueConfigurationCollection,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets the key with environment name.
            </summary>
            <param name="settings">The settings.</param>
            <param name="unqualifiedKey">The unqualified key.</param>
            <param name="environmentName">Name of the environment.</param>
            <param name="delimiter">The delimiter.</param>
            <param name="throwConfigurationErrorsException">if set to <c>true</c> throw configuration errors exception.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">unqualifiedKey</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"></exception>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetSetting(System.Configuration.KeyValueConfigurationCollection,System.String)">
            <summary>
            Gets the setting from the current <see cref="T:System.Configuration.KeyValueConfigurationCollection"/>.
            </summary>
            <param name="settings">The settings.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetSetting(System.Configuration.KeyValueConfigurationCollection,System.String,System.Boolean)">
            <summary>
            Gets the setting from the current <see cref="T:System.Configuration.KeyValueConfigurationCollection"/>.
            </summary>
            <param name="settings">The settings.</param>
            <param name="key">The key.</param>
            <param name="throwConfigurationErrorsException">if set to <c>true</c> throw configuration errors exception.</param>
            <returns></returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"></exception>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.GetSetting(System.Configuration.KeyValueConfigurationCollection,System.String,System.Boolean,System.Func{System.String,System.String})">
            <summary>
            Gets the setting from the current <see cref="T:System.Configuration.KeyValueConfigurationCollection"/>.
            </summary>
            <param name="settings">The settings.</param>
            <param name="key">The key.</param>
            <param name="throwConfigurationErrorsException">if set to <c>true</c> throw configuration errors exception.</param>
            <param name="settingModifier">The setting modifier.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.ToAppSettings(System.Xml.Linq.XDocument)">
            <summary>
            Converts the external configuration file to the application settings <see cref="T:System.Configuration.KeyValueConfigurationCollection"/>.
            </summary>
            <param name="externalConfigurationDoc">The external configuration document.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.ToConnectionStringSettingsCollection(System.Xml.Linq.XDocument)">
            <summary>
            Converts the external configuration file to the application settings <see cref="T:System.Configuration.ConnectionStringSettingsCollection"/>.
            </summary>
            <param name="externalConfigurationDoc">The external configuration document.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.WithAppSettings(System.Configuration.KeyValueConfigurationCollection,System.Xml.Linq.XDocument)">
            <summary>
            Returns <see cref="T:System.Configuration.KeyValueConfigurationCollection" />
            with the application settings
            of the specified external configuration <see cref="T:System.Xml.Linq.XDocument" />.
            </summary>
            <param name="settings">The settings.</param>
            <param name="externalConfigurationDoc">The external configuration document.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.ConfigurationManagerExtensions.WithConnectionStringSettingsCollection(System.Configuration.ConnectionStringSettingsCollection,System.Xml.Linq.XDocument)">
            <summary>
            Returns <see cref="T:System.Configuration.ConnectionStringSettingsCollection" />
            with the application settings
            of the specified external configuration <see cref="T:System.Xml.Linq.XDocument" />.
            </summary>
            <param name="collection">The collection.</param>
            <param name="externalConfigurationDoc">The external configuration document.</param>
            <returns></returns>
        </member>
        <member name="T:Songhay.Extensions.DataSetExtensions">
            <summary>
            Extensions of <see cref="T:System.Data.DataSet"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DataSetExtensions.ToFirstTableDataRows(System.Data.DataSet)">
            <summary>
            Converts the <see cref="T:System.Data.DataSet"/> into a first table data rows.
            </summary>
            <param name="dataSet">The data set.</param>
        </member>
        <member name="M:Songhay.Extensions.DataSetExtensions.ToFirstTableFirstColumn(System.Data.DataSet)">
            <summary>
            Converts the <see cref="T:System.Data.DataSet"/> into a first table first column.
            </summary>
            <param name="dataSet">The data set.</param>
        </member>
        <member name="M:Songhay.Extensions.DataSetExtensions.ToFirstTableFirstColumn``1(System.Data.DataSet)">
            <summary>
            Converts the <see cref="T:System.Data.DataSet"/> into a first table first column.
            </summary>
            <typeparam name="TColumn">The type of the column.</typeparam>
            <param name="dataSet">The data set.</param>
        </member>
        <member name="M:Songhay.Extensions.DataSetExtensions.ToFirstTableRows(System.Data.DataSet)">
            <summary>
            Converts the <see cref="T:System.Data.DataSet"/> into a first table rows.
            </summary>
            <param name="dataSet">The data set.</param>
        </member>
        <member name="M:Songhay.Extensions.DataSetExtensions.ToFirstTableRows``2(System.Data.DataSet)">
            <summary>
            Converts the <see cref="T:System.Data.DataSet"/> into a first table rows.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dataSet">The data set.</param>
        </member>
        <member name="T:Songhay.Extensions.DateTimeExtensions">
            <summary>
            Extensions of <see cref="T:System.DateTime"/>.
            </summary>
            <summary>
            Extensions of <see cref="T:System.DateTime"/>.
            </summary>
            <remarks>
            From Jon Skeet’s Miscellaneous Utility Library
            Copyright (c) 2004-2008 Jon Skeet and Marc Gravell.
            All rights reserved.
            [http://www.pobox.com/~skeet/csharp/miscutil]
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.GetNextWeekday(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the next weekday.
            </summary>
            <param name="start">The start.</param>
            <param name="day">The day.</param>
            <remarks>
            by Jon Skeet
            
            For more detail, see:
            http://stackoverflow.com/questions/6346119/asp-net-get-the-next-tuesday
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.ToPrettyDate(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> into a “pretty” date.
            </summary>
            <param name="date">The date.</param>
            <remarks>
            This member was taken from NBlog developer, Chris Fulstow.
            [https://github.com/ChrisFulstow/NBlog/blob/master/NBlog.Web/Application/Infrastructure/DateExtensions.cs]
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.January(System.Int32,System.Int32)">
            <summary>
            Returns a DateTime representing the specified day in January
            in the specified year.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.February(System.Int32,System.Int32)">
            <summary>
            Returns a DateTime representing the specified day in February
            in the specified year.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.March(System.Int32,System.Int32)">
            <summary>
            Returns a DateTime representing the specified day in March
            in the specified year.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.April(System.Int32,System.Int32)">
            <summary>
            Returns a DateTime representing the specified day in April
            in the specified year.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.May(System.Int32,System.Int32)">
            <summary>
            Returns a DateTime representing the specified day in May
            in the specified year.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.June(System.Int32,System.Int32)">
            <summary>
            Returns a DateTime representing the specified day in June
            in the specified year.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.July(System.Int32,System.Int32)">
            <summary>
            Returns a DateTime representing the specified day in July
            in the specified year.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.August(System.Int32,System.Int32)">
            <summary>
            Returns a DateTime representing the specified day in August
            in the specified year.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.September(System.Int32,System.Int32)">
            <summary>
            Returns a DateTime representing the specified day in September
            in the specified year.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.October(System.Int32,System.Int32)">
            <summary>
            Returns a DateTime representing the specified day in October
            in the specified year.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.November(System.Int32,System.Int32)">
            <summary>
            Returns a DateTime representing the specified day in November
            in the specified year.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DateTimeExtensions.December(System.Int32,System.Int32)">
            <summary>
            Returns a DateTime representing the specified day in December
            in the specified year.
            </summary>
        </member>
        <member name="T:Songhay.Extensions.DirectoryInfoExtensions">
            <summary>Extensions of <see cref="T:System.IO.DirectoryInfo"/>.</summary>
        </member>
        <member name="M:Songhay.Extensions.DirectoryInfoExtensions.FindDirectory(System.IO.DirectoryInfo,System.String)">
            <summary>
            Finds the specified sub <see cref="T:System.IO.DirectoryInfo"/>
            under the specified <see cref="T:System.IO.DirectoryInfo"/>.
            </summary>
            <param name="directoryInfo">the specified <see cref="T:System.IO.DirectoryInfo"/></param>
            <param name="expectedDirectoryName">the specified sub <see cref="P:System.IO.DirectoryInfo.Name"/></param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.DirectoryInfoExtensions.FindFile(System.IO.DirectoryInfo,System.String)">
            <summary>
            Finds the specified <see cref="T:System.IO.FileInfo"/>
            under the specified <see cref="T:System.IO.DirectoryInfo"/>.
            </summary>
            <param name="directoryInfo">the specified <see cref="T:System.IO.DirectoryInfo"/></param>
            <param name="expectedFileName">the specified <see cref="P:System.IO.FileInfo.Name"/></param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.DirectoryInfoExtensions.GetParentDirectory(System.IO.DirectoryInfo,System.Int32)">
            <summary>Gets the parent directory.</summary>
            <param name="directoryInfo">The directory information.</param>
            <param name="levels">The levels.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.DirectoryInfoExtensions.GetParentDirectoryInfo(System.IO.DirectoryInfo,System.Int32)">
            <summary>Gets the parent <see cref="T:System.IO.DirectoryInfo"/>.</summary>
            <param name="directoryInfo">The directory information.</param>
            <param name="levels">The levels.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.DirectoryInfoExtensions.ToCombinedPath(System.IO.DirectoryInfo,System.String)">
            <summary>Combines path and root based
            on the current value of <see cref="F:System.IO.Path.DirectorySeparatorChar"/>
            of the current OS or passes through a drive-letter rooted path.</summary>
            <param name="directoryInfo">The directory information.</param>
            <param name="path">The path.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">The expected root path is not here.
            or
            The expected path is not here.</exception>
            <remarks>For detail, see https://github.com/BryanWilhite/SonghayCore/issues/14 and <see cref="M:Songhay.ProgramFileUtility.GetCombinedPath(System.String,System.String)" />.</remarks>
        </member>
        <member name="M:Songhay.Extensions.DirectoryInfoExtensions.VerifyDirectory(System.IO.DirectoryInfo,System.String)">
            <summary>
            Verifies the specified <see cref="T:System.IO.DirectoryInfo"/>
            with conventional error handling.
            </summary>
            <param name="directoryInfo">the specified <see cref="T:System.IO.DirectoryInfo"/></param>
            <param name="expectedDirectoryName">the expected directory name</param>
            <returns></returns>
        </member>
        <member name="T:Songhay.Extensions.DisplayItemModelExtensions">
            <summary>
            Extensions of <see cref="T:Songhay.Models.DisplayItemModel"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.DisplayItemModelExtensions.HasTag(Songhay.Models.DisplayItemModel,System.Func{System.Object,System.Boolean})">
            <summary>
            Returns <c>true</c> when the item has the <see cref="P:Songhay.Models.DisplayItemModel.Tag"/>
            based on the specified evaluator.
            </summary>
            <param name="data"></param>
            <param name="evaluator"></param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.DisplayItemModelExtensions.ToMenuDisplayItemModel(Songhay.Models.DisplayItemModel)">
            <summary>
            Converts the <see cref="T:Songhay.Models.DisplayItemModel"/> into a menu display item model.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Songhay.Extensions.DisplayItemModelExtensions.WithTag(Songhay.Models.DisplayItemModel,System.Object)">
            <summary>
            Fluently sets <see cref="P:Songhay.Models.DisplayItemModel.Tag"/>.
            </summary>
            <param name="data">The data.</param>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="T:Songhay.Extensions.EncryptionMetadataExtensions">
            <summary>
            Extensions of <see cref="T:Songhay.Models.EncryptionMetadata"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.EncryptionMetadataExtensions.Decrypt(Songhay.Models.EncryptionMetadata,System.String)">
            <summary>
            Decrypts the specified encrypted string.
            </summary>
            <param name="encryptionMeta">The encryption meta.</param>
            <param name="encryptedString">The encrypted string.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            encryptionMeta
            or
            encryptedString
            </exception>
        </member>
        <member name="M:Songhay.Extensions.EncryptionMetadataExtensions.GetConnectionStringWithDecryptedValue(Songhay.Models.EncryptionMetadata,System.String,System.String)">
            <summary>
            Gets the connection string with decrypted value.
            </summary>
            <param name="encryptionMeta">The encryption meta.</param>
            <param name="connectionString">The connection string.</param>
            <param name="connectionStringKey">The connection string key.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            encryptionMeta
            or
            connectionString
            </exception>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="T:Songhay.Extensions.EnumExtensions">
            <summary>
            Extensions of <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.EnumExtensions.GetEnumDescription(System.Enum)">
            <summary>
            Gets the enum description.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Songhay.Extensions.EnumExtensions.GetEnumValues(System.Enum)">
            <summary>
            Gets the enum values.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Songhay.Extensions.EnvironmentExtensions">
            <summary>
            Extensions of <see cref="T:System.Environment"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.EnvironmentExtensions.GetConventionalValue(System.String)">
            <summary>
            Gets the conventional value.
            </summary>
            <param name="conventionalName">Name of the conventional.</param>
            <returns>Returns the value of named data.</returns>
        </member>
        <member name="T:Songhay.Extensions.ExpressionExtensions">
            <summary>
            Extensions of <see cref="T:System.Linq.Expressions.Expression"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.ExpressionExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ors the specified this expression.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisExpression">The this expression.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.ExpressionExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ands the specified this expression.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisExpression">The this expression.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="T:Songhay.Extensions.FileInfoExtensions">
            <summary>
            Extension of <see cref="T:System.IO.FileInfo"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.FileInfoExtensions.ReadZipArchiveEntries(System.IO.FileInfo,System.Action{System.String})">
            <summary>
            Read zip archive entries.
            </summary>
            <param name="archiveInfo">The <see cref="T:System.IO.FileInfo"/>.</param>
            <param name="fileAction">The file action.</param>
            <remarks>
            Use <c>entriesProjector</c> for any filtering or sorting.
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.FileInfoExtensions.ReadZipArchiveEntries(System.IO.FileInfo,System.Action{System.String},System.Func{System.Collections.ObjectModel.ReadOnlyCollection{System.IO.Compression.ZipArchiveEntry},System.Collections.Generic.IEnumerable{System.IO.Compression.ZipArchiveEntry}})">
            <summary>
            Read zip archive entries.
            </summary>
            <param name="archiveInfo">The <see cref="T:System.IO.FileInfo"/>.</param>
            <param name="fileAction">The file action.</param>
            <param name="entriesProjector">The entries projector.</param>
            <remarks>
            Use <c>entriesProjector</c> for any filtering or sorting.
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.FileInfoExtensions.ReadZipArchiveEntriesByLine(System.IO.FileInfo,System.Action{System.Int32,System.String})">
            <summary>
            Read zip archive entries as strings, line by line.
            </summary>
            <param name="archiveInfo">The file and/or directory info.</param>
            <param name="lineAction">The line action.</param>
            <remarks>
            This member is designed for compressed text documents that are too large to load into memory.
            The <c>fileAction</c> includes the line number and the current line.
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.FileInfoExtensions.ReadZipArchiveEntriesByLine(System.IO.FileInfo,System.Action{System.Int32,System.String},System.Func{System.Collections.ObjectModel.ReadOnlyCollection{System.IO.Compression.ZipArchiveEntry},System.Collections.Generic.IEnumerable{System.IO.Compression.ZipArchiveEntry}})">
            <summary>
            Read zip archive entries as strings, line by line.
            </summary>
            <param name="archiveInfo">The file and/or directory info.</param>
            <param name="lineAction">The line action.</param>
            <param name="entriesProjector">The filter zip archive entries.</param>
            <remarks>
            This member is designed for compressed text documents that are too large to load into memory.
            The <c>fileAction</c> includes the line number and the current line.
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.FileInfoExtensions.UseZipArchive(System.IO.FileInfo,System.Action{System.IO.Compression.ZipArchive})">
            <summary>
            Centralizes the use of <see cref="T:System.IO.Compression.ZipArchive"/>
            </summary>
            <param name="archiveInfo"></param>
            <param name="archiveAction"></param>
        </member>
        <member name="M:Songhay.Extensions.FileInfoExtensions.UseZipArchiveEntries(System.IO.FileInfo,System.Action{System.Collections.ObjectModel.ReadOnlyCollection{System.IO.Compression.ZipArchiveEntry}})">
            <summary>
            Centralizes the use of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>.
            </summary>
            <param name="archiveInfo"></param>
            <param name="entriesAction"></param>
        </member>
        <member name="M:Songhay.Extensions.FileInfoExtensions.UseZipArchiveEntries(System.IO.FileInfo,System.Action{System.Collections.ObjectModel.ReadOnlyCollection{System.IO.Compression.ZipArchiveEntry}},System.Func{System.Collections.ObjectModel.ReadOnlyCollection{System.IO.Compression.ZipArchiveEntry},System.Collections.ObjectModel.ReadOnlyCollection{System.IO.Compression.ZipArchiveEntry}})">
            <summary>
            Centralizes the use of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>.
            </summary>
            <param name="archiveInfo"></param>
            <param name="entriesAction"></param>
            <param name="entriesProjector"></param>
        </member>
        <member name="M:Songhay.Extensions.FileInfoExtensions.WriteZipArchiveEntry(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Write zip archive entry with <see cref="F:System.IO.Compression.CompressionLevel.Optimal"/>.
            </summary>
            <param name="archiveInfo">The file and/or directory info.</param>
            <param name="fileInfo">The file information.</param>
        </member>
        <member name="M:Songhay.Extensions.FileInfoExtensions.WriteZipArchiveEntry(System.IO.FileInfo,System.IO.FileInfo,System.IO.Compression.CompressionLevel)">
            <summary>
            Write zip archive entry.
            </summary>
            <param name="archiveInfo">The file and/or directory info.</param>
            <param name="fileInfo">The file information.</param>
            <param name="compressionLevel">The <see cref="T:System.IO.Compression.CompressionLevel"/></param>
        </member>
        <member name="T:Songhay.Extensions.FuncExtensions">
            <summary>
            Extensions of <see cref="T:System.Func`1"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.FuncExtensions.And``1(System.Func{``0,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            Ands the specified <see cref="T:System.Func`1"/> predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisPredicate">The extended <see cref="T:System.Func`1"/> predicate.</param>
            <param name="predicate">The composed <see cref="T:System.Func`1"/> predicate.</param>
        </member>
        <member name="M:Songhay.Extensions.FuncExtensions.AndNot``1(System.Func{``0,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            Ands the specified <see cref="T:System.Func`1"/> predicate with negation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisPredicate">The extended <see cref="T:System.Func`1"/> predicate.</param>
            <param name="predicate">The composed, negated <see cref="T:System.Func`1"/> predicate.</param>
        </member>
        <member name="M:Songhay.Extensions.FuncExtensions.Or``1(System.Func{``0,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            Ors the specified <see cref="T:System.Func`1"/> predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisPredicate">The extended <see cref="T:System.Func`1"/> predicate.</param>
            <param name="predicate">The composed <see cref="T:System.Func`1"/> predicate.</param>
        </member>
        <member name="M:Songhay.Extensions.FuncExtensions.OrNot``1(System.Func{``0,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            Ors the specified <see cref="T:System.Func`1"/> predicate with negation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisPredicate">The extended <see cref="T:System.Func`1"/> predicate.</param>
            <param name="predicate">The composed, negated <see cref="T:System.Func`1"/> predicate.</param>
        </member>
        <member name="T:Songhay.Extensions.HttpClientExtensions">
            <summary>
            Extensions of <see cref="T:System.Net.Http.HttpClient"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.HttpClientExtensions.DeleteAsync(System.Net.Http.HttpClient,System.Uri,System.Action{System.Net.Http.HttpRequestMessage})">
            <summary>
            Sends a <see cref="P:System.Net.Http.HttpMethod.Delete"/>
            <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
            <param name="client">The client.</param>
            <param name="uri">The URI.</param>
            <param name="requestMessageAction">The request message action.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.HttpClientExtensions.DownloadToFileAsync(System.Net.Http.HttpClient,System.Uri,System.String,System.Action{System.Net.Http.HttpRequestMessage})">
            <summary>
            Downloads resource at URI to the specified path.
            </summary>
            <param name="client">The request.</param>
            <param name="uri">The URI.</param>
            <param name="path">The path.</param>
            <param name="requestMessageAction">The request message action.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.HttpClientExtensions.DownloadToFileAsync(System.Net.Http.HttpClient,System.Uri,System.String)">
            <summary>
            Downloads resource at URI to the specified path.
            </summary>
            <param name="client">The request.</param>
            <param name="uri">The URI.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Songhay.Extensions.HttpClientExtensions.DownloadToStringAsync(System.Net.Http.HttpClient,System.Uri)">
            <summary>
            Downloads resource at URI to <see cref="T:System.String" />.
            </summary>
            <param name="client">The request.</param>
            <param name="uri">The URI.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.HttpClientExtensions.DownloadToStringAsync(System.Net.Http.HttpClient,System.Uri,System.Action{System.Net.Http.HttpRequestMessage})">
            <summary>
            Downloads resource at URI to <see cref="T:System.String" />.
            </summary>
            <param name="client">The request.</param>
            <param name="uri">The URI.</param>
            <param name="requestMessageAction">The request message action.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.HttpClientExtensions.GetAsync(System.Net.Http.HttpClient,System.Uri,System.Action{System.Net.Http.HttpRequestMessage})">
            <summary>
            Sends a <see cref="P:System.Net.Http.HttpMethod.Get"/>
            <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
            <param name="client">The client.</param>
            <param name="uri">The URI.</param>
            <param name="requestMessageAction">The request message action.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.HttpClientExtensions.PostFormAsync(System.Net.Http.HttpClient,System.Uri,System.Collections.Hashtable)">
            <summary>
            Calls <see cref="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
            with the specified <see cref="F:Songhay.Models.MimeTypes.ApplicationFormUrlEncoded" />
            request body using <see cref="P:System.Net.Http.HttpMethod.Post" />
            and <see cref="P:System.Text.Encoding.UTF8" />.
            </summary>
            <param name="client">The client.</param>
            <param name="uri">The URI.</param>
            <param name="formData">The form data.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">requestBody - The expected request body is not here.</exception>
        </member>
        <member name="M:Songhay.Extensions.HttpClientExtensions.PostFormAsync(System.Net.Http.HttpClient,System.Uri,System.Collections.Hashtable,System.Action{System.Net.Http.HttpRequestMessage})">
            <summary>
            Calls <see cref="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
            with the specified <see cref="F:Songhay.Models.MimeTypes.ApplicationFormUrlEncoded" />
            request body using <see cref="P:System.Net.Http.HttpMethod.Post" />
            and <see cref="P:System.Text.Encoding.UTF8" />.
            </summary>
            <param name="client">The client.</param>
            <param name="uri">The URI.</param>
            <param name="formData">The form data.</param>
            <param name="requestMessageAction">The request message action.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">requestBody - The expected request body is not here.</exception>
        </member>
        <member name="M:Songhay.Extensions.HttpClientExtensions.PostJsonAsync(System.Net.Http.HttpClient,System.Uri,System.String)">
            <summary>
            Calls <see cref="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
            with the specified <see cref="F:Songhay.Models.MimeTypes.ApplicationJson"/>
            request body using <see cref="P:System.Net.Http.HttpMethod.Post" />
            and <see cref="P:System.Text.Encoding.UTF8"/>.
            </summary>
            <param name="client">The client.</param>
            <param name="uri">The URI.</param>
            <param name="requestBody">The request body.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">requestBody - The expected request body is not here.</exception>
        </member>
        <member name="M:Songhay.Extensions.HttpClientExtensions.PostJsonAsync(System.Net.Http.HttpClient,System.Uri,System.String,System.Action{System.Net.Http.HttpRequestMessage})">
            <summary>
            Calls <see cref="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
            with the specified <see cref="F:Songhay.Models.MimeTypes.ApplicationJson" />
            request body using <see cref="P:System.Net.Http.HttpMethod.Post" />
            and <see cref="P:System.Text.Encoding.UTF8" />.
            </summary>
            <param name="client">The client.</param>
            <param name="uri">The URI.</param>
            <param name="requestBody">The request body.</param>
            <param name="requestMessageAction">The request message action.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">requestBody - The expected request body is not here.</exception>
        </member>
        <member name="M:Songhay.Extensions.HttpClientExtensions.PostXmlAsync(System.Net.Http.HttpClient,System.Uri,System.String)">
            <summary>
            Calls <see cref="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
            with the specified <see cref="F:Songhay.Models.MimeTypes.ApplicationXml"/>
            request body using <see cref="P:System.Net.Http.HttpMethod.Post" />
            and <see cref="P:System.Text.Encoding.UTF8"/>.
            </summary>
            <param name="client">The client.</param>
            <param name="uri">The URI.</param>
            <param name="requestBody">The request body.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">requestBody - The expected request body is not here.</exception>
        </member>
        <member name="M:Songhay.Extensions.HttpClientExtensions.PostXmlAsync(System.Net.Http.HttpClient,System.Uri,System.String,System.Action{System.Net.Http.HttpRequestMessage})">
            <summary>
            Calls <see cref="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
            with the specified <see cref="F:Songhay.Models.MimeTypes.ApplicationXml" />
            request body using <see cref="P:System.Net.Http.HttpMethod.Post" />
            and <see cref="P:System.Text.Encoding.UTF8" />.
            </summary>
            <param name="client">The client.</param>
            <param name="uri">The URI.</param>
            <param name="requestBody">The request body.</param>
            <param name="requestMessageAction">The request message action.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">requestBody - The expected request body is not here.</exception>
        </member>
        <member name="M:Songhay.Extensions.HttpClientExtensions.PutJsonAsync(System.Net.Http.HttpClient,System.Uri,System.String)">
            <summary>
            Calls <see cref="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
            with the specified <see cref="F:Songhay.Models.MimeTypes.ApplicationJson"/>
            request body using <see cref="P:System.Net.Http.HttpMethod.Put" />
            and <see cref="P:System.Text.Encoding.UTF8"/>.
            </summary>
            <param name="client">The client.</param>
            <param name="uri">The URI.</param>
            <param name="requestBody">The request body.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">requestBody - The expected request body is not here.</exception>
        </member>
        <member name="M:Songhay.Extensions.HttpClientExtensions.PutJsonAsync(System.Net.Http.HttpClient,System.Uri,System.String,System.Action{System.Net.Http.HttpRequestMessage})">
            <summary>
            Calls <see cref="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
            with the specified <see cref="F:Songhay.Models.MimeTypes.ApplicationJson" />
            request body using <see cref="P:System.Net.Http.HttpMethod.Put" />
            and <see cref="P:System.Text.Encoding.UTF8" />.
            </summary>
            <param name="client">The client.</param>
            <param name="uri">The URI.</param>
            <param name="requestBody">The request body.</param>
            <param name="requestMessageAction">The request message action.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">requestBody - The expected request body is not here.</exception>
        </member>
        <member name="M:Songhay.Extensions.HttpClientExtensions.PutXmlAsync(System.Net.Http.HttpClient,System.Uri,System.String)">
            <summary>
            Calls <see cref="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
            with the specified <see cref="F:Songhay.Models.MimeTypes.ApplicationXml"/>
            request body using <see cref="P:System.Net.Http.HttpMethod.Put" />
            and <see cref="P:System.Text.Encoding.UTF8"/>.
            </summary>
            <param name="client">The client.</param>
            <param name="uri">The URI.</param>
            <param name="requestBody">The request body.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">requestBody - The expected request body is not here.</exception>
        </member>
        <member name="M:Songhay.Extensions.HttpClientExtensions.PutXmlAsync(System.Net.Http.HttpClient,System.Uri,System.String,System.Action{System.Net.Http.HttpRequestMessage})">
            <summary>
            Calls <see cref="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
            with the specified <see cref="F:Songhay.Models.MimeTypes.ApplicationXml" />
            request body using <see cref="P:System.Net.Http.HttpMethod.Put" />
            and <see cref="P:System.Text.Encoding.UTF8" />.
            </summary>
            <param name="client">The client.</param>
            <param name="uri">The URI.</param>
            <param name="requestBody">The request body.</param>
            <param name="requestMessageAction">The request message action.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">requestBody - The expected request body is not here.</exception>
        </member>
        <member name="M:Songhay.Extensions.HttpClientExtensions.SendAsync(System.Net.Http.HttpClient,System.Uri,System.Net.Http.HttpMethod,System.Action{System.Net.Http.HttpRequestMessage})">
            <summary>
            Calls <see cref="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
            </summary>
            <param name="client">The client.</param>
            <param name="uri">The URI.</param>
            <param name="method">The method.</param>
            <param name="requestMessageAction">The request message action.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">uri
            or
            mediaType
            </exception>
        </member>
        <member name="M:Songhay.Extensions.HttpClientExtensions.SendBodyAsync(System.Net.Http.HttpClient,System.Uri,System.Net.Http.HttpMethod,System.String,System.Text.Encoding,System.String,System.Action{System.Net.Http.HttpRequestMessage})">
            <summary>
            Calls <see cref="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
            with the specified request body.
            </summary>
            <param name="client">The client.</param>
            <param name="uri">The URI.</param>
            <param name="method">The method.</param>
            <param name="requestBody">The request body.</param>
            <param name="encoding">The encoding.</param>
            <param name="mediaType">Type of the media.</param>
            <param name="requestMessageAction">The request message action.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            requestBody
            or
            mediaType
            </exception>
        </member>
        <member name="T:Songhay.Extensions.HttpRequestMessageExtensions">
            <summary>
            Extensions of <see cref="T:System.Net.Http.HttpRequestMessage"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.HttpRequestMessageExtensions.ToAzureStorageAuthorizationHeader(System.Net.Http.HttpRequestMessage,System.DateTime,System.String,System.String,System.String,System.String)">
             <summary>
             Derives the <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue"/>
             from the <see cref="T:System.Net.Http.HttpRequestMessage"/>.
             </summary>
             <param name="request">the <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
             <param name="storageAccountName">the Azure Storage account name</param>
             <param name="storageAccountKey">the Azure Storage account shared key</param>
             <param name="requestMoment">the moment of the request</param>
             <param name="eTag">entity tag for Web cache validation</param>
             <param name="md5">The MD5 (message-digest algorithm) hash</param>
             <returns></returns>
             <remarks>
             See https://github.com/Azure-Samples/storage-dotnet-rest-api-with-auth/tree/master
            
             See https://docs.microsoft.com/en-us/rest/api/storageservices/authorize-requests-to-azure-storage
            
             See https://docs.microsoft.com/en-us/rest/api/storageservices/authorize-with-shared-key
            
             Provide the md5 and it will check and make sure it matches the requested blob's md5. If it doesn't match, it won't return a value.
            
             Provide an eTag, and it will only make changes to a blob if the current eTag matches, to ensure you don't overwrite someone else's changes.
             </remarks>
        </member>
        <member name="M:Songhay.Extensions.HttpRequestMessageExtensions.ToAzureStorageCanonicalizedHeaders(System.Net.Http.HttpRequestMessage)">
             <summary>
             Returns headers, starting with <c>x-ms-</c>,
             in a canonical format.
             </summary>
             <param name="request">the <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
             <returns></returns>
             <remarks>
             See https://github.com/Azure-Samples/storage-dotnet-rest-api-with-auth/tree/master
            
             See https://docs.microsoft.com/en-us/rest/api/storageservices/authorize-requests-to-azure-storage
            
             See https://docs.microsoft.com/en-us/rest/api/storageservices/authorize-with-shared-key
            
             See http://en.wikipedia.org/wiki/Canonicalization
             </remarks>
        </member>
        <member name="M:Songhay.Extensions.HttpRequestMessageExtensions.ToAzureStorageSignature(System.Net.Http.HttpRequestMessage,System.String,System.String,System.String)">
             <summary>
             Derives the raw representation of the message signature
             from the <see cref="T:System.Net.Http.HttpRequestMessage"/>.`
             </summary>
             <param name="request">the <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
             <param name="storageAccountName">The name of the storage account to use.</param>
             <returns></returns>
             <remarks>
             See https://github.com/Azure-Samples/storage-dotnet-rest-api-with-auth/tree/master
            
             See https://docs.microsoft.com/en-us/rest/api/storageservices/authorize-requests-to-azure-storage
            
             See https://docs.microsoft.com/en-us/rest/api/storageservices/authorize-with-shared-key
             </remarks>
        </member>
        <member name="M:Songhay.Extensions.HttpRequestMessageExtensions.WithAzureStorageHeaders(System.Net.Http.HttpRequestMessage,System.DateTime,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Returns <see cref="T:System.Net.Http.HttpRequestMessage"/> with the minimum headers
             required for Azure Storage.
             </summary>
             <param name="request">the <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
             <param name="requestMoment">the moment of the request</param>
             <param name="serviceVersion"></param>
             <param name="storageAccountName">the Azure Storage account name</param>
             <param name="storageAccountKey">the Azure Storage account shared key</param>
             <param name="eTag">entity tag for Web cache validation</param>
             <param name="md5">The MD5 (message-digest algorithm) hash</param>
             <returns></returns>
             <remarks>
             See https://github.com/Azure-Samples/storage-dotnet-rest-api-with-auth/tree/master
            
             See https://docs.microsoft.com/en-us/rest/api/storageservices/authorize-requests-to-azure-storage
            
             See https://docs.microsoft.com/en-us/rest/api/storageservices/authorize-with-shared-key
            
             Provide the md5 and it will check and make sure it matches the requested blob's md5. If it doesn't match, it won't return a value.
             
             Provide an eTag, and it will only make changes to a blob if the current eTag matches, to ensure you don't overwrite someone else's changes.
             </remarks>
        </member>
        <member name="M:Songhay.Extensions.HttpRequestMessageExtensions.GetContentAsync(System.Net.Http.HttpRequestMessage)">
            <summary>
            Gets a <see cref="T:System.String"/> from the derived <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Songhay.Extensions.HttpRequestMessageExtensions.GetContentAsync(System.Net.Http.HttpRequestMessage,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Gets a <see cref="T:System.String" /> from the derived <see cref="T:System.Net.Http.HttpResponseMessage" />.
            </summary>
            <param name="request">The request.</param>
            <param name="responseMessageAction">The response message action.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.HttpRequestMessageExtensions.GetContentAsync(System.Net.Http.HttpRequestMessage,System.Action{System.Net.Http.HttpResponseMessage},System.Func{System.Net.Http.HttpClient})">
            <summary>
            Gets a <see cref="T:System.String" /> from the derived <see cref="T:System.Net.Http.HttpResponseMessage" />.
            </summary>
            <param name="request">The request.</param>
            <param name="responseMessageAction">The response message action.</param>
            <param name="optionalClientGetter">The optional client getter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">request</exception>
        </member>
        <member name="M:Songhay.Extensions.HttpRequestMessageExtensions.SendAsync(System.Net.Http.HttpRequestMessage)">
            <summary>
            Calls <see cref="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Songhay.Extensions.HttpRequestMessageExtensions.SendAsync(System.Net.Http.HttpRequestMessage,System.Action{System.Net.Http.HttpRequestMessage})">
            <summary>
            Calls <see cref="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
            </summary>
            <param name="request">The request.</param>
            <param name="requestMessageAction">The request message action.</param>
        </member>
        <member name="M:Songhay.Extensions.HttpRequestMessageExtensions.SendAsync(System.Net.Http.HttpRequestMessage,System.Action{System.Net.Http.HttpRequestMessage},System.Func{System.Net.Http.HttpClient},System.Net.Http.HttpCompletionOption)">
            <summary>
            Calls <see cref="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
            </summary>
            <param name="request">The request.</param>
            <param name="requestMessageAction">The request message action.</param>
            <param name="optionalClientGetter">The optional client getter.</param>
            <param name="completionOption"> the <see cref="T:System.Net.Http.HttpCompletionOption"/>.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            uri
            or
            mediaType
            </exception>
        </member>
        <member name="M:Songhay.Extensions.HttpRequestMessageExtensions.SendBodyAsync(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
            Calls <see cref="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
            with the specified request body, <see cref="P:System.Text.Encoding.UTF8"/>
            and <see cref="F:Songhay.Models.MimeTypes.ApplicationJson"/>.
            </summary>
            <param name="request">The request.</param>
            <param name="requestBody">The request body.</param>
        </member>
        <member name="M:Songhay.Extensions.HttpRequestMessageExtensions.SendBodyAsync(System.Net.Http.HttpRequestMessage,System.String,System.Text.Encoding,System.String)">
            <summary>
            Calls <see cref="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
            with the specified request body.
            </summary>
            <param name="request">The request.</param>
            <param name="requestBody">The request body.</param>
            <param name="encoding">The encoding.</param>
            <param name="mediaType">Type of the media.</param>
        </member>
        <member name="M:Songhay.Extensions.HttpRequestMessageExtensions.SendBodyAsync(System.Net.Http.HttpRequestMessage,System.String,System.Text.Encoding,System.String,System.Action{System.Net.Http.HttpRequestMessage})">
            <summary>
            Calls <see cref="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
            with the specified request body.
            </summary>
            <param name="request">The request.</param>
            <param name="requestBody">The request body.</param>
            <param name="encoding">The encoding.</param>
            <param name="mediaType">Type of the media.</param>
            <param name="requestMessageAction">The request message action.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.HttpRequestMessageExtensions.SendBodyAsync(System.Net.Http.HttpRequestMessage,System.String,System.Text.Encoding,System.String,System.Action{System.Net.Http.HttpRequestMessage},System.Func{System.Net.Http.HttpClient})">
            <summary>
            Calls <see cref="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
            with the specified request body.
            </summary>
            <param name="request">The request.</param>
            <param name="requestBody">The request body.</param>
            <param name="encoding">The encoding.</param>
            <param name="mediaType">Type of the media.</param>
            <param name="requestMessageAction">The request message action.</param>
            <param name="optionalClientGetter">The optional client getter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            requestBody
            or
            mediaType
            </exception>
        </member>
        <member name="T:Songhay.Extensions.HttpResponseMessageExtensions">
            <summary>
            Extensions of <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.HttpResponseMessageExtensions.DownloadByteArrayToFileAsync(System.Net.Http.HttpResponseMessage,System.IO.FileSystemInfo)">
            <summary>
            Downloads <see cref="P:System.Net.Http.HttpResponseMessage.Content"/>
            from <see cref="T:System.Byte"/> array to file.
            </summary>
            <param name="response">The response.</param>
            <param name="fileInfo">The file information.</param>
            <exception cref="T:System.NullReferenceException">The expected {nameof(FileSystemInfo)} is not here.</exception>
        </member>
        <member name="M:Songhay.Extensions.HttpResponseMessageExtensions.DownloadByteArrayToFileAsync(System.Net.Http.HttpResponseMessage,System.String)">
            <summary>
            Downloads <see cref="P:System.Net.Http.HttpResponseMessage.Content"/>
            from <see cref="T:System.Byte"/> array to file.
            </summary>
            <param name="response">The response.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Songhay.Extensions.HttpResponseMessageExtensions.DownloadStringToFileAsync(System.Net.Http.HttpResponseMessage,System.IO.FileSystemInfo)">
            <summary>
            Downloads <see cref="P:System.Net.Http.HttpResponseMessage.Content"/>
            from <see cref="T:System.Byte"/> array to file.
            </summary>
            <param name="response">The response.</param>
            <param name="fileInfo">The file information.</param>
            <exception cref="T:System.NullReferenceException">The expected {nameof(FileSystemInfo)} is not here.</exception>
        </member>
        <member name="M:Songhay.Extensions.HttpResponseMessageExtensions.DownloadStringToFileAsync(System.Net.Http.HttpResponseMessage,System.String)">
            <summary>
            Downloads <see cref="P:System.Net.Http.HttpResponseMessage.Content"/>
            from <see cref="T:System.Byte"/> array to file.
            </summary>
            <param name="response">The response.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Songhay.Extensions.HttpResponseMessageExtensions.IsMovedOrRedirected(System.Net.Http.HttpResponseMessage)">
            <summary>
            Returns <c>true</c> when <see cref="T:System.Net.Http.HttpResponseMessage"/>
            is <see cref="F:System.Net.HttpStatusCode.Moved"/>, <see cref="F:System.Net.HttpStatusCode.MovedPermanently"/>
            or <see cref="F:System.Net.HttpStatusCode.Redirect"/>.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="M:Songhay.Extensions.HttpResponseMessageExtensions.StreamToInstanceAsync``1(System.Net.Http.HttpResponseMessage,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the <see cref="T:System.Net.Http.HttpResponseMessage"/>
            to the specified <c>TInstance</c>
            </summary>
            <param name="response">The response.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/></param>
            <typeparam name="TInstance">The type of the instance.</typeparam>
            <returns></returns>
            <remarks>
            This method uses the Newtsonsoft API to deserialize.
            
            Consider using <see cref="F:System.Net.Http.HttpCompletionOption.ResponseHeadersRead"/>
            with <see cref="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)"/>
            for increased performance.
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.HttpResponseMessageExtensions.StreamToInstanceAsync``1(System.Net.Http.HttpResponseMessage)">
            <summary>
            Serializes the <see cref="T:System.Net.Http.HttpResponseMessage"/>
            to the specified <c>TInstance</c>
            </summary>
            <param name="response">The response.</param>
            <typeparam name="TInstance">The type of the instance.</typeparam>
            <returns></returns>
            <remarks>
            This method uses the Microsoft API to deserialize.
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.HttpResponseMessageExtensions.StreamToInstanceAsync``1(System.Net.Http.HttpResponseMessage,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Serializes the <see cref="T:System.Net.Http.HttpResponseMessage"/>
            to the specified <c>TInstance</c>
            </summary>
            <param name="response">The response.</param>
            <param name="options">The <see cref="T:System.Text.Json.JsonSerializerOptions"/></param>
            <typeparam name="TInstance">The type of the instance.</typeparam>
            <returns></returns>
            <remarks>
            This method uses the Microsoft API to deserialize.
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.HttpResponseMessageExtensions.ToJContainerAsync(System.Net.Http.HttpResponseMessage)">
            <summary>
            Converts the specified <see cref="T:System.Net.Http.HttpResponseMessage"/>
            to <see cref="T:Newtonsoft.Json.Linq.JContainer"/>
            </summary>
            <param name="response">The response.</param>
            <returns></returns>
        </member>
        <member name="T:Songhay.Extensions.HttpWebRequestExtensions">
            <summary>
            Extensions of <see cref="T:System.Net.HttpWebRequest"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.HttpWebRequestExtensions.DownloadToFile(System.Net.HttpWebRequest,System.String)">
            <summary>
            Downloads to file.
            </summary>
            <param name="request">The request.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Songhay.Extensions.HttpWebRequestExtensions.DownloadToFile(System.Net.HttpWebRequest,System.String,System.Uri,System.Boolean)">
            <summary>
            Downloads to file.
            </summary>
            <param name="request">The request.</param>
            <param name="path">The path.</param>
            <param name="proxyLocation">The proxy location.</param>
            <param name="bypassProxy">if set to <c>true</c> [bypass proxy].</param>
        </member>
        <member name="M:Songhay.Extensions.HttpWebRequestExtensions.DownloadToString(System.Net.HttpWebRequest)">
            <summary>
            Downloads to string.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.HttpWebRequestExtensions.DownloadToString(System.Net.HttpWebRequest,System.Uri,System.Boolean)">
            <summary>
            Downloads to string.
            </summary>
            <param name="request">The request.</param>
            <param name="proxyLocation">The proxy location</param>
            <param name="bypassProxy">when <c>true</c>, bypass proxy</param>
        </member>
        <member name="M:Songhay.Extensions.HttpWebRequestExtensions.PostForm(System.Net.HttpWebRequest,System.Uri,System.Collections.Hashtable)">
            <summary>
            Posts the form.
            </summary>
            <param name="request">The request.</param>
            <param name="resourceIndicator">The resource indicator.</param>
            <param name="postData">The post data.</param>
        </member>
        <member name="M:Songhay.Extensions.HttpWebRequestExtensions.PostForm(System.Net.HttpWebRequest,System.Uri,System.Collections.Hashtable,System.Uri,System.Boolean)">
            <summary>
            Posts the form.
            </summary>
            <param name="request">The request.</param>
            <param name="resourceIndicator">The resource indicator.</param>
            <param name="postData">The post data.</param>
            <param name="proxyLocation">The proxy location.</param>
            <param name="bypassProxy">if set to <c>true</c> [bypass proxy].</param>
        </member>
        <member name="M:Songhay.Extensions.HttpWebRequestExtensions.PostXml(System.Net.HttpWebRequest,System.String)">
            <summary>
            Posts the XML.
            </summary>
            <param name="request">The request.</param>
            <param name="xmlFragment">The XML fragment.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.HttpWebRequestExtensions.PostXml(System.Net.HttpWebRequest,System.String,System.Uri,System.Boolean)">
            <summary>
            Posts the XML.
            </summary>
            <param name="request">The request.</param>
            <param name="xmlFragment">The XML fragment.</param>
            <param name="proxyLocation">The proxy location.</param>
            <param name="bypassProxy">if set to <c>true</c> [bypass proxy].</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.HttpWebRequestExtensions.ToHttpStatusCode(System.Net.HttpWebRequest)">
            <summary>
            Converts the <see cref="T:System.Net.HttpWebRequest"/> into a HTTP status code.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Songhay.Extensions.HttpWebRequestExtensions.ToHttpWebResponse(System.Net.HttpWebRequest)">
            <summary>
            Converts the <see cref="T:System.Net.HttpWebRequest"/> into a HTTP web response.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Songhay.Extensions.HttpWebRequestExtensions.WithProxy(System.Net.HttpWebRequest,System.Uri,System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Net.HttpWebRequest" />
            with a <see cref="T:System.Net.WebProxy" />.
            </summary>
            <param name="request">The request.</param>
            <param name="proxyLocation">The proxy location.</param>
            <param name="bypassProxy">if set to <c>true</c> [bypass proxy].</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.HttpWebRequestExtensions.WithRequestBody(System.Net.HttpWebRequest,System.String,System.String)">
            <summary>
            Returns <see cref="T:System.Net.HttpWebRequest" /> with the request body.
            </summary>
            <param name="request">The request.</param>
            <param name="requestBody">The request body.</param>
            <param name="requestMethod">The request method.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            requestBody
            or
            method
            </exception>
        </member>
        <member name="T:Songhay.Extensions.IActivityExtensions">
            <summary>
            Extensions of <see cref="T:Songhay.Models.IActivity"/>
            </summary>
            <summary>
            Extensions of <see cref="T:Songhay.Models.IActivity"/>
            </summary>
            <summary>
            Extensions of <see cref="T:Songhay.Models.IActivity"/>
            </summary>
            <summary>
            Extensions of <see cref="T:Songhay.Models.IActivity"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.IActivityExtensions.WithConfiguration(Songhay.Models.IActivity,Microsoft.Extensions.Configuration.IConfigurationRoot)">
            <summary>
            Returns <see cref="T:Songhay.Models.IActivity"/> with <see cref="T:Microsoft.Extensions.Configuration.IConfigurationRoot"/> added when available.
            </summary>
            <param name="activity">The activity.</param>
            <param name="configuration">The configuration.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">activity</exception>
        </member>
        <member name="M:Songhay.Extensions.IActivityExtensions.ToActivityWithOutput``2(Songhay.Models.IActivity)">
            <summary>
            Converts the specified <see cref="T:Songhay.Models.IActivity" />
            to <see cref="T:Songhay.Models.IActivityWithOutput`2" />.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="activity">The activity.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The expected Activity name is not here.
            or</exception>
        </member>
        <member name="M:Songhay.Extensions.IActivityExtensions.ToActivityWithOutput``2(Songhay.Models.IActivity,System.Boolean)">
            <summary>
            Converts the specified <see cref="T:Songhay.Models.IActivity" />
            to <see cref="T:Songhay.Models.IActivityWithOutput`2" />.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="activity">The activity.</param>
            <param name="throwException">if set to <c>true</c> throw exception.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">The expected IActivityOutput{TInput, TOutput} is not here.</exception>
            <exception cref="T:System.ArgumentNullException">The expected Activity name is not here.
            or</exception>
        </member>
        <member name="M:Songhay.Extensions.IActivityExtensions.ToActivityWithTask``2(Songhay.Models.IActivity)">
            <summary>
            Converts the specified <see cref="T:Songhay.Models.IActivity" />
            to <see cref="T:Songhay.Models.IActivityWithTask`2" />.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="activity">The activity.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">
            The expected IActivityWithTask{TInput, TOutput} is not here.
            </exception>
        </member>
        <member name="M:Songhay.Extensions.IActivityExtensions.ToActivityWithTask``2(Songhay.Models.IActivity,System.Boolean)">
            <summary>
            Converts the specified <see cref="T:Songhay.Models.IActivity" />
            to <see cref="T:Songhay.Models.IActivityWithTask`2" />.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="activity">The activity.</param>
            <param name="throwException">if set to <c>true</c> throw exception.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">
            The expected IActivityWithTask{TInput, TOutput} is not here.
            </exception>
        </member>
        <member name="M:Songhay.Extensions.IActivityExtensions.ToActivityWithTask``1(Songhay.Models.IActivity)">
            <summary>
            Converts the specified <see cref="T:Songhay.Models.IActivity" />
            to <see cref="T:Songhay.Models.IActivityWithTask`1" />.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <param name="activity">The activity.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">
            The expected IActivityWithTask{TInput, TOutput} is not here.
            </exception>
        </member>
        <member name="M:Songhay.Extensions.IActivityExtensions.ToActivityWithTask``1(Songhay.Models.IActivity,System.Boolean)">
            <summary>
            Converts the specified <see cref="T:Songhay.Models.IActivity" />
            to <see cref="T:Songhay.Models.IActivityWithTask`1" />.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <param name="activity">The activity.</param>
            <param name="throwException">if set to <c>true</c> throw exception.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">
            The expected IActivityWithTask{TInput} is not here.
            </exception>
        </member>
        <member name="M:Songhay.Extensions.IActivityExtensions.ToActivityWithTask(Songhay.Models.IActivity)">
            <summary>
            Converts the specified <see cref="T:Songhay.Models.IActivity" />
            to <see cref="T:Songhay.Models.IActivityWithTask" />.
            </summary>
            <param name="activity">The activity.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">
            The expected IActivityWithTask{TInput, TOutput} is not here.
            </exception>
        </member>
        <member name="M:Songhay.Extensions.IActivityExtensions.ToActivityWithTask(Songhay.Models.IActivity,System.Boolean)">
            <summary>
            Converts the specified <see cref="T:Songhay.Models.IActivity" />
            to <see cref="T:Songhay.Models.IActivityWithTask" />.
            </summary>
            <param name="activity">The activity.</param>
            <param name="throwException">if set to <c>true</c> throw exception.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">
            The expected IActivityWithTask is not here.
            </exception>
        </member>
        <member name="M:Songhay.Extensions.IActivityExtensions.ToActivityWithTaskOutput``1(Songhay.Models.IActivity)">
            <summary>
            Converts the specified <see cref="T:Songhay.Models.IActivity" />
            to <see cref="T:Songhay.Models.IActivityWithTaskOutput`1" />.
            </summary>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="activity">The activity.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">
            The expected IActivityWithTaskOutput{TOutput} is not here.
            </exception>
        </member>
        <member name="M:Songhay.Extensions.IActivityExtensions.ToActivityWithTaskOutput``1(Songhay.Models.IActivity,System.Boolean)">
            <summary>
            Converts the specified <see cref="T:Songhay.Models.IActivity" />
            to <see cref="T:Songhay.Models.IActivityWithTaskOutput`1" />.
            </summary>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="activity">The activity.</param>
            <param name="throwException">if set to <c>true</c> throw exception.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">
            The expected IActivityWithTaskOutput{TOutput} is not here.
            </exception>
        </member>
        <member name="M:Songhay.Extensions.IActivityExtensions.GetActivity(System.Collections.Generic.Dictionary{System.String,System.Lazy{Songhay.Models.IActivity}},System.String)">
            <summary>
            Gets the activity.
            </summary>
            <param name="activities">The activities.</param>
            <param name="activityName">Name of the activity.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            activityName
            </exception>
        </member>
        <member name="M:Songhay.Extensions.IActivityExtensions.StartActivity(Songhay.Models.IActivity,Songhay.Models.ProgramArgs,System.Diagnostics.TraceSource)">
            <summary>
            Starts the <see cref="T:Songhay.Models.IActivity"/>.
            </summary>
            <param name="activity">The activity.</param>
            <param name="args">The arguments.</param>
            <param name="traceSource">The trace source.</param>
            <returns>The trace source log.</returns>
        </member>
        <member name="M:Songhay.Extensions.IActivityExtensions.StartActivityAsync``2(Songhay.Models.IActivity,``0,System.Diagnostics.TraceSource)">
            <summary>
            Starts the <see cref="T:Songhay.Models.IActivity"/>, asynchronously.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="activity">The activity.</param>
            <param name="input">The input.</param>
            <param name="traceSource">The trace source.</param>
            <returns><see cref="T:Songhay.Models.ActivityOutput`1"/></returns>
            <exception cref="T:System.NullReferenceException">The expected {nameof(IActivity)} is not here.</exception>
        </member>
        <member name="M:Songhay.Extensions.IActivityExtensions.StartActivityAsync``1(Songhay.Models.IActivity,``0,System.Diagnostics.TraceSource)">
            <summary>
            Starts the <see cref="T:Songhay.Models.IActivity"/>, asynchronously.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <param name="activity">The activity.</param>
            <param name="input">The input.</param>
            <param name="traceSource">The trace source.</param>
            <returns>The trace source log.</returns>
            <exception cref="T:System.NullReferenceException">The expected {nameof(IActivity)} is not here.</exception>
        </member>
        <member name="M:Songhay.Extensions.IActivityExtensions.StartActivityAsync(Songhay.Models.IActivity,System.Diagnostics.TraceSource)">
            <summary>
            Starts the <see cref="T:Songhay.Models.IActivity"/>, asynchronously.
            </summary>
            <param name="activity">The activity.</param>
            <param name="traceSource">The trace source.</param>
            <returns>The trace source log.</returns>
            <exception cref="T:System.NullReferenceException">The expected {nameof(IActivity)} is not here.</exception>
        </member>
        <member name="M:Songhay.Extensions.IActivityExtensions.StartConsoleActivity(Songhay.Models.IActivity,Songhay.Models.ProgramArgs,System.Diagnostics.TraceSource)">
            <summary>
            Starts the <see cref="T:Songhay.Models.IActivity"/>
            with <see cref="T:System.Diagnostics.ConsoleTraceListener"/>.
            </summary>
            <param name="activity">The activity.</param>
            <param name="args">The arguments.</param>
            <param name="traceSource">The trace source.</param>
            <returns>The trace source log.</returns>
        </member>
        <member name="M:Songhay.Extensions.IActivityExtensions.StartConsoleActivityAsync``1(Songhay.Models.IActivity,``0,System.Diagnostics.TraceSource)">
            <summary>
            Starts the <see cref="T:Songhay.Models.IActivity"/>, asynchronously
            with <see cref="T:System.Diagnostics.ConsoleTraceListener"/>.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <param name="activity">The activity.</param>
            <param name="input">The input.</param>
            <param name="traceSource">The trace source.</param>
            <returns>The trace source log.</returns>
            <exception cref="T:System.NullReferenceException">The expected {nameof(IActivity)} is not here.</exception>
        </member>
        <member name="M:Songhay.Extensions.IActivityExtensions.StartConsoleActivityAsync``2(Songhay.Models.IActivity,``0,System.Diagnostics.TraceSource)">
            <summary>
            Starts the <see cref="T:Songhay.Models.IActivity"/>, asynchronously
            with <see cref="T:System.Diagnostics.ConsoleTraceListener"/>.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="activity">The activity.</param>
            <param name="input">The input.</param>
            <param name="traceSource">The trace source.</param>
            <returns>The trace source log.</returns>
            <exception cref="T:System.NullReferenceException">The expected {nameof(IActivity)} is not here.</exception>
        </member>
        <member name="T:Songhay.Extensions.ICommunicationObjectExtensions">
            <summary>
            Extensions of <see cref="T:System.ServiceModel.ICommunicationObject"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.ICommunicationObjectExtensions.CloseConnection(System.ServiceModel.ICommunicationObject)">
            <summary>
            Closes the connection.
            </summary>
            <param name="serviceClient">The service client.</param>
            <remarks>
            For more detail see “IDisposable and WCF”
            by Steve Smith
            [http://stevesmithblog.com/blog/idisposable-and-wcf/]
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.ICommunicationObjectExtensions.CloseConnectionOrAbort(System.ServiceModel.ICommunicationObject)">
            <summary>
            Closes the connection or abort.
            </summary>
            <param name="serviceClient">The service client.</param>
        </member>
        <member name="M:Songhay.Extensions.ICommunicationObjectExtensions.IsOpened(System.ServiceModel.ICommunicationObject)">
            <summary>
            Determines whether the specified service client is opened.
            </summary>
            <param name="serviceClient">The service client.</param>
            <returns>
              <c>true</c> if the specified service client is opened; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Songhay.Extensions.IConfigurationBuilderExtensions">
            <summary>
            Extension of <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>.
            </summary>
        </member>
        <member name="F:Songhay.Extensions.IConfigurationBuilderExtensions.defaultSettingsFileName">
            <summary>
            The default settings file name
            </summary>
        </member>
        <member name="M:Songhay.Extensions.IConfigurationBuilderExtensions.WithSettingsJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
            Builds <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>
            with the conventional settings json file.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Songhay.Extensions.IConfigurationBuilderExtensions.WithSettingsJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)">
            <summary>
            Builds <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
            with the conventional settings json file.
            </summary>
            <param name="builder">The builder.</param>
            <param name="basePath">The base path.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Songhay.Extensions.IConfigurationBuilderExtensions.WithSettingsJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.String)">
             <summary>
             Builds <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />
             with the conventional settings json file.
             </summary>
             <param name="builder">The builder.</param>
             <param name="basePath">The base path.</param>
             <param name="settingsFileName">Name of the settings file.</param>
             <returns></returns>
             <exception cref="T:System.ArgumentException"></exception>
             <remarks>
             When <c>basePath</c> is missing, this member group will not call
             <see cref="M:Microsoft.Extensions.Configuration.FileConfigurationExtensions.SetBasePath(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)"/>
             unless the command-line argument <see cref="F:Songhay.Models.ProgramArgs.BasePath"/> is set and is valid.
            
             When <see cref="F:Songhay.Models.ProgramArgs.SettingsFile"/> is not specified then <see cref="F:Songhay.Extensions.IConfigurationBuilderExtensions.defaultSettingsFileName"/> will be used.
             </remarks>
        </member>
        <member name="T:Songhay.Extensions.IContractResolverExtensions">
            <summary>
            Extensions of <see cref="T:Newtonsoft.Json.Serialization.IContractResolver"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.IContractResolverExtensions.ToJsonSerializerSettings(Newtonsoft.Json.Serialization.IContractResolver)">
            <summary>
            Converts the <see cref="T:Newtonsoft.Json.Serialization.IContractResolver" />
            to <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="resolver">The resolver.</param>
            <returns></returns>
        </member>
        <member name="T:Songhay.Extensions.IDictionaryExtensions">
            <summary>
            Extensions of <see cref="T:System.Collections.IDictionary"/>
            </summary>
            <summary>
            Extensions of <see cref="T:System.Collections.Generic.IDictionary`2"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.IDictionaryExtensions.ToStringOrNull(System.Collections.IDictionary,System.String)">
            <summary>
            Converts the <see cref="T:System.Collections.IDictionary"/> into a string or null.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.IDictionaryExtensions.ToValueOrDefault``1(System.Collections.IDictionary,System.String)">
            <summary>
            Converts the <see cref="T:System.Collections.IDictionary"/> into a value or default.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.IDictionaryExtensions.ToNameValueCollection``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Converts the <see cref="T:System.Collections.Generic.IDictionary`2"/>
            to the <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The set.</param>
            <remarks>
            For detail, see https://stackoverflow.com/a/7230446/22944
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.IDictionaryExtensions.TryGetValueWithKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Tries to get value with the specified key.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The expected dictionary is not here.</exception>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:Songhay.Extensions.IDictionaryExtensions.TryGetValueWithKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Boolean)">
            <summary>
            Tries to get value with the specified key.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">dictionary</exception>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="T:Songhay.Extensions.IEnumerableOfTExtensions">
            <summary>
            Extensions of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.IEnumerableOfTExtensions.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Flattens the specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="childGetter">The child getter.</param>
        </member>
        <member name="M:Songhay.Extensions.IEnumerableOfTExtensions.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},``0)">
            <summary>
            Flattens the specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="childGetter">The child getter.</param>
            <param name="flattenedHead">The flattened head.</param>
        </member>
        <member name="M:Songhay.Extensions.IEnumerableOfTExtensions.ForEachInEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the <see cref="T:System.Action"/>
            on each item in the enumerable object.
            </summary>
            <typeparam name="TEnumerable">The type of the enumerable.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="action">The action.</param>
            <remarks>
            “I am philosophically opposed to providing such a method, for two reasons.
            …The first reason is that doing so violates the functional programming principles
            that all the other sequence operators are based upon. Clearly the sole purpose of a call
            to this method is to cause side effects.”
            —Eric Lippert, “foreach” vs “ForEach” [http://blogs.msdn.com/b/ericlippert/archive/2009/05/18/foreach-vs-foreach.aspx]
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.IEnumerableOfTExtensions.IsEnumerableType``1(System.Object)">
            <summary>
            Determines whether this instance is enumerable.
            </summary>
            <typeparam name="TEnumerable">The type of the enumerable.</typeparam>
            <param name="data">The data.</param>
        </member>
        <member name="M:Songhay.Extensions.IEnumerableOfTExtensions.Partition``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Partitions the specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="size">The size.</param>
            <remarks>
            This member is by Jon Skeet.
            [http://stackoverflow.com/questions/438188/split-a-collection-into-n-parts-with-linq]
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.IEnumerableOfTExtensions.SelectWithPrevious``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})">
            <summary>
            Projects the previous item with the current item.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source.</param>
            <param name="projection">The projection.</param>
            <returns></returns>
            <remarks>
            “This enables you to perform your projection using only a single pass of the source sequence,
            which is always a bonus (imagine running it over a large log file).
            Note that it will project a sequence of length n into a sequence of length n-1—
            you may want to prepend a ‘dummy’ first element, for example. (Or change the method to include one.)
            Here’s an example of how you'd use it:
            <code>
            var query = list.SelectWithPrevious((prev, cur) =&gt; new { ID = cur.ID, Date = cur.Date, DateDiff = (cur.Date - prev.Date).Days);
            </code>
            Note that this will include the final result of one ID with the first result of the next ID…
            you may wish to group your sequence by ID first.”
            —Jon Skeet, “Calculate difference from previous item with LINQ”
            [http://stackoverflow.com/questions/3683105/calculate-difference-from-previous-item-with-linq/3683217#3683217]
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.IEnumerableOfTExtensions.ToCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            into <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="TEnumerable"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
            <remarks>
            For details, see “When To Use IEnumerable, ICollection, IList And List”
            [http://www.claudiobernasconi.ch/2013/07/22/when-to-use-ienumerable-icollection-ilist-and-list/]
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.IEnumerableOfTExtensions.ToDisplayString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a display string.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="data">The data.</param>
        </member>
        <member name="M:Songhay.Extensions.IEnumerableOfTExtensions.ToDisplayString``1(System.Collections.Generic.IEnumerable{``0},System.Byte)">
            <summary>
            Converts the <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a display string.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="data">The data.</param>
            <param name="indent">The indent.</param>
        </member>
        <member name="T:Songhay.Extensions.IIdentityExtensions">
            <summary>
            Extensions of <see cref="T:System.Security.Principal.IIdentity"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.IIdentityExtensions.GetWindowsUserName(System.Security.Principal.IIdentity)">
            <summary>
            Gets the name of the windows user.
            </summary>
        </member>
        <member name="T:Songhay.Extensions.ITemporalExtensions">
            <summary>
            Extensions of <see cref="T:Songhay.Models.ITemporal"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.ITemporalExtensions.SetDefaults(Songhay.Models.ITemporal)">
            <summary>
            Sets conventional default values
            for <see cref="T:Songhay.Models.ITemporal"/> data.
            </summary>
            <param name="data">the <see cref="T:Songhay.Models.ITemporal"/> data</param>
        </member>
        <member name="M:Songhay.Extensions.ITemporalExtensions.SetDefaults(Songhay.Models.ITemporal,System.Nullable{System.DateTime})">
            <summary>
            Sets conventional default values
            for <see cref="T:Songhay.Models.ITemporal"/> data.
            </summary>
            <param name="data">the <see cref="T:Songhay.Models.ITemporal"/> data</param>
            <param name="endDate">sets <see cref="P:Songhay.Models.ITemporal.EndDate"/></param>
        </member>
        <member name="M:Songhay.Extensions.ITemporalExtensions.ToJObject``1(Songhay.Models.ITemporal,System.Boolean)">
            <summary>
            Converts the specified <see cref="T:Songhay.Models.ITemporal"/> data
            to <see cref="T:Newtonsoft.Json.Linq.JObject"/>.
            </summary>
            <param name="data">the <see cref="T:Songhay.Models.ITemporal"/> data</param>
            <param name="useJavaScriptCase">when <c>true</c> use snakecase</param>
            <typeparam name="TData">a type derived from <see cref="T:Songhay.Models.ITemporal"/></typeparam>
        </member>
        <member name="T:Songhay.Extensions.JObjectExtensions">
            <summary>
            Extensions of <see cref="T:Newtonsoft.Json.Linq.JObject"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.DisplayTopProperties(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Displays the top properties of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.
            </summary>
            <param name="jObject">The <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.Ensure(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Ensures the specified <see cref="T:Newtonsoft.Json.Linq.JObject"/>.
            </summary>
            <param name="jObject">The <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">The expected {nameof(JObject)} is not here.</exception>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.FromJObject``2(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Converts to <c>TDomainData</c> from <see cref="T:Newtonsoft.Json.Linq.JObject" />.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <typeparam name="TDomainData">The type of the domain data.</typeparam>
            <param name="jObject">The <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.FromJObject``2(Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Converts to <c>TDomainData</c> from <see cref="T:Newtonsoft.Json.Linq.JObject" />.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <typeparam name="TDomainData">The type of the domain data.</typeparam>
            <param name="jObject">The <see cref="T:Newtonsoft.Json.Linq.JObject" /> in the shape of <c>TInterface</c>.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.</param>
            <returns></returns>
            <remarks>
            The default <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />
            from <see cref="M:Songhay.Extensions.IContractResolverExtensions.ToJsonSerializerSettings(Newtonsoft.Json.Serialization.IContractResolver)" />
            assumes <c>TDomainData</c> derives from an Interface.
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.GetDictionary(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <param name="jObject">The <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="dictionaryPropertyName">Name of the dictionary property.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.GetDictionary(Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <param name="jObject">The <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="dictionaryPropertyName">Name of the dictionary property.</param>
            <param name="throwException">when set to <c>true</c> then [throw exception].</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">dictionaryPropertyName;The expected Dictionary Property Name is not here.</exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.GetDictionary(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <param name="jObject">The <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.GetDictionary(Newtonsoft.Json.Linq.JObject,System.Boolean)">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <param name="jObject">The <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="throwException">when set to <c>true</c> then [throw exception].</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">jObject;The expected JObject is not here.</exception>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.GetJArray(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JArray" /> or will throw <see cref="T:System.FormatException"/>.
            </summary>
            <param name="jObject">The <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="arrayPropertyName">Name of the array property.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.GetJArray(Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            </summary>
            <param name="jObject">The <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="arrayPropertyName">Name of the array property.</param>
            <param name="throwException">when set to <c>true</c> then throw <see cref="T:System.FormatException"/>.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">arrayPropertyName;The expected JArray Property Name is not here.</exception>
            <exception cref="T:System.FormatException">
            </exception>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.GetJObject(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JObject"/> by the specified property name.
            </summary>
            <param name="jObject">The <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="objectPropertyName">Name of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> property.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.GetJObject(Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JObject"/> by the specified property name.
            </summary>
            <param name="jObject">The <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="objectPropertyName">Name of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> property.</param>
            <param name="throwException">when set to <c>true</c> then throw exception.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.GetJToken(Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="jObject">The <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="objectPropertyName">Name of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> property.</param>
            <param name="throwException">when set to <c>true</c> then throw exception.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            jObject;The expected JObject is not here.
            or
            objectPropertyName;The expected property name is not here.
            </exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.GetJTokenFromJArray(Newtonsoft.Json.Linq.JObject,System.String,System.String,System.Int32)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> from <see cref="T:Newtonsoft.Json.Linq.JArray" /> or will throw <see cref="T:System.FormatException"/>.
            </summary>
            <param name="jObject">The <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="arrayPropertyName">Name of the array property.</param>
            <param name="objectPropertyName">Name of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> property.</param>
            <param name="arrayIndex">Index of the array.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.GetJTokenFromJArray(Newtonsoft.Json.Linq.JObject,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> from <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            </summary>
            <param name="jObject">The <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="arrayPropertyName">Name of the array property.</param>
            <param name="objectPropertyName">Name of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> property.</param>
            <param name="arrayIndex">Index of the array.</param>
            <param name="throwException">when set to <c>true</c> then throw <see cref="T:System.FormatException"/>.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">objectPropertyName;The expected JObject Property Name is not here.</exception>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.GetValue``1(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Get the value by property name
            from the specified <see cref="T:Newtonsoft.Json.Linq.JObject"/>.
            </summary>
            <typeparam name="TValue">type of returned value</typeparam>
            <param name="jObject">The <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="objectPropertyName">Name of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> property.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.GetValue``1(Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)">
            <summary>
            Get the value by property name
            from the specified <see cref="T:Newtonsoft.Json.Linq.JObject"/>.
            </summary>
            <typeparam name="TValue">type of returned value</typeparam>
            <param name="jObject"></param>
            <param name="objectPropertyName"></param>
            <param name="throwException">when set to <c>true</c> then throw exception.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.HasProperty(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Returns <c>true</c> when <see cref="M:Newtonsoft.Json.Linq.JObject.Properties"/>
            has a <see cref="T:Newtonsoft.Json.Linq.JProperty"/> with the specified name.
            </summary>
            <param name="jObject"></param>
            <param name="objectPropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.ParseJObject(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Parses the <see cref="T:Newtonsoft.Json.Linq.JObject"/>
            serialized as a string
            at the specified property name.
            
            It will throw any exceptions.
            </summary>
            <param name="jObject">The <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="objectPropertyName">Name of the object property.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.ParseJObject(Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)">
            <summary>
            Parses the <see cref="T:Newtonsoft.Json.Linq.JObject"/>
            serialized as a string
            at the specified property name.
            </summary>
            <param name="jObject">The <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="objectPropertyName">Name of the object property.</param>
            <param name="throwException">when <c>true</c> throw any exceptions; otherwise, return <c>null</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.WithProperty(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Ensures the <see cref="T:Newtonsoft.Json.Linq.JObject"/> has the specified property.
            </summary>
            <param name="jObject">The <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="objectPropertyName">Name of the object property.</param>
        </member>
        <member name="M:Songhay.Extensions.JObjectExtensions.WithProperty(Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)">
            <summary>
            Ensures the <see cref="T:Newtonsoft.Json.Linq.JObject"/> has the specified property.
            </summary>
            <param name="jObject">The <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="objectPropertyName">Name of the object property.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
        </member>
        <member name="T:Songhay.Extensions.JsonSerializerSettingsExtensions">
            <summary>
            Extensions of <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.JsonSerializerSettingsExtensions.WithConventionalSettings(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Returns <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>
            with conventional settings.
            </summary>
            <param name="settings">the <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/></param>
            <returns>
            Returns <see cref="F:Newtonsoft.Json.Formatting.Indented"/>,
            <see cref="F:Newtonsoft.Json.MissingMemberHandling.Ignore"/>
            and <see cref="F:Newtonsoft.Json.NullValueHandling.Ignore"/>.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.JsonSerializerSettingsExtensions.WithFormatting(Newtonsoft.Json.JsonSerializerSettings,Newtonsoft.Json.Formatting)">
            <summary>
            Returns <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>
            with <see cref="P:Newtonsoft.Json.JsonSerializerSettings.Formatting"/> set.
            </summary>
            <param name="settings">the <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/></param>
            <param name="setting">the <see cref="T:Newtonsoft.Json.Formatting"/> setting</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.JsonSerializerSettingsExtensions.WithMissingMemberHandling(Newtonsoft.Json.JsonSerializerSettings,Newtonsoft.Json.MissingMemberHandling)">
            <summary>
            Returns <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>
            with <see cref="P:Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling"/> set.
            </summary>
            <param name="settings">the <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/></param>
            <param name="setting">the <see cref="T:Newtonsoft.Json.MissingMemberHandling"/> setting</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.JsonSerializerSettingsExtensions.WithNullValueHandling(Newtonsoft.Json.JsonSerializerSettings,Newtonsoft.Json.NullValueHandling)">
            <summary>
            Returns <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>
            with <see cref="P:Newtonsoft.Json.JsonSerializerSettings.NullValueHandling"/> set.
            </summary>
            <param name="settings">the <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/></param>
            <param name="setting">the <see cref="T:Newtonsoft.Json.NullValueHandling"/> setting</param>
            <returns></returns>
        </member>
        <member name="T:Songhay.Extensions.JTokenExtensions">
            <summary>
            Extensions of <see cref="T:Newtonsoft.Json.Linq.JToken"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.JTokenExtensions.GetValue``1(Newtonsoft.Json.Linq.JToken,System.Boolean)">
            <summary>
            Gets the value of the specified <see cref="T:Newtonsoft.Json.Linq.JToken"/>
            </summary>
            <typeparam name="TValue">type of returned value</typeparam>
            <param name="jToken">the <see cref="T:Newtonsoft.Json.Linq.JToken"/></param>
            <param name="throwException">when <c>true</c> throw and exception when value is not here</param>
            <returns></returns>
        </member>
        <member name="T:Songhay.Extensions.MenuDisplayItemModelExtensions">
            <summary>
            Extensions of <see cref="T:Songhay.Models.MenuDisplayItemModel"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.MenuDisplayItemModelExtensions.HasGroupId(Songhay.Models.MenuDisplayItemModel,System.String)">
            <summary>
            Returns <c>true</c> when the grouping has the specified identifier.
            </summary>
            <param name="data"></param>
            <param name="GroupId"></param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.MenuDisplayItemModelExtensions.DefaultOrFirst(System.Collections.Generic.IEnumerable{Songhay.Models.MenuDisplayItemModel})">
            <summary>
            Returns the Default Selection
            <c>IsDefaultSelection == true</c>
            or the First <see cref="T:Songhay.Models.MenuDisplayItemModel"/>.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Songhay.Extensions.MenuDisplayItemModelExtensions.WithChildItem(Songhay.Models.MenuDisplayItemModel,Songhay.Models.MenuDisplayItemModel)">
            <summary>
            Fluently returns <see cref="T:Songhay.Models.MenuDisplayItemModel" /> with child item.
            </summary>
            <param name="data">The data.</param>
            <param name="child">The child.</param>
        </member>
        <member name="M:Songhay.Extensions.MenuDisplayItemModelExtensions.WithChildItems(Songhay.Models.MenuDisplayItemModel,System.Collections.Generic.IEnumerable{Songhay.Models.MenuDisplayItemModel})">
            <summary>
            Fluently returns <see cref="T:Songhay.Models.MenuDisplayItemModel" /> with child items.
            </summary>
            <param name="data">The data.</param>
            <param name="items">The items.</param>
        </member>
        <member name="T:Songhay.Extensions.NullableExtensions">
            <summary>
            Extensions of <c>Nullable</c> types.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.NullableExtensions.Round(System.Nullable{System.Decimal},System.Int32)">
            <summary>
            Rounds the specified decimal.
            </summary>
            <param name="decimalValue">The decimal value.</param>
            <param name="decimals">The decimals.</param>
            <returns></returns>
            <remarks>
            For more detail see http://anderly.com/2009/08/08/silverlight-midpoint-rounding-solution/
            </remarks>
        </member>
        <member name="T:Songhay.Extensions.ObjectExtensions">
            <summary>
            Extensions of <see cref="T:System.Object"/>.
            </summary>
            <summary>
            Extensions of <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.ObjectExtensions.IsAssignableToISerializable``1(``0)">
            <summary>
            Determines whether the specified type
            can be assigned to <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
            <typeparam name="T">the specified type</typeparam>
            <param name="objectOfDomain">The object of domain.</param>
            <returns>
              <c>true</c> if the specified throw exception is serializable; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.InvalidOperationException">The expected serializable Type is not here.</exception>
            <remarks>
            For detail, see https://stackoverflow.com/a/945528/22944.
            For background, see https://manski.net/2014/10/net-serializers-comparison-chart/
            and https://github.com/BryanWilhite/SonghayCore/issues/76
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.ObjectExtensions.IsType``1(System.Object)">
            <summary>
            Determines whether this instance is type.
            </summary>
            <typeparam name="TClass">The type of the class.</typeparam>
            <param name="objectOfDomain">The object of domain.</param>
        </member>
        <member name="M:Songhay.Extensions.ObjectExtensions.ToObjectOrDBNull(System.Object)">
            <summary>
            Boxes the value in object or returns <see cref="T:System.DBNull"/>.
            </summary>
            <param name="objectOfDomain">The object of domain.</param>
        </member>
        <member name="M:Songhay.Extensions.ObjectExtensions.GetProperties(System.Object)">
            <summary>
            Gets the properties.
            </summary>
            <param name="objectWithProperties">The object with properties.</param>
        </member>
        <member name="M:Songhay.Extensions.ObjectExtensions.GetProperty(System.Object,System.String)">
            <summary>
            Gets the property.
            </summary>
            <param name="objectWithProperties">The object with properties.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Songhay.Extensions.ObjectExtensions.GetPropertyValue(System.Object,System.String)">
             <summary>
             Gets the property value.
             </summary>
             <param name="objectWithProperties">The object with properties.</param>
             <param name="propertyName">Name of the property.</param>
             <remarks>
             Very useful for an MVVM situation like this:
             <code>
                 var command = this.DataContext.GetPropertyValue("MyCommand") as ICommand;
             </code>
            
             Note that this member uses <c>property.GetValue(objectWithProperties, index: null)</c>.
             Passing null is “fine for normal simple properties, this will fail with indexer properties,
             which take a non-null argument list as specified by <c>PropertyInfo.GetIndexParameters</c>.”
             [https://stackoverflow.com/a/1355110/22944]
             </remarks>
        </member>
        <member name="T:Songhay.Extensions.ObservableCollectionExtensions">
            <summary>
            Extensions of <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.ObservableCollectionExtensions.SetCollectionWithDigits(System.Collections.ObjectModel.ObservableCollection{System.Nullable{System.Byte}},System.Double)">
            <summary>
            Sets the collection with digits for <c>mantissaDigits = 2</c>.
            </summary>
            <param name="collectionOfByte">The collection of byte.</param>
            <param name="digits">The digits.</param>
        </member>
        <member name="M:Songhay.Extensions.ObservableCollectionExtensions.SetCollectionWithDigits(System.Collections.ObjectModel.ObservableCollection{System.Nullable{System.Byte}},System.Double,System.Int32)">
            <summary>
            Sets the collection with digits.
            </summary>
            <param name="collectionOfByte">The collection of byte.</param>
            <param name="digits">The digits.</param>
            <param name="mantissaDigits">The mantissa digits.</param>
        </member>
        <member name="T:Songhay.Extensions.OpenAuthorizationDataExtensions">
            <summary>
            Extensions of <see cref="T:Songhay.Models.OpenAuthorizationData"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.OpenAuthorizationDataExtensions.GetTwitterBaseUriWithScreenName(System.Uri,System.String)">
            <summary>
            Gets the name of the twitter base URI with screen.
            </summary>
            <param name="twitterBaseUri">The twitter base URI.</param>
            <param name="screenName">Name of the screen.</param>
        </member>
        <member name="M:Songhay.Extensions.OpenAuthorizationDataExtensions.GetTwitterBaseUriWithScreenName(System.Uri,System.String,System.Int32)">
            <summary>
            Gets the name of the twitter base URI with screen.
            </summary>
            <param name="twitterBaseUri">The twitter base URI.</param>
            <param name="screenName">Name of the screen.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Songhay.Extensions.OpenAuthorizationDataExtensions.GetTwitterRequestHeader(Songhay.Models.OpenAuthorizationData,System.Uri,System.String,System.String)">
            <summary>
            Gets the twitter request header.
            </summary>
            <param name="data">The data.</param>
            <param name="twitterBaseUri">The twitter base URI.</param>
            <param name="screenName">Name of the screen.</param>
            <param name="httpMethod">The HTTP method.</param>
        </member>
        <member name="T:Songhay.Extensions.ProgramArgsExtensions">
            <summary>
            Extensions of <see cref="T:Songhay.Models.ProgramArgs"/>
            </summary>
            <summary>
            Extensions of <see cref="T:Songhay.Models.ProgramArgs"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.ProgramArgsExtensions.GetBasePathValue(Songhay.Models.ProgramArgs)">
            <summary>
            Gets the conventional base-path value.
            </summary>
            <param name="args">The arguments.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Songhay.Extensions.ProgramArgsExtensions.GetSettingsFilePath(Songhay.Models.ProgramArgs)">
            <summary>
            Gets the conventional settings file path.
            </summary>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.ProgramArgsExtensions.GetArgValue(Songhay.Models.ProgramArgs,System.String)">
            <summary>
            Gets the argument value.
            </summary>
            <param name="args">The arguments.</param>
            <param name="arg">The argument.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Songhay.Extensions.ProgramArgsExtensions.HasArg(Songhay.Models.ProgramArgs,System.String,System.Boolean)">
            <summary>
            Determines whether the specified <see cref="T:Songhay.Models.ProgramArgs"/> has argument.
            </summary>
            <param name="args">The <see cref="T:Songhay.Models.ProgramArgs"/>.</param>
            <param name="arg">The argument.</param>
            <param name="requiresValue">if set to <c>true</c> [requires value].</param>
            <returns>
              <c>true</c> if the specified argument has argument; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">
            </exception>
        </member>
        <member name="M:Songhay.Extensions.ProgramArgsExtensions.IsHelpRequest(Songhay.Models.ProgramArgs)">
            <summary>
            Determines whether args contain the <see cref="F:Songhay.Models.ProgramArgs.Help"/> flag.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Songhay.Extensions.ProgramArgsExtensions.ToConfigurationKey(Songhay.Models.ProgramArgs,System.String)">
            <summary>
            Converts the <c>args</c> key to a conventional Configuration key.
            </summary>
            <param name="args">The arguments.</param>
            <param name="argKey">The arguments key.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">The expected argument key is not here.</exception>
        </member>
        <member name="M:Songhay.Extensions.ProgramArgsExtensions.ToHelpDisplayText(Songhay.Models.ProgramArgs)">
            <summary>
            Converts the <c>args</c> key any help text.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:Songhay.Extensions.ProgramMetadataExtensions">
            <summary>
            Extensions of <see cref="T:Songhay.Models.ProgramMetadata"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.ProgramMetadataExtensions.GetConnectionStringWithDecryptedValue(Songhay.Models.ProgramMetadata,System.String)">
            <summary>
            Gets the connection string with decrypted value.
            </summary>
            <param name="meta">The <see cref="T:Songhay.Models.ProgramMetadata"/>.</param>
            <param name="connectionStringName">Name of the connection string.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">meta</exception>
            <exception cref="T:System.NotSupportedException">connectionStringName</exception>
        </member>
        <member name="M:Songhay.Extensions.ProgramMetadataExtensions.ToConventionalHeaders(Songhay.Models.ProgramMetadata,System.String)">
            <summary>
            Converts <see cref="T:Songhay.Models.ProgramMetadata" />
            to the conventional <see cref="T:System.Net.Http.Headers.HttpRequestHeaders"/>.
            </summary>
            <param name="meta">The <see cref="T:Songhay.Models.ProgramMetadata"/>.</param>
            <param name="restApiMetadataSetKey">The key for <see cref="P:Songhay.Models.ProgramMetadata.RestApiMetadataSet"/>.</param>
            <returns></returns>
        </member>
        <member name="T:Songhay.Extensions.RestApiMetadataExtensions">
            <summary>
            Extensions of <see cref="T:Songhay.Models.RestApiMetadata"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.RestApiMetadataExtensions.ToUri(Songhay.Models.RestApiMetadata,System.String,System.String[])">
            <summary>
            To the URI.
            </summary>
            <param name="meta">The meta.</param>
            <param name="uriTemplateKey">The URI template key.</param>
            <param name="bindByPositionValues">The bind by position values.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">bindByPositionValues</exception>
            <exception cref="T:System.FormatException">The expected REST API metadata URI template key is not here.</exception>
        </member>
        <member name="T:Songhay.Extensions.StringBuilderExtensions">
            <summary>
            Extensions of <see cref="T:System.Text.StringBuilder"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.StringBuilderExtensions.AppendLabelWithValue(System.Text.StringBuilder,System.String,System.Object)">
            <summary>
            Appends the label with value.
            </summary>
            <param name="builder">The builder.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Songhay.Extensions.StringBuilderExtensions.AppendLabelWithValue(System.Text.StringBuilder,System.String,System.Object,System.String)">
            <summary>
            Appends the label with value.
            </summary>
            <param name="builder">The builder.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Songhay.Extensions.StringBuilderExtensions.AppendLabelWithValue(System.Text.StringBuilder,System.String,System.Object,System.String,System.Boolean)">
            <summary>
            Appends the label with value.
            </summary>
            <param name="builder">The builder.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
            <param name="hasLineBreak">When <c>true</c> add <see cref="P:System.Environment.NewLine" /> between label and value.</param>
            <remarks>
            This method will append <c>name: value</c> to the appending <see cref="T:System.Text.StringBuilder"/>.
            This is useful when overriding <see cref="M:System.Object.ToString"/>.
            </remarks>
        </member>
        <member name="T:Songhay.Extensions.StringExtensions">
            <summary>
            Extensions of <see cref="T:System.String"/>.
            </summary>
            <summary>
            Extensions of <see cref="T:System.String"/>.
            </summary>
            <summary>
            Extensions of <see cref="T:System.String"/>.
            </summary>
            <summary>
            Extensions of <see cref="T:System.String"/>.
            </summary>
            <summary>
            Extensions of <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.EqualsInvariant(System.String,System.String)">
            <summary>
            Returns <c>true</c> when the strings are equal without regard to cultural locales
            or casing.
            </summary>
            <param name="input"></param>
            <param name="otherString"></param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.EqualsInvariant(System.String,System.String,System.Boolean)">
            <summary>
            Returns <c>true</c> when the strings are equal without regard to cultural locales.
            </summary>
            <param name="input"></param>
            <param name="otherString"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.FromCamelCaseToEnumerable(System.String)">
            <summary>
            Converts camel-case <see cref="T:System.String"/> to <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.In(System.String,System.String)">
            <summary>
            Determines whether the specified input is in the comma-delimited values.
            </summary>
            <param name="input">The input.</param>
            <param name="delimitedValues">The delimited values.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.In(System.String,System.String,System.Char)">
            <summary>
            Determines whether the specified input is in the delimited values.
            </summary>
            <param name="input">The input.</param>
            <param name="delimitedValues">The delimited values.</param>
            <param name="separator">The separator.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.InsertSpacesBeforeCaps(System.String)">
            <summary>
            Inserts the spaces before caps.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.IsByte(System.String)">
            <summary>
            Determines whether the specified input is byte.
            </summary>
            <param name="input">The input.</param>
            <returns>
            	<c>true</c> if the specified input is byte; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.IsByte(System.String,System.Predicate{System.Byte})">
            <summary>
            Determines whether the specified input is byte.
            </summary>
            <param name="input">The input.</param>
            <param name="secondaryTest">The secondary test.</param>
            <returns>
            	<c>true</c> if the specified input is byte; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.IsDecimal(System.String)">
            <summary>
            Determines whether the specified input is decimal.
            </summary>
            <param name="input">The input.</param>
            <returns>
            	<c>true</c> if the specified input is decimal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.IsDecimal(System.String,System.Predicate{System.Decimal})">
            <summary>
            Determines whether the specified input is decimal.
            </summary>
            <param name="input">The input.</param>
            <param name="secondaryTest">The secondary test.</param>
            <returns>
            	<c>true</c> if the specified input is decimal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.IsInteger(System.String)">
            <summary>
            Determines whether the specified input is integer.
            </summary>
            <param name="input">The input.</param>
            <returns>
              <c>true</c> if the specified input is integer; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.IsInteger(System.String,System.Predicate{System.Int32})">
            <summary>
            Determines whether the specified input is integer.
            </summary>
            <param name="input">The input.</param>
            <param name="secondaryTest">The secondary test.</param>
            <returns>
              <c>true</c> if the specified input is integer; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.IsLong(System.String)">
            <summary>
            Determines whether the specified input is long.
            </summary>
            <param name="input">The input.</param>
            <returns>
            	<c>true</c> if the specified input is long; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.IsLong(System.String,System.Predicate{System.Int64})">
            <summary>
            Determines whether the specified input is long.
            </summary>
            <param name="input">The input.</param>
            <param name="secondaryTest">The secondary test.</param>
            <returns>
            	<c>true</c> if the specified input is long; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.IsTelephoneNumber(System.String)">
            <summary>
            Determines whether the specified input is a telephone number.
            </summary>
            <param name="input">The input.</param>
            <returns>
              <c>true</c> if is telephone number; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.IsUnc(System.String)">
            <summary>
            Determines whether the specified input is a UNC.
            </summary>
            <param name="input">The input.</param>
            <returns>
              <c>true</c> if is a UNC; otherwise, <c>false</c>.
            </returns>
            <remarks>
             📚 https://stackoverflow.com/a/47531093/22944
             📚 https://en.wikipedia.org/wiki/Path_(computing)#Uniform_Naming_Convention
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.LooksLikeEmailAddress(System.String)">
            <summary>
            Determines whether the specified input looks like an email address.
            </summary>
            <param name="input">The input.</param>
            <returns>
              <c>true</c> if seems to be an email address; otherwise, <c>false</c>.
            </returns>
            <remarks>
            “In short, don’t expect a single, usable regex to do a proper job.
            And the best regex will validate the syntax, not the validity
            of an e-mail (jhohn@example.com is correct but it will probably bounce…).”
            [http://stackoverflow.com/questions/201323/how-to-use-a-regular-expression-to-validate-an-email-addresses]
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.ToNumberOfDirectoryLevels(System.String)">
            <summary>
            Returns the number of directory levels
            based on the conventions <c>../</c> or <c>..\</c>.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.CsvSplit(System.String)">
            <summary>
            Splits CSV text format into an array of <see cref="T:System.String"/>.
            </summary>
            <param name="source">The source.</param>
            <remarks>
            This code is based on “LINQ to TEXT and LINQ to CSV” by Eric Lippert
            [http://blogs.msdn.com/b/ericwhite/archive/2008/09/30/linq-to-text-and-linq-to-csv.aspx]
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.EscapeInterpolation(System.String)">
            <summary>
            Escapes the interpolation tokens of <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.FromSnakeToCaps(System.String)">
            <summary>
            Replaces “snake” underscores with caps of first <see cref="T:System.Char"/>
            after the underscore.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.InDoubleQuotes(System.String)">
            <summary>
            Returns <see cref="T:System.String"/> in double quotes.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.InDoubleQuotesOrDefault(System.String,System.String)">
            <summary>
            Returns <see cref="T:System.String"/> in double quotes or default.
            </summary>
            <param name="input">The input.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.Reverse(System.String)">
            <summary>
            Reverse the string
            from http://en.wikipedia.org/wiki/Extension_method
            </summary>
            <param name="input"></param>
            <remarks>
            Based on work by Tomas Kubes, http://www.codeproject.com/Articles/31050/String-Extension-Collection-for-C
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.ToAsciiLettersWithSpacer(System.String)">
            <summary>
            Converts the <see cref="T:System.String" /> into a ASCII letters with spacer <c>\0</c>.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.ToAsciiLettersWithSpacer(System.String,System.Char)">
            <summary>
            Converts the <see cref="T:System.String" /> into ASCII letters with spacer.
            </summary>
            <param name="input">The input.</param>
            <param name="spacer">The spacer.</param>
            <remarks>
            📖 https://en.wikipedia.org/wiki/ASCII
            📖 https://stackoverflow.com/a/7826216/22944
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.ToBlogSlug(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> into a blog slug.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.ToCamelCase(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> into camel case
            by lower-casing the first character.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.ToDigitsOnly(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> into digits only.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.ToIntString(System.String)">
            <summary>
            Prepares a string to be converted to <c>int</c>.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.ToIntString(System.String,System.String)">
            <summary>
            Prepares a string to be converted to <c>int</c>.
            </summary>
            <param name="input">The input.</param>
            <param name="defaultValue">The default value ("0" by default).</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.ToPascalCase(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> into camel case
            by upper-casing the first character.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.ToSnakeCase(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> into camel case
            then replaces every upper case character
            with an underscore and its lowercase equivalent.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.ToSubstringInContext(System.String,System.String,System.Int32)">
            <summary>
            Formats the <see cref="T:System.String"/> into a shortened form,
            showing the search text in context.
            </summary>
            <param name="input">The input.</param>
            <param name="searchText">The search text.</param>
            <param name="contextLength">Length of the context.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.Truncate(System.String)">
            <summary>
            Truncates the specified input to 16 characters.
            <param name="input">The input.</param>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Truncates the specified input to 16 characters.
            <param name="input">The input.</param>
            <param name="length">The length.</param>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.Truncate(System.String,System.Int32,System.String)">
            <summary>
            Truncates the specified input.
            </summary>
            <param name="input">The input.</param>
            <param name="length">The length.</param>
            <param name="ellipsis"></param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.UnwrapForRiaEndpoint(System.String,System.String)">
            <summary>
            Unwraps for RIA endpoint.
            </summary>
            <param name="input">The input.</param>
            <param name="riaEndpointName">Name of the RIA endpoint.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.WrapForRiaEndpoint(System.String,System.String)">
            <summary>
            Wraps for RIA endpoint input.
            </summary>
            <param name="input">The input.</param>
            <param name="riaParameter">The RIA parameter.</param>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.ToNumericString(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> into a numeric format for parsing.
            </summary>
            <param name="input">The input.</param>
            <returns>
            Returns a numeric string ready for integer or float parsing.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.ToNumericString(System.String,System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> into a numeric format for parsing.
            </summary>
            <param name="input">The input.</param>
            <param name="defaultValue">The default value ("0" by default).</param>
            <returns>
            Returns a numeric string ready for integer or float parsing.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.StringExtensions.RemoveDiacritics(System.String)">
            <summary>
            Remove accent from strings 
            </summary>
            <example>
             input:  "Příliš žluťoučký kůň úpěl ďábelské ódy."
             result: "Prilis zlutoucky kun upel dabelske ody."
            </example>
            <param name="s"></param>
            <remarks>
            From Tomas Kubes, http://www.codeproject.com/Articles/31050/String-Extension-Collection-for-C
            Also, see http://stackoverflow.com/questions/249087/how-do-i-remove-diacritics-accents-from-a-string-in-net
            </remarks>
            <returns>string without accents</returns>
        </member>
        <member name="T:Songhay.Extensions.TaskExtensions">
            <summary>
            Extensions of <see cref="T:System.Threading.Tasks.Task"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.TaskExtensions.Delay(System.Threading.Tasks.Task,System.TimeSpan,System.Action{System.Threading.Tasks.Task})">
            <summary>
            Delays with a <see cref="T:System.Threading.Timer"/> task for the specified <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="task">Instance of </param>
            <param name="timeSpan">The specified timespan</param>
            <param name="actionAfterDelay">The continuation action</param>
        </member>
        <member name="M:Songhay.Extensions.TaskExtensions.Delay(System.Threading.Tasks.Task,System.TimeSpan,System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)">
             <summary>
             Delays with a <see cref="T:System.Threading.Timer"/> task for the specified <see cref="T:System.TimeSpan"/>.
             </summary>
             <param name="task">Instance of </param>
             <param name="timeSpan">The specified timespan</param>
             <param name="actionAfterDelay">The continuation action</param>
             <param name="schedulerAfterDelay">Work-queue scheduler</param>
             <remarks>
             The syntax to get this running may seem a bit strange:
            
                 this._delayTask = this._delayTask.Delay(TimeSpan.FromSeconds(1), i =>
                 {
                     //do stuff after one second…
                 });
             
             This is done to both initialize the Task and then return its reference until the Task is completed.
            
             </remarks>
        </member>
        <member name="T:Songhay.Extensions.TimeSpanExtensions">
            <summary>
            Extensions of <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.TimeSpanExtensions.ListDays(System.TimeSpan)">
            <summary>
            Lists the days for the specified <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="span">The span.</param>
        </member>
        <member name="M:Songhay.Extensions.TimeSpanExtensions.ListDays(System.TimeSpan,System.DateTime)">
            <summary>
            Lists the days for the specified <see cref="T:System.TimeSpan"/>
            from the specified start <see cref="T:System.DateTime"/>.
            </summary>
            <param name="span">The span.</param>
            <param name="startDate">The start date.</param>
        </member>
        <member name="T:Songhay.Extensions.TraceSourceExtensions">
            <summary>
            Extensions of <see cref="T:System.Diagnostics.TraceSource"/>
            </summary>
            <remarks>
            Based on Fonlow.Diagnostics by Zijian Huang [https://github.com/zijianhuang/Fonlow.Diagnostics]
            Also see “Use TraceSource Efficiently” [http://www.codeproject.com/Tips/1071853/Use-TraceSource-Efficiently]
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.EnsureTraceSource(System.Diagnostics.TraceSource)">
            <summary>
            Ensures the trace source.
            </summary>
            <param name="traceSource">The trace source.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">The expected Trace Source is not here.</exception>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.TraceError(System.Diagnostics.TraceSource,System.String,System.Object[])">
            <summary>
            Traces the error.
            </summary>
            <param name="traceSource">The trace source.</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.TraceError(System.Diagnostics.TraceSource,System.String)">
            <summary>
            Traces the error.
            </summary>
            <param name="traceSource">The trace source.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.TraceError(System.Diagnostics.TraceSource,System.Exception)">
            <summary>
            Traces the error.
            </summary>
            <param name="traceSource">The trace source.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.TraceError(System.Diagnostics.TraceSource,System.Exception,System.Boolean)">
            <summary>
            Traces the error.
            </summary>
            <param name="traceSource">The trace source.</param>
            <param name="ex">The exception.</param>
            <param name="includeStackTrace">When <c>true</c>, include <see cref="P:System.Exception.StackTrace"/> info</param>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.TraceWarning(System.Diagnostics.TraceSource,System.String)">
            <summary>
            Trace event type <see cref="F:System.Diagnostics.TraceEventType.Warning"/>
            </summary>
            <param name="traceSource">The trace source.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.TraceWarning(System.Diagnostics.TraceSource,System.String,System.Object[])">
            <summary>
            Trace event type <see cref="F:System.Diagnostics.TraceEventType.Warning"/>
            </summary>
            <param name="traceSource">The trace source.</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.TraceVerbose(System.Diagnostics.TraceSource,System.String)">
            <summary>
            Trace event type <see cref="F:System.Diagnostics.TraceEventType.Verbose"/>
            </summary>
            <param name="traceSource">The trace source.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.TraceVerbose(System.Diagnostics.TraceSource,System.String,System.Object[])">
            <summary>
            Trace event type <see cref="F:System.Diagnostics.TraceEventType.Verbose"/>
            </summary>
            <param name="traceSource">The trace source.</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.WithSourceLevels(System.Diagnostics.TraceSource)">
            <summary>
            Returns the <see cref="T:System.Diagnostics.TraceSource"/>
            with Switch Level <see cref="F:System.Diagnostics.SourceLevels.All"/>.
            </summary>
            <param name="traceSource">The trace source.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.WithSourceLevels(System.Diagnostics.TraceSource,System.Diagnostics.SourceLevels)">
            <summary>
            Returns the <see cref="T:System.Diagnostics.TraceSource"/>
            with the specified <see cref="T:System.Diagnostics.SourceLevels"/>.
            </summary>
            <param name="traceSource">The trace source.</param>
            <param name="levels">The levels.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.WriteLine(System.Diagnostics.TraceSource,System.String)">
            <summary>
            Trace event type <see cref="F:System.Diagnostics.TraceEventType.Information"/>
            </summary>
            <param name="traceSource">The trace source.</param>
            <param name="message">The message.</param>
            <remarks>
            This member was previously marked with <see cref="T:System.ObsoleteAttribute"/>.
            For detail, see https://github.com/BryanWilhite/SonghayCore/issues/82#issuecomment-566214635
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.TraceSourceExtensions.WriteLine(System.Diagnostics.TraceSource,System.String,System.Object[])">
            <summary>
            Trace event type <see cref="F:System.Diagnostics.TraceEventType.Information"/>
            </summary>
            <param name="traceSource">The trace source.</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
            <remarks>
            This member was previously marked with <see cref="T:System.ObsoleteAttribute"/>.
            For detail, see https://github.com/BryanWilhite/SonghayCore/issues/82#issuecomment-566214635
            </remarks>
        </member>
        <member name="T:Songhay.Extensions.TraceSourcesExtensions">
            <summary>
            Extensions of <see cref="T:Songhay.Diagnostics.TraceSources"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.TraceSourcesExtensions.GetConfiguredTraceSource(Songhay.Diagnostics.TraceSources)">
             <summary>
             Gets the configured trace source.
             </summary>
             <param name="instance">The instance.</param>
             <returns></returns>
             <remarks>
             For .NET Standard, this member makes sense after lines like these:
             <code>
                 var configuration = builder.Build();
                 TraceSources.ConfiguredTraceSourceName = configuration[DeploymentEnvironment.DefaultTraceSourceNameConfigurationKey];
             </code>
            
             This member makes the <c>GetConfiguredTraceSource</c> pattern cross platform.
             </remarks>
        </member>
        <member name="M:Songhay.Extensions.TraceSourcesExtensions.GetConfiguredTraceSource(Songhay.Diagnostics.TraceSources,Microsoft.Extensions.Configuration.IConfiguration)">
             <summary>
             Gets the configured trace source.
             </summary>
             <param name="instance">The instance.</param>
             <param name="configuration">The configuration.</param>
             <returns></returns>
             <remarks>
             For .NET Standard, this member makes sense after lines like these:
             <code>
                 var configuration = builder.Build();
                 TraceSources.ConfiguredTraceSourceName = configuration[DeploymentEnvironment.DefaultTraceSourceNameConfigurationKey];
             </code>
            
             This member makes the <c>GetConfiguredTraceSource</c> pattern cross platform.
             </remarks>
        </member>
        <member name="M:Songhay.Extensions.TraceSourcesExtensions.GetConfiguredTraceSource(Songhay.Diagnostics.TraceSources,Microsoft.Extensions.Configuration.IConfiguration,System.String)">
             <summary>
             Gets the configured trace source.
             </summary>
             <param name="instance">The instance.</param>
             <param name="configuration">The configuration.</param>
             <param name="key">The key.</param>
             <returns></returns>
             <remarks>
             For .NET Standard, this member makes sense after lines like these:
             <code>
                 var configuration = builder.Build();
                 TraceSources.ConfiguredTraceSourceName = configuration[DeploymentEnvironment.DefaultTraceSourceNameConfigurationKey];
             </code>
            
             This member makes the <c>GetConfiguredTraceSource</c> pattern cross platform.
             </remarks>
        </member>
        <member name="T:Songhay.Extensions.UriBuilderExtensions">
            <summary>
            Extensions of <see cref="T:System.UriBuilder"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.UriBuilderExtensions.WithPath(System.UriBuilder,System.String)">
            <summary>
            Returns <see cref="T:System.UriBuilder"/>
            with the specified path.
            </summary>
            <param name="builder">The builder.</param>
            <param name="path">The path.</param>
        </member>
        <member name="T:Songhay.Extensions.UriExtensions">
            <summary>
            Extensions of <see cref="T:System.Uri"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.UriExtensions.IsProbablyAFile(System.Uri)">
            <summary>
            Determines whether the <see cref="T:System.Uri" /> is a file.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
            <remarks>
            Recall that <see cref="P:System.Uri.IsFile" /> is another way
            of stating that <c>Uri.Schema == Uri.UriSchemeFile</c>
            and that <see cref="N:System.IO"/> members can process URIs.
            
            Also note that the only way to truly define a directory
            or folder is with a trailing forward/back slash.
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.UriExtensions.ToAzureStorageCanonicalizedResourceLocation(System.Uri,System.String)">
             <summary>
             This part of the signature string represents the storage account 
               targeted by the request. Will also include any additional query parameters/values.
             For ListContainers, this will return something like this:
               /storageaccountname/\ncomp:list
             </summary>
             <param name="uri">The URI of the storage service.</param>
             <param name="accountName">The storage account name.</param>
             <returns><see cref="T:System.String" /> representing the canonicalized resource.</returns>
             <remarks>
             See https://github.com/Azure-Samples/storage-dotnet-rest-api-with-auth/tree/master
            
             See https://docs.microsoft.com/en-us/rest/api/storageservices/authorize-requests-to-azure-storage
            
             See https://docs.microsoft.com/en-us/rest/api/storageservices/authorize-with-shared-key
             </remarks>
        </member>
        <member name="M:Songhay.Extensions.UriExtensions.ToBaseUri(System.Uri)">
            <summary>
            Converts the <see cref="T:System.Uri" /> into a base URI.
            </summary>
            <param name="input">The input.</param>
            <returns>
            Returns <see cref="T:System.String"/> like: <c>https://MyServer:8080/</c>
            </returns>
        </member>
        <member name="M:Songhay.Extensions.UriExtensions.ToFileName(System.Uri)">
            <summary>
            Converts the <see cref="T:System.Uri" /> into its file name.
            </summary>
            <param name="input">The input.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Songhay.Extensions.UriExtensions.ToExpandedUriAsync(System.Uri)">
            <summary>
            Converts the specified <see cref="T:System.Uri" />
            to its ‘expanded’ version.
            </summary>
            <param name="expandableUri"></param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.UriExtensions.ToExpandedUriPairAsync(System.Uri)">
            <summary>
            Converts the specified <see cref="T:System.Uri" />
            to its ‘expanded’ version.
            </summary>
            <param name="expandableUri"></param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.UriExtensions.ToRelativeUriFromQuery(System.Uri)">
            <summary>
            Converts the <see cref="T:System.Uri"/> into a relative URI from query.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="T:Songhay.Extensions.UriTemplateExtensions">
            <summary>
            Extensions of <see cref="T:Tavis.UriTemplates.UriTemplate"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.UriTemplateExtensions.BindByPosition(Tavis.UriTemplates.UriTemplate,System.String[])">
            <summary>
            Binds the <see cref="T:Tavis.UriTemplates.UriTemplate"/>
            to the specified <c>params</c> by position.
            </summary>
            <param name="template">The template.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Extensions.UriTemplateExtensions.BindByPosition(Tavis.UriTemplates.UriTemplate,System.Uri,System.String[])">
            <summary>
            Binds the <see cref="T:Tavis.UriTemplates.UriTemplate" />
            to the specified <c>params</c> by position.
            </summary>
            <param name="template">The template.</param>
            <param name="baseUri">The base URI.</param>
            <param name="values">The values.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">template</exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="T:Songhay.Extensions.Utf8JsonWriterExtensions">
            <summary>
            Extensions of <see cref="T:System.Text.Json.Utf8JsonWriter"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.Utf8JsonWriterExtensions.WriteObject(System.Text.Json.Utf8JsonWriter,System.Action)">
            <summary>
            Wrap <see cref="T:System.Text.Json.Utf8JsonWriter"/> statements
            inside <see cref="M:System.Text.Json.Utf8JsonWriter.WriteStartObject"/>
            and <see cref="M:System.Text.Json.Utf8JsonWriter.WriteEndObject"/>.
            </summary>
            <param name="writer">the <see cref="T:System.Text.Json.Utf8JsonWriter"/></param>
            <param name="writerAction"></param>
            <returns></returns>
            <remarks>
            This method is for building a JSON object.
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.Utf8JsonWriterExtensions.WriteObject(System.Text.Json.Utf8JsonWriter,System.String,System.Action)">
            <summary>
            Wrap <see cref="T:System.Text.Json.Utf8JsonWriter"/> statements
            inside <see cref="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)"/>
            <see cref="M:System.Text.Json.Utf8JsonWriter.WriteStartObject"/>
            and <see cref="M:System.Text.Json.Utf8JsonWriter.WriteEndObject"/>.
            </summary>
            <param name="writer">the <see cref="T:System.Text.Json.Utf8JsonWriter"/></param>
            <param name="propertyName"></param>
            <param name="writerAction"></param>
            <returns></returns>
            <remarks>
            This method is for building a JSON object for a JSON property.
            </remarks>
        </member>
        <member name="T:Songhay.Extensions.ValidationContextExtensions">
            <summary>
            Extensions of <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext"/>
            </summary>
            <summary>
            Extensions of <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext"/>
            </summary>
            <summary>
            Extensions of <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.ValidationContextExtensions.ToValidationResults(System.Object,System.Object,System.String)">
            <summary>
            Converts the <see cref="T:System.Object"/> into a validation results.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="propertyValue">The property value.</param>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">propertyName</exception>
        </member>
        <member name="M:Songhay.Extensions.ValidationContextExtensions.ToDisplayText(System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>
            Converts the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> into a display text.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Songhay.Extensions.ValidationContextExtensions.ToDisplayText(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Converts the <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a display text.
            </summary>
            <param name="results">The results.</param>
        </member>
        <member name="M:Songhay.Extensions.ValidationContextExtensions.ToValidationContext(System.Object)">
            <summary>
            Converts the <see cref="T:System.Object"/> into a validation context.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">The expected object to validate is not here.</exception>
        </member>
        <member name="M:Songhay.Extensions.ValidationContextExtensions.ToValidationResults(System.Object)">
            <summary>
            Converts the <see cref="T:System.Object"/> into a validation results.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <returns></returns>
        </member>
        <member name="T:Songhay.Extensions.XElementExtensions">
            <summary>
            Extensions of <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.XElementExtensions.AddOnce(System.Xml.Linq.XElement,System.Xml.Linq.XAttribute)">
            <summary>
            Adds the once.
            </summary>
            <param name="element">The element.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="M:Songhay.Extensions.XElementExtensions.GetElement(System.Xml.Linq.XNode,System.Xml.Linq.XName)">
            <summary>
            Gets the <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="node">The node.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Songhay.Extensions.XElementExtensions.HasElementName(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Determines whether the <see cref="T:System.Xml.Linq.XElement"/>
            has the specified <see cref="T:System.Xml.Linq.XName"/>.
            </summary>
            <param name="element">The element.</param>
            <param name="name">The name.</param>
            <returns>
            	<c>true</c> when the element has the name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.XElementExtensions.HasElementName(System.Xml.Linq.XNode,System.Xml.Linq.XName)">
            <summary>
            Determines whether the <see cref="T:System.Xml.Linq.XNode"/>
            has the specified <see cref="T:System.Xml.Linq.XName"/>.
            </summary>
            <param name="node">The node.</param>
            <param name="name">The name.</param>
            <returns>
            	<c>true</c> when the node has the name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.XElementExtensions.IsElement(System.Xml.Linq.XNode)">
            <summary>
            Determines whether the specified node is <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="node">The node.</param>
            <returns>
            	<c>true</c> if the specified node is element; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Songhay.Extensions.XElementExtensions.ToAttributeValueOrDefault(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Converts the <see cref="T:System.Xml.Linq.XElement" /> into a attribute value or default.
            </summary>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Songhay.Extensions.XElementExtensions.ToAttributeValueOrNull(System.Xml.Linq.XElement,System.String)">
            <summary>
            Returns the attribute value or null.
            </summary>
            <param name="element">The element.</param>
            <param name="attributeName">Name of the attribute.</param>
        </member>
        <member name="M:Songhay.Extensions.XElementExtensions.ToElementValueOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            Converts the <see cref="T:System.Xml.Linq.XElement" /> into a element value or default.
            </summary>
            <param name="element">The element.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Songhay.Extensions.XElementExtensions.ToElementValueOrNull(System.Xml.Linq.XElement)">
            <summary>
            Converts the <see cref="T:System.Xml.Linq.XElement" /> into a element value or null.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Songhay.Extensions.XElementExtensions.ToElementValueOrNull(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Returns the element value or null.
            </summary>
            <param name="elements">The elements.</param>
        </member>
        <member name="M:Songhay.Extensions.XElementExtensions.WithoutNamespaces(System.Xml.Linq.XElement)">
            <summary>
            Returns the specified <see cref="T:System.Xml.Linq.XElement"/>
            without namespace qualifiers on elements and attributes.
            </summary>
            <param name="element">The element</param>
            <remarks>
            Based on “Answer: How to remove all namespaces from XML with C#?”
            [http://stackoverflow.com/a/7238007/22944?stw=2]
            </remarks>
        </member>
        <member name="T:Songhay.Extensions.XNamespaceExtensions">
            <summary>
            Extensions of <see cref="T:System.Xml.Linq.XNamespace"/>
            </summary>
        </member>
        <member name="M:Songhay.Extensions.XNamespaceExtensions.ToXName(System.Xml.Linq.XNamespace,System.String)">
            <summary>
            Converts the <see cref="T:System.Xml.Linq.XNamespace"/> to an <see cref="T:System.Xml.Linq.XName"/>
            with the specified element name.
            </summary>
            <param name="ns">The ns.</param>
            <param name="elementName">Name of the element.</param>
        </member>
        <member name="T:Songhay.Extensions.XNodeExtensions">
            <summary>
            Extensions of <see cref="T:System.Xml.Linq.XNode"/>.
            </summary>
        </member>
        <member name="M:Songhay.Extensions.XNodeExtensions.GetInnerXml(System.Xml.Linq.XNode)">
            <summary>
            Gets the inner XML.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Songhay.Extensions.XNodeExtensions.GetInnerXml(System.Xml.Linq.XNode,System.Boolean,System.Xml.Linq.ReaderOptions)">
            <summary>
            Gets the inner XML.
            </summary>
            <param name="node">The node.</param>
            <param name="stripNamespaces">if set to <c>true</c> then strip namespaces (<c>true</c> by default).</param>
            <param name="options">The options (<see cref="F:System.Xml.Linq.ReaderOptions.None"/> by default).</param>
            <remarks>
            “If performance is important (e.g. lots of XML, parsed frequently), I'd use Daniel's CreateReader method every time.”
            [http://stackoverflow.com/questions/3793/best-way-to-get-innerxml-of-an-xelement]
            —Luke Sampson
            </remarks>
        </member>
        <member name="M:Songhay.Extensions.XNodeExtensions.GetNamespaceResolver(System.Xml.Linq.XNode)">
            <summary>
            Gets <see cref="T:System.Xml.IXmlNamespaceResolver"/> from the specified node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Songhay.Extensions.XNodeExtensions.GetOuterXml(System.Xml.Linq.XNode)">
            <summary>
            Gets the outer XML.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Songhay.Extensions.XNodeExtensions.GetOuterXml(System.Xml.Linq.XNode,System.Boolean,System.Xml.Linq.ReaderOptions)">
            <summary>
            Gets the outer XML.
            </summary>
            <param name="node">The node.</param>
            <param name="stripNamespaces">if set to <c>true</c> then strip namespaces (<c>true</c> by default).</param>
            <param name="options">The options (<see cref="F:System.Xml.Linq.ReaderOptions.None"/> by default).</param>
        </member>
        <member name="T:Songhay.FuncSeed">
            <summary>
            Functor seeds
            </summary>
        </member>
        <member name="M:Songhay.FuncSeed.True``1">
            <summary>
            Predicate Functor for <c>true</c>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Songhay.FuncSeed.False``1">
            <summary>
            Predicate Functor for <c>false</c>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Songhay.Globalization.TextInfoUtility">
            <summary>
            Helper members for <see cref="T:System.Globalization.TextInfo" />.
            </summary>
        </member>
        <member name="M:Songhay.Globalization.TextInfoUtility.ToTitleCase(System.String)">
            <summary>
            Wraps <see cref="M:System.Globalization.TextInfo.ToTitleCase(System.String)"/>
            to add support for articles, conjunctions and prepositions.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="P:Songhay.Globalization.TextInfoUtility.EnglishWordsNotCapitalized">
            <summary>
            “A virtually complete list of English words that are are NOT capitalized in titles.”
            [http://www.cumbrowski.com/CarstenC/articles/20070623_Title_Capitalization_in_the_English_Language.asp]
            </summary>
        </member>
        <member name="T:Songhay.JsonSerializationUtility">
            <summary>
            static members for JSON serialization
            </summary>
        </member>
        <member name="M:Songhay.JsonSerializationUtility.GetConventionalResolver``1(System.Boolean)">
            <summary>
            Gets the conventional resolver.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <param name="useJavaScriptCase">if set to <c>true</c> [use java script case].</param>
            <returns></returns>
        </member>
        <member name="T:Songhay.MathUtility">
            <summary>
            Static helpers for Math.
            </summary>
        </member>
        <member name="M:Songhay.MathUtility.GetDigitInNumber(System.Int32,System.Int32)">
            <summary>
            Gets the digit in number.
            </summary>
            <param name="x">The x.</param>
            <param name="place">The place (from right to left).</param>
        </member>
        <member name="M:Songhay.MathUtility.GetMantissa(System.Double,System.Int32)">
            <summary>
            Gets the mantissa.
            </summary>
            <param name="x">The x.</param>
            <param name="round">The round.</param>
        </member>
        <member name="M:Songhay.MathUtility.TruncateNumber(System.Double)">
            <summary>
            Truncates the number.
            </summary>
            <param name="x">The x.</param>
            <remarks>
            Silverlight does not have <c>Math.Truncate()</c>.
            </remarks>
        </member>
        <member name="T:Songhay.Models.ActivitiesGetter">
            <summary>
            Defines the in-memory storage
            and getting of <see cref="T:Songhay.Models.IActivity"/> types.
            </summary>
        </member>
        <member name="M:Songhay.Models.ActivitiesGetter.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Models.ActivitiesGetter" /> class.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="P:Songhay.Models.ActivitiesGetter.Args">
            <summary>
            Gets the arguments.
            </summary>
            <value>
            The arguments.
            </value>
        </member>
        <member name="M:Songhay.Models.ActivitiesGetter.GetActivity">
            <summary>
            Gets the <see cref="T:Songhay.Models.IActivity"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Songhay.Models.ActivitiesGetter.GetActivity(System.String)">
            <summary>
            Gets the <see cref="T:Songhay.Models.IActivity"/>.
            </summary>
            <param name="activityName">Name of the <see cref="T:Songhay.Models.IActivity"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Models.ActivitiesGetter.LoadActivities(System.Collections.Generic.Dictionary{System.String,System.Lazy{Songhay.Models.IActivity}})">
            <summary>
            Loads the activities.
            </summary>
            <param name="activities">The activities.</param>
        </member>
        <member name="T:Songhay.Models.ActivityOutput`1">
            <summary>
            Defines the conventional output
            of <see cref="T:Songhay.Models.IActivityWithTask`2"/>
            </summary>
            <typeparam name="TOutput">The type of the output.</typeparam>
        </member>
        <member name="P:Songhay.Models.ActivityOutput`1.Output">
            <summary>
            Gets or sets the output.
            </summary>
            <value>
            The output.
            </value>
        </member>
        <member name="P:Songhay.Models.ActivityOutput`1.Log">
            <summary>
            Gets or sets the log.
            </summary>
            <value>
            The log.
            </value>
        </member>
        <member name="T:Songhay.Models.BackgroundWorkerUtilityData">
            <summary>
            Defines the meta-data
            for <see cref="T:Songhay.ComponentModel.BackgroundWorkerUtility"/>.
            </summary>
        </member>
        <member name="P:Songhay.Models.BackgroundWorkerUtilityData.Input">
            <summary>
            Gets or sets the input.
            </summary>
            <value>The input.</value>
        </member>
        <member name="P:Songhay.Models.BackgroundWorkerUtilityData.Output">
            <summary>
            Gets or sets the output.
            </summary>
            <value>The output.</value>
        </member>
        <member name="P:Songhay.Models.BackgroundWorkerUtilityData.Progress">
            <summary>
            Gets or sets the progress.
            </summary>
            <value>The progress.</value>
        </member>
        <member name="T:Songhay.Models.ColorDisplayItemModel">
            <summary>
            Model for color display
            </summary>
        </member>
        <member name="P:Songhay.Models.ColorDisplayItemModel.BackgroundHex">
            <summary>
            Gets or sets the background hexadecimal value.
            </summary>
            <value>The background hexadecimal value.</value>
        </member>
        <member name="P:Songhay.Models.ColorDisplayItemModel.ForegroundHex">
            <summary>
            Gets or sets the foreground hexadecimal value.
            </summary>
            <value>The foreground hexadecimal value.</value>
        </member>
        <member name="T:Songhay.Models.CorsOrigins">
            <summary>
            Defines selected CORS origins.
            </summary>
        </member>
        <member name="F:Songhay.Models.CorsOrigins.BRollPlayer">
            <summary>
            Uri <see cref="T:System.String"/> constant
            </summary>
        </member>
        <member name="F:Songhay.Models.CorsOrigins.BRollPlayerCom">
            <summary>
            Uri <see cref="T:System.String"/> constant
            </summary>
        </member>
        <member name="F:Songhay.Models.CorsOrigins.CodePenIO">
            <summary>
            Uri <see cref="T:System.String"/> constant
            </summary>
        </member>
        <member name="F:Songhay.Models.CorsOrigins.CommaDelimiter">
            <summary>
            The comma delimiter
            </summary>
        </member>
        <member name="F:Songhay.Models.CorsOrigins.InOurTerribleness">
            <summary>
            Uri <see cref="T:System.String"/> constant
            </summary>
        </member>
        <member name="F:Songhay.Models.CorsOrigins.InOurTerriblenessCom">
            <summary>
            Uri <see cref="T:System.String"/> constant
            </summary>
        </member>
        <member name="F:Songhay.Models.CorsOrigins.KinteSpaceAzure">
            <summary>
            Uri <see cref="T:System.String"/> constant
            </summary>
        </member>
        <member name="F:Songhay.Models.CorsOrigins.KinteSpaceCom">
            <summary>
            Uri <see cref="T:System.String"/> constant
            </summary>
        </member>
        <member name="F:Songhay.Models.CorsOrigins.SonghayBlog">
            <summary>
            Uri <see cref="T:System.String"/> constant
            </summary>
        </member>
        <member name="F:Songhay.Models.CorsOrigins.SonghayDashboard">
            <summary>
            Uri <see cref="T:System.String"/> constant
            </summary>
        </member>
        <member name="F:Songhay.Models.CorsOrigins.SonghaySystemCom">
            <summary>
            Uri <see cref="T:System.String"/> constant
            </summary>
        </member>
        <member name="F:Songhay.Models.CorsOrigins.StaticsCodePenIO">
            <summary>
            Uri <see cref="T:System.String"/> constant
            </summary>
        </member>
        <member name="F:Songhay.Models.CorsOrigins.WordWalkingStickCom">
            <summary>
            Uri <see cref="T:System.String"/> constant
            </summary>
        </member>
        <member name="T:Songhay.Models.DataParameterMetadata">
            <summary>
            A JSON.net-friendly definition for types implementing <see cref="T:System.Data.IDataParameter"/>.
            </summary>
        </member>
        <member name="M:Songhay.Models.DataParameterMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Models.DataParameterMetadata"/> class.
            </summary>
        </member>
        <member name="P:Songhay.Models.DataParameterMetadata.DataRowVersion">
            <summary>
            Gets or sets the data row version.
            </summary>
            <value>
            The data row version.
            </value>
        </member>
        <member name="P:Songhay.Models.DataParameterMetadata.DbType">
            <summary>
            Gets or sets the type of the database.
            </summary>
            <value>
            The type of the database.
            </value>
        </member>
        <member name="P:Songhay.Models.DataParameterMetadata.ParameterDirection">
            <summary>
            Gets or sets the parameter direction.
            </summary>
            <value>
            The parameter direction.
            </value>
        </member>
        <member name="P:Songhay.Models.DataParameterMetadata.ParameterName">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
            <value>
            The name of the parameter.
            </value>
        </member>
        <member name="P:Songhay.Models.DataParameterMetadata.ParameterValue">
            <summary>
            Gets or sets the parameter value.
            </summary>
            <value>
            The parameter value.
            </value>
        </member>
        <member name="P:Songhay.Models.DataParameterMetadata.SourceColumn">
            <summary>
            Gets or sets the source column.
            </summary>
            <value>
            The source column.
            </value>
        </member>
        <member name="T:Songhay.Models.DbmsMetadata">
            <summary>
            Defines DBMS metadata
            </summary>
        </member>
        <member name="P:Songhay.Models.DbmsMetadata.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>
            The connection string.
            </value>
        </member>
        <member name="P:Songhay.Models.DbmsMetadata.ConnectionStringKey">
            <summary>
            Gets or sets the connection string key.
            </summary>
            <value>
            The connection string key.
            </value>
        </member>
        <member name="P:Songhay.Models.DbmsMetadata.EncryptionMetadata">
            <summary>
            Gets or sets the encryption metadata.
            </summary>
            <value>
            The encryption metadata.
            </value>
        </member>
        <member name="P:Songhay.Models.DbmsMetadata.ProviderName">
            <summary>
            Gets or sets the name of the provider.
            </summary>
            <value>
            The name of the provider.
            </value>
        </member>
        <member name="M:Songhay.Models.DbmsMetadata.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Songhay.Models.DeploymentEnvironment">
            <summary>
            Defines the deployment environment
            </summary>
        </member>
        <member name="F:Songhay.Models.DeploymentEnvironment.ConfigurationKey">
            <summary>
            The configuration key
            </summary>
        </member>
        <member name="F:Songhay.Models.DeploymentEnvironment.ConfigurationKeyDelimiter">
            <summary>
            The configuration key delimiter
            </summary>
        </member>
        <member name="F:Songhay.Models.DeploymentEnvironment.DefaultTraceSourceNameConfigurationKey">
            <summary>
            The default trace source name configuration key
            </summary>
        </member>
        <member name="F:Songhay.Models.DeploymentEnvironment.DevelopmentEnvironmentName">
            <summary>
            The development environment name
            </summary>
        </member>
        <member name="F:Songhay.Models.DeploymentEnvironment.StagingEnvironmentName">
            <summary>
            The staging environment name
            </summary>
        </member>
        <member name="F:Songhay.Models.DeploymentEnvironment.ProductionEnvironmentName">
            <summary>
            The production environment name
            </summary>
        </member>
        <member name="T:Songhay.Models.DisplayItemModel">
            <summary>
            Model for display item
            </summary>
            <remarks>
            This class was originally developed
            to compensate for RIA Services not supporting composition
            of Entity Framework entities
            where an Entity is the property of another object.
            </remarks>
        </member>
        <member name="P:Songhay.Models.DisplayItemModel.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Songhay.Models.DisplayItemModel.DisplayText">
            <summary>
            Gets or sets the display text.
            </summary>
            <value>The display text.</value>
        </member>
        <member name="P:Songhay.Models.DisplayItemModel.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Songhay.Models.DisplayItemModel.ItemName">
            <summary>
            Gets or sets the item name.
            </summary>
            <value>The item name.</value>
        </member>
        <member name="P:Songhay.Models.DisplayItemModel.ResourceIndicator">
            <summary>
            Gets or sets the resource indicator.
            </summary>
            <value>
            The resource indicator.
            </value>
        </member>
        <member name="P:Songhay.Models.DisplayItemModel.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
            <value>
            The tag.
            </value>
        </member>
        <member name="P:Songhay.Models.DisplayItemModel.SortOrdinal">
            <summary>
            Gets or sets the sort ordinal.
            </summary>
            <value>The sort ordinal.</value>
        </member>
        <member name="P:Songhay.Models.DisplayItemModel.EndDate">
            <summary>
            End/expiration <see cref="T:System.DateTime"/> of the item.
            </summary>
        </member>
        <member name="P:Songhay.Models.DisplayItemModel.InceptDate">
            <summary>
            Origin <see cref="T:System.DateTime"/> of the item.
            </summary>
        </member>
        <member name="P:Songhay.Models.DisplayItemModel.ModificationDate">
            <summary>
            Modification/editorial <see cref="T:System.DateTime"/> of the item.
            </summary>
        </member>
        <member name="M:Songhay.Models.DisplayItemModel.ToString">
            <summary>
            Represents this instance as a <c>string</c>.
            </summary>
        </member>
        <member name="T:Songhay.Models.EditableObjectCache">
            <summary>
            Defines an undo pattern for MVVM.
            </summary>
        </member>
        <member name="P:Songhay.Models.EditableObjectCache.IsRestoringFromCache">
            <summary>
            Gets or sets a value indicating whether this instance is restoring from cache.
            </summary>
            <value>
            <c>true</c> if this instance is restoring from cache; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Songhay.Models.EditableObjectCache.Restore(System.Action)">
            <summary>
            Restores the specified action.
            </summary>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">action</exception>
        </member>
        <member name="T:Songhay.Models.EncryptionMetadata">
            <summary>
            Defines encryption metadata for persistent storage.
            </summary>
        </member>
        <member name="P:Songhay.Models.EncryptionMetadata.InitialVector">
            <summary>
            Gets or sets the initial vector.
            </summary>
            <value>
            The initial vector.
            </value>
        </member>
        <member name="P:Songhay.Models.EncryptionMetadata.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="T:Songhay.Models.HierarchicalNameValuePair">
            <summary>
            Defines hierarchical name-value pairs.
            </summary>
        </member>
        <member name="P:Songhay.Models.HierarchicalNameValuePair.NameValuePairs">
            <summary>
            Gets or sets the name value pairs.
            </summary>
            <value>The name value pairs.</value>
        </member>
        <member name="T:Songhay.Models.HttpMethods">
            <summary>
            Centralizes <see cref="T:System.Net.Http.HttpMethod"/> members as strings.
            </summary>
            <remarks>
            Reference: “HTTP request methods” [https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods]
            </remarks>
        </member>
        <member name="F:Songhay.Models.HttpMethods.DELETE">
            <summary>
            HTTP Method <c>DELETE</c>
            </summary>
        </member>
        <member name="F:Songhay.Models.HttpMethods.GET">
            <summary>
            HTTP Method <c>GET</c>
            </summary>
        </member>
        <member name="F:Songhay.Models.HttpMethods.HEAD">
            <summary>
            HTTP Method <c>HEAD</c>
            </summary>
        </member>
        <member name="F:Songhay.Models.HttpMethods.OPTIONS">
            <summary>
            HTTP Method <c>OPTIONS</c>
            </summary>
        </member>
        <member name="F:Songhay.Models.HttpMethods.POST">
            <summary>
            HTTP Method <c>POST</c>
            </summary>
        </member>
        <member name="F:Songhay.Models.HttpMethods.PUT">
            <summary>
            HTTP Method <c>PUT</c>
            </summary>
        </member>
        <member name="F:Songhay.Models.HttpMethods.TRACE">
            <summary>
            HTTP Method <c>TRACE</c>
            </summary>
        </member>
        <member name="T:Songhay.Models.IActivity">
            <summary>
            Defines an Activity in a shell environment.
            </summary>
            <remarks>
            For more detail, see “Songhay Shell Activities”
            [https://github.com/BryanWilhite/Songhay.HelloWorlds.Activities]
            </remarks>
        </member>
        <member name="M:Songhay.Models.IActivity.DisplayHelp(Songhay.Models.ProgramArgs)">
            <summary>
            Displays the help.
            </summary>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Models.IActivity.Start(Songhay.Models.ProgramArgs)">
            <summary>
            Starts with the specified arguments.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:Songhay.Models.IActivityConfigurationSupport">
            <summary>
            Defines <see cref="T:Microsoft.Extensions.Configuration.IConfigurationRoot"/> support
            for an <see cref="T:Songhay.Models.IActivity"/>.
            </summary>
        </member>
        <member name="M:Songhay.Models.IActivityConfigurationSupport.AddConfiguration(Microsoft.Extensions.Configuration.IConfigurationRoot)">
            <summary>
            Adds the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="T:Songhay.Models.IActivityWithOutput`2">
            <summary>
            Extends <see cref="T:Songhay.Models.IActivity" /> with output support.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <seealso cref="T:Songhay.Models.IActivity" />
        </member>
        <member name="M:Songhay.Models.IActivityWithOutput`2.StartAsync(`0)">
            <summary>
            Starts with the specified input
            and asynchronously returns <c>TResult</c>.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="T:Songhay.Models.IActivityWithTask">
            <summary>
            Extends <see cref="T:Songhay.Models.IActivity" /> with <see cref="T:System.Threading.Tasks.Task"/> support.
            </summary>
            <seealso cref="T:Songhay.Models.IActivity" />
            <remarks>
            For detail aound why this definition exists,
            see https://github.com/BryanWilhite/SonghayCore/issues/83
            </remarks>
        </member>
        <member name="M:Songhay.Models.IActivityWithTask.StartAsync">
            <summary>
            Starts the <see cref="T:Songhay.Models.IActivity"/> asynchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Songhay.Models.IActivityWithTask`1">
            <summary>
            Extends <see cref="T:Songhay.Models.IActivity" /> with <see cref="T:System.Threading.Tasks.Task"/> support.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <seealso cref="T:Songhay.Models.IActivity" />
            <remarks>
            For detail aound why this definition exists,
            see https://github.com/BryanWilhite/SonghayCore/issues/83
            </remarks>
        </member>
        <member name="M:Songhay.Models.IActivityWithTask`1.StartAsync(`0)">
            <summary>
            Starts the <see cref="T:Songhay.Models.IActivity" /> asynchronously.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="T:Songhay.Models.IActivityWithTaskOutput`1">
            <summary>
            Extends <see cref="T:Songhay.Models.IActivity" /> with <see cref="T:System.Threading.Tasks.Task"/> output support.
            </summary>
        </member>
        <member name="M:Songhay.Models.IActivityWithTaskOutput`1.StartAsync">
            <summary>
            Starts the <see cref="T:Songhay.Models.IActivity" /> asynchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Songhay.Models.IActivityWithTask`2">
            <summary>
            Extends <see cref="T:Songhay.Models.IActivity" /> with <see cref="T:System.Threading.Tasks.Task"/> support.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <seealso cref="T:Songhay.Models.IActivity" />
            <remarks>
            For detail aound why this definition exists,
            see https://github.com/BryanWilhite/SonghayCore/issues/83
            </remarks>
        </member>
        <member name="M:Songhay.Models.IActivityWithTask`2.StartAsync(`0)">
            <summary>
            Starts the <see cref="T:Songhay.Models.IActivity"/> asynchronously.
            </summary>
        </member>
        <member name="T:Songhay.Models.IColorable">
            <summary>
            Defines a colorable visual.
            </summary>
        </member>
        <member name="P:Songhay.Models.IColorable.BackgroundHex">
            <summary>
            Gets or sets the background hexadecimal value.
            </summary>
            <value>The background hexadecimal value.</value>
        </member>
        <member name="P:Songhay.Models.IColorable.ForegroundHex">
            <summary>
            Gets or sets the foreground hexadecimal value.
            </summary>
            <value>The foreground hexadecimal value.</value>
        </member>
        <member name="T:Songhay.Models.IControlInteractionMessage">
            <summary>
            Defines a Composition Message
            for a Control interaction event.
            </summary>
        </member>
        <member name="P:Songhay.Models.IControlInteractionMessage.ControlValue">
            <summary>
            Gets or sets the control value.
            </summary>
            <value>The control value.</value>
        </member>
        <member name="P:Songhay.Models.IControlInteractionMessage.ControlId">
            <summary>
            Gets or sets the control id.
            </summary>
            <value>The control id.</value>
        </member>
        <member name="P:Songhay.Models.IControlInteractionMessage.ControlTag">
            <summary>
            Gets or sets the control tag.
            </summary>
            <value>The control tag.</value>
        </member>
        <member name="T:Songhay.Models.IGroupable">
            <summary>
            Defines a group-able visual
            </summary>
        </member>
        <member name="P:Songhay.Models.IGroupable.GroupDisplayText">
            <summary>
            Display text of the Group
            </summary>
        </member>
        <member name="P:Songhay.Models.IGroupable.GroupId">
            <summary>
            Identifier of the Group
            </summary>
        </member>
        <member name="P:Songhay.Models.IGroupable.IsCollapsed">
            <summary>
            Returns `true` when group is visually collapsed
            </summary>
        </member>
        <member name="T:Songhay.Models.InterfaceContractResolver`1">
            <summary>
            JSON.NET Contract Resolver to serialize a type through another type
            (usually an interface).
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
        </member>
        <member name="M:Songhay.Models.InterfaceContractResolver`1.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.
            </summary>
            <param name="type">The type to create properties for.</param>
            <param name="memberSerialization">The member serialization mode for the type.</param>
            <returns>
            Properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.
            </returns>
        </member>
        <member name="T:Songhay.Models.InterfaceContractResolverWithCamelCasing`1">
            <summary>
            JSON.NET Contract Resolver to serialize a type through another type
            (usually an interface).
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
        </member>
        <member name="M:Songhay.Models.InterfaceContractResolverWithCamelCasing`1.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.
            </summary>
            <param name="type">The type to create properties for.</param>
            <param name="memberSerialization">The member serialization mode for the type.</param>
            <returns>
            Properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.
            </returns>
        </member>
        <member name="T:Songhay.Models.IProgramAssemblyInfo">
            <summary>
            Contract for <see cref="T:Songhay.Models.ProgramAssemblyInfo"/>
            </summary>
        </member>
        <member name="P:Songhay.Models.IProgramAssemblyInfo.AssemblyCompany">
            <summary>
            Gets the assembly company.
            </summary>
            <value>The assembly company.</value>
        </member>
        <member name="P:Songhay.Models.IProgramAssemblyInfo.AssemblyCopyright">
            <summary>
            Gets the assembly copyright.
            </summary>
            <value>The assembly copyright.</value>
        </member>
        <member name="P:Songhay.Models.IProgramAssemblyInfo.AssemblyDescription">
            <summary>
            Gets the assembly description.
            </summary>
            <value>The assembly description.</value>
        </member>
        <member name="P:Songhay.Models.IProgramAssemblyInfo.AssemblyProduct">
            <summary>
            Gets the assembly product.
            </summary>
            <value>The assembly product.</value>
        </member>
        <member name="P:Songhay.Models.IProgramAssemblyInfo.AssemblyTitle">
            <summary>
            Gets the assembly title.
            </summary>
            <value>The assembly title.</value>
        </member>
        <member name="P:Songhay.Models.IProgramAssemblyInfo.AssemblyVersion">
            <summary>
            Gets the assembly version.
            </summary>
            <value>The assembly version.</value>
        </member>
        <member name="P:Songhay.Models.IProgramAssemblyInfo.AssemblyVersionDetail">
            <summary>
            Gets the assembly version detail.
            </summary>
            <value>The assembly version detail.</value>
        </member>
        <member name="T:Songhay.Models.IRepository">
            <summary>
            Defines the repository pattern for an Entity.
            </summary>
            <remarks>
            Based on the NBlog repository by Chris Fulstow
            [https://github.com/ChrisFulstow/NBlog/blob/master/NBlog.Web/Application/Storage/IRepository.cs]
            </remarks>
        </member>
        <member name="M:Songhay.Models.IRepository.DeleteEntity``1(System.Object)">
            <summary>
            Deletes the entity.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="key">The key.</param>
        </member>
        <member name="M:Songhay.Models.IRepository.HasEntity``1(System.Object)">
            <summary>
            Determines whether the specified key has entity.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="key">The key.</param>
        </member>
        <member name="M:Songhay.Models.IRepository.LoadAll``1">
            <summary>
            Loads all.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:Songhay.Models.IRepository.LoadSingle``1(System.Object)">
            <summary>
            Loads the single.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="key">The key.</param>
        </member>
        <member name="M:Songhay.Models.IRepository.SaveEntity``1(``0)">
            <summary>
            Saves the entity.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="item">The item.</param>
        </member>
        <member name="T:Songhay.Models.ISelectable">
            <summary>
            Defines a selectable visual.
            </summary>
        </member>
        <member name="P:Songhay.Models.ISelectable.IsDefaultSelection">
            <summary>
            Gets or sets whether this is default selection.
            </summary>
            <value>
            This is default selection.
            </value>
        </member>
        <member name="P:Songhay.Models.ISelectable.IsEnabled">
            <summary>
            Gets or sets whether this is enabled.
            </summary>
            <value>
            This is enabled.
            </value>
        </member>
        <member name="P:Songhay.Models.ISelectable.IsSelected">
            <summary>
            Gets or sets whether this is selected.
            </summary>
            <value>
            <c>true</c> when this is selected.
            </value>
        </member>
        <member name="T:Songhay.Models.ISortable">
            <summary>
            Defines a sortable visual.
            </summary>
        </member>
        <member name="P:Songhay.Models.ISortable.SortOrdinal">
            <summary>
            Gets or sets the sort ordinal.
            </summary>
            <value>The sort ordinal.</value>
        </member>
        <member name="T:Songhay.Models.ISyndicatable">
            <summary>
            Specifies that a Model supports syndication.
            </summary>
        </member>
        <member name="M:Songhay.Models.ISyndicatable.GetSyndicationFeed">
            <summary>
            Gets the syndication feed.
            </summary>
        </member>
        <member name="M:Songhay.Models.ISyndicatable.GetSyndicationItem">
            <summary>
            Gets the syndication item.
            </summary>
        </member>
        <member name="T:Songhay.Models.ITemporal">
            <summary>
            Adds temporal properties to an item
            </summary>
        </member>
        <member name="P:Songhay.Models.ITemporal.EndDate">
            <summary>
            End/expiration <see cref="T:System.DateTime"/> of the item.
            </summary>
        </member>
        <member name="P:Songhay.Models.ITemporal.InceptDate">
            <summary>
            Origin <see cref="T:System.DateTime"/> of the item.
            </summary>
        </member>
        <member name="P:Songhay.Models.ITemporal.ModificationDate">
            <summary>
            Modification/editorial <see cref="T:System.DateTime"/> of the item.
            </summary>
        </member>
        <member name="T:Songhay.Models.LazyDisplayItem`1">
            <summary>
            Wraps a lazy-initialized object
            with meta-data for display.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Songhay.Models.LazyDisplayItem`1.DisplayName">
            <summary>
            Gets or sets the targetValues name.
            </summary>
            <value>The targetValues name.</value>
        </member>
        <member name="P:Songhay.Models.LazyDisplayItem`1.LazyItem">
            <summary>
            Gets or sets the lazy item.
            </summary>
            <value>The lazy item.</value>
        </member>
        <member name="P:Songhay.Models.LazyDisplayItem`1.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Songhay.Models.MenuDisplayItemModel">
            <summary>
            Defines a colorable, selectable menu item
            </summary>
        </member>
        <member name="M:Songhay.Models.MenuDisplayItemModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Models.MenuDisplayItemModel"/> class.
            </summary>
        </member>
        <member name="P:Songhay.Models.MenuDisplayItemModel.ChildItems">
            <summary>
            Gets or sets the child items.
            </summary>
            <value>
            The child items.
            </value>
        </member>
        <member name="P:Songhay.Models.MenuDisplayItemModel.GroupDisplayText">
            <summary>
            Display text of the Group
            </summary>
        </member>
        <member name="P:Songhay.Models.MenuDisplayItemModel.GroupId">
            <summary>
            Identifier of the Group
            </summary>
        </member>
        <member name="P:Songhay.Models.MenuDisplayItemModel.IsCollapsed">
            <summary>
            Returns `true` when group is visually collapsed
            </summary>
        </member>
        <member name="P:Songhay.Models.MenuDisplayItemModel.IsDefaultSelection">
            <summary>
            Gets or sets whether this is default selection.
            </summary>
            <value>
            This is default selection.
            </value>
        </member>
        <member name="P:Songhay.Models.MenuDisplayItemModel.IsEnabled">
            <summary>
            Gets or sets whether this is enabled.
            </summary>
            <value>
            This is enabled.
            </value>
        </member>
        <member name="P:Songhay.Models.MenuDisplayItemModel.IsSelected">
            <summary>
            Gets or sets whether this is selected.
            </summary>
            <value>
            <c>true</c> when this is selected.
            </value>
        </member>
        <member name="T:Songhay.Models.MimeTypes">
            <summary>
            Selected MIME types for this Studio
            </summary>
            <remarks>
            Multipurpose Internet Mail Extensions: https://tools.ietf.org/html/rfc6838
            See: https://www.iana.org/assignments/media-types/media-types.xhtml
            </remarks>
        </member>
        <member name="F:Songhay.Models.MimeTypes.ApplicationAtomXml">
            <summary>
            The application atom XML
            </summary>
        </member>
        <member name="F:Songhay.Models.MimeTypes.ApplicationFormUrlEncoded">
            <summary>
            The application form URL encoded
            </summary>
        </member>
        <member name="F:Songhay.Models.MimeTypes.ApplicationJson">
            <summary>
            The application json
            </summary>
        </member>
        <member name="F:Songhay.Models.MimeTypes.ApplicationOctetStream">
            <summary>
            The application octet stream
            </summary>
        </member>
        <member name="F:Songhay.Models.MimeTypes.ApplicationRssXml">
            <summary>
            The application RSS XML
            </summary>
        </member>
        <member name="F:Songhay.Models.MimeTypes.ApplicationVndMsFontObject">
            <summary>
            The application VND ms font object
            </summary>
        </member>
        <member name="F:Songhay.Models.MimeTypes.ApplicationXFontOtf">
            <summary>
            The application x font otf
            </summary>
        </member>
        <member name="F:Songhay.Models.MimeTypes.ApplicationXFontTtf">
            <summary>
            The application x font TTF
            </summary>
        </member>
        <member name="F:Songhay.Models.MimeTypes.ApplicationXFontWoff">
            <summary>
            The application x font woff
            </summary>
        </member>
        <member name="F:Songhay.Models.MimeTypes.ApplicationXml">
            <summary>
            The application XML
            </summary>
        </member>
        <member name="F:Songhay.Models.MimeTypes.ImageGif">
            <summary>
            The image GIF
            </summary>
        </member>
        <member name="F:Songhay.Models.MimeTypes.ImageJpeg">
            <summary>
            The image JPEG
            </summary>
        </member>
        <member name="F:Songhay.Models.MimeTypes.ImagePng">
            <summary>
            The image PNG
            </summary>
        </member>
        <member name="F:Songhay.Models.MimeTypes.ImageSvgXml">
            <summary>
            The image SVG XML
            </summary>
        </member>
        <member name="F:Songhay.Models.MimeTypes.ImageXIcon">
            <summary>
            The image x icon
            </summary>
        </member>
        <member name="F:Songhay.Models.MimeTypes.TextCss">
            <summary>
            The text CSS
            </summary>
        </member>
        <member name="F:Songhay.Models.MimeTypes.TextHtml">
            <summary>
            The text HTML
            </summary>
        </member>
        <member name="F:Songhay.Models.MimeTypes.TextJavascript">
            <summary>
            The text javascript
            </summary>
        </member>
        <member name="F:Songhay.Models.MimeTypes.TextPlain">
            <summary>
            The text plain
            </summary>
        </member>
        <member name="T:Songhay.Models.NameValuePair">
            <summary>
            Defines name-value pair.
            </summary>
            <remarks>
            Consider using the <see cref="T:System.Collections.Generic.KeyValuePair`2"/> structure
            (from .NET 2.0 onwards) before using this type.
            </remarks>
        </member>
        <member name="P:Songhay.Models.NameValuePair.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Songhay.Models.NameValuePair.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:Songhay.Models.NameValuePair.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Songhay.Models.OpenAuthorizationData">
            <summary>
            Defines Authorization Information for OAuth 1.0.
            </summary>
        </member>
        <member name="M:Songhay.Models.OpenAuthorizationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Models.OpenAuthorizationData"/> class.
            </summary>
        </member>
        <member name="M:Songhay.Models.OpenAuthorizationData.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Models.OpenAuthorizationData"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Songhay.Models.OpenAuthorizationData.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Models.OpenAuthorizationData" /> class.
            </summary>
            <param name="nonce">The nonce.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Songhay.Models.OpenAuthorizationData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Models.OpenAuthorizationData" /> class.
            </summary>
            <param name="nonce">The nonce.</param>
        </member>
        <member name="P:Songhay.Models.OpenAuthorizationData.ConsumerKey">
            <summary>
            Gets or sets the consumer key.
            </summary>
            <value>
            The consumer key.
            </value>
        </member>
        <member name="P:Songhay.Models.OpenAuthorizationData.ConsumerSecret">
            <summary>
            Gets or sets the consumer secret.
            </summary>
            <value>
            The consumer secret.
            </value>
        </member>
        <member name="P:Songhay.Models.OpenAuthorizationData.Nonce">
            <summary>
            Gets the nonce.
            </summary>
            <value>
            The nonce.
            </value>
        </member>
        <member name="P:Songhay.Models.OpenAuthorizationData.TimeStamp">
            <summary>
            Gets or sets the time stamp.
            </summary>
            <value>
            The time stamp.
            </value>
        </member>
        <member name="P:Songhay.Models.OpenAuthorizationData.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="P:Songhay.Models.OpenAuthorizationData.TokenSecret">
            <summary>
            Gets or sets the token secret.
            </summary>
            <value>
            The token secret.
            </value>
        </member>
        <member name="P:Songhay.Models.OpenAuthorizationData.SignatureMethod">
            <summary>
            Gets the signature method.
            </summary>
            <value>
            The signature method.
            </value>
        </member>
        <member name="P:Songhay.Models.OpenAuthorizationData.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="T:Songhay.Models.OpmlBody">
            <summary>
            Defines a managed representation of the OPML body element.
            </summary>
        </member>
        <member name="P:Songhay.Models.OpmlBody.Outlines">
            <summary>
            Gets or sets the outlines.
            </summary>
            <value>The outlines.</value>
        </member>
        <member name="T:Songhay.Models.OpmlDocument">
            <summary>
            Dave Winer, his Outline Processor Markup Language document format
            </summary>
            <remarks>
            “OPML an XML-based format that allows exchange of outline-structured information
            between applications running on different operating systems and environments.”
            http://www.opml.org/about
            </remarks>
        </member>
        <member name="F:Songhay.Models.OpmlDocument.rxOpmlSchema">
            <summary>
            The rx opml schema URI
            </summary>
        </member>
        <member name="M:Songhay.Models.OpmlDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Models.OpmlDocument"/> class.
            </summary>
        </member>
        <member name="P:Songhay.Models.OpmlDocument.XsiSchemaLocation">
            <summary>
            Gets or sets the schema location.
            </summary>
            <value>The schema location.</value>
        </member>
        <member name="P:Songhay.Models.OpmlDocument.Version">
            <summary>
            Gets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Songhay.Models.OpmlDocument.OpmlHead">
            <summary>
            Gets the OPML head element.
            </summary>
            <value>The OPML head element.</value>
        </member>
        <member name="P:Songhay.Models.OpmlDocument.OpmlBody">
            <summary>
            Gets the OPML body element.
            </summary>
            <value>The OPML body element.</value>
        </member>
        <member name="T:Songhay.Models.OpmlHead">
            <summary>
            Defines a managed representation of the OPML head element.
            </summary>
        </member>
        <member name="M:Songhay.Models.OpmlHead.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Models.OpmlHead"/> class.
            </summary>
        </member>
        <member name="P:Songhay.Models.OpmlHead.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Songhay.Models.OpmlHead.DateCreated">
            <summary>
            Gets or sets the date created.
            </summary>
            <value>The date created.</value>
        </member>
        <member name="P:Songhay.Models.OpmlHead.DateCreatedString">
            <summary>
            Gets the date created string.
            </summary>
            <value>The date created string.</value>
        </member>
        <member name="P:Songhay.Models.OpmlHead.DateModified">
            <summary>
            Gets or sets the date modified.
            </summary>
            <value>The date modified.</value>
        </member>
        <member name="P:Songhay.Models.OpmlHead.DateModifiedString">
            <summary>
            Gets the date created string.
            </summary>
            <value>The date created string.</value>
        </member>
        <member name="P:Songhay.Models.OpmlHead.OwnerName">
            <summary>
            Gets or sets the name of the owner.
            </summary>
            <value>The name of the owner.</value>
        </member>
        <member name="P:Songhay.Models.OpmlHead.OwnerEmail">
            <summary>
            Gets or sets the owner email.
            </summary>
            <value>The owner email.</value>
        </member>
        <member name="T:Songhay.Models.OpmlOutline">
            <summary>
            Defines a managed representation of the OPML outline element.
            </summary>
        </member>
        <member name="P:Songhay.Models.OpmlOutline.Category">
            <summary>
            Gets or sets the Category.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:Songhay.Models.OpmlOutline.Id">
            <summary>
            Gets or sets the ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:Songhay.Models.OpmlOutline.Outlines">
            <summary>
            Gets or sets the outlines.
            </summary>
            <value>The outlines.</value>
        </member>
        <member name="P:Songhay.Models.OpmlOutline.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Songhay.Models.OpmlOutline.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Songhay.Models.OpmlOutline.OutlineType">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Songhay.Models.OpmlOutline.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:Songhay.Models.OpmlOutline.XmlUrl">
            <summary>
            Gets or sets the XML URL.
            </summary>
            <value>The XML URL.</value>
        </member>
        <member name="T:Songhay.Models.PackedResource">
            <summary>
            Defines the meta-data of an Application resource.
            </summary>
        </member>
        <member name="P:Songhay.Models.PackedResource.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Songhay.Models.PackedResource.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Songhay.Models.PackedResource.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Songhay.Models.PackedResource`1">
            <summary>
            Defines the meta-data of an Application resource.
            </summary>
            <typeparam name="TResource">The type of the resource.</typeparam>
        </member>
        <member name="P:Songhay.Models.PackedResource`1.XamlString">
            <summary>
            Gets or sets the XAML string.
            </summary>
            <value>The XAML string.</value>
        </member>
        <member name="P:Songhay.Models.PackedResource`1.XamlObject">
            <summary>
            Gets or sets the XAML object.
            </summary>
            <value>The XAML object.</value>
        </member>
        <member name="T:Songhay.Models.PagedResult">
            <summary>
            Defines a paged set of data.
            </summary>
        </member>
        <member name="P:Songhay.Models.PagedResult.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
            <value>
            The metadata.
            </value>
        </member>
        <member name="P:Songhay.Models.PagedResult.PagedResultSet">
            <summary>
            Gets or sets the paged result set.
            </summary>
            <value>The paged result set.</value>
        </member>
        <member name="T:Songhay.Models.PagedResultMeta">
            <summary>
            Defines the metadata for a paged set of data.
            </summary>
        </member>
        <member name="P:Songhay.Models.PagedResultMeta.PageIndex">
            <summary>
            Gets or sets the index of the page.
            </summary>
            <value>The index of the page.</value>
        </member>
        <member name="P:Songhay.Models.PagedResultMeta.PageCount">
            <summary>
            Gets the page count.
            </summary>
            <value>The page count.</value>
        </member>
        <member name="P:Songhay.Models.PagedResultMeta.PageSize">
            <summary>
            Gets or sets the size of the page.
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="P:Songhay.Models.PagedResultMeta.TotalCount">
            <summary>
            Gets or sets the total count.
            </summary>
            <value>The total count.</value>
        </member>
        <member name="T:Songhay.Models.ProgramArgs">
            <summary>
            Defines conventional command-line arguments.
            </summary>
        </member>
        <member name="M:Songhay.Models.ProgramArgs.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Models.ProgramArgs"/> class.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="F:Songhay.Models.ProgramArgs.BasePath">
            <summary>
            The base-path argument.
            </summary>
        </member>
        <member name="F:Songhay.Models.ProgramArgs.BasePathRequired">
            <summary>
            The base path required argument.
            </summary>
        </member>
        <member name="F:Songhay.Models.ProgramArgs.Help">
            <summary>
            The help argument.
            </summary>
        </member>
        <member name="F:Songhay.Models.ProgramArgs.SettingsFile">
            <summary>
            The settings file argument.
            </summary>
        </member>
        <member name="P:Songhay.Models.ProgramArgs.Args">
            <summary>
            Gets the arguments.
            </summary>
            <value>
            The arguments.
            </value>
        </member>
        <member name="P:Songhay.Models.ProgramArgs.HelpSet">
            <summary>
            Gets the help set.
            </summary>
            <value>
            The help set.
            </value>
        </member>
        <member name="T:Songhay.Models.ProgramAssemblyInfo">
            <summary>
            Defines Assembly information.
            </summary>
            <remarks>
            This definition was developed
            for About… dialogs in Windows Forms.
            </remarks>
        </member>
        <member name="M:Songhay.Models.ProgramAssemblyInfo.#ctor(System.Reflection.Assembly)">
            <summary>
            Constructor of this class.
            </summary>
            <param name="targetAssembly">The target <see cref="T:System.Reflection.Assembly"/></param>
        </member>
        <member name="P:Songhay.Models.ProgramAssemblyInfo.AssemblyTitle">
            <summary>
            Gets title of assembly.
            </summary>
        </member>
        <member name="P:Songhay.Models.ProgramAssemblyInfo.AssemblyVersion">
            <summary>
            Gets Assembly version information.
            </summary>
        </member>
        <member name="P:Songhay.Models.ProgramAssemblyInfo.AssemblyVersionDetail">
            <summary>
            Gets detailed Assembly version information.
            </summary>
        </member>
        <member name="P:Songhay.Models.ProgramAssemblyInfo.AssemblyDescription">
            <summary>
            Gets Assembly description information.
            </summary>
        </member>
        <member name="P:Songhay.Models.ProgramAssemblyInfo.AssemblyProduct">
            <summary>
            Gets Assembly product information.
            </summary>
        </member>
        <member name="P:Songhay.Models.ProgramAssemblyInfo.AssemblyCopyright">
            <summary>
            Gets Assembly copyright information.
            </summary>
        </member>
        <member name="P:Songhay.Models.ProgramAssemblyInfo.AssemblyCompany">
            <summary>
            Gets Assembly company information.
            </summary>
        </member>
        <member name="M:Songhay.Models.ProgramAssemblyInfo.ToString">
            <summary>
            Returns format: <c>[AssemblyCompany], [AssemblyTitle] Version: [AssemblyVersion], [AssemblyVersionDetail]</c>.
            </summary>
        </member>
        <member name="T:Songhay.Models.ProgramGlyph">
            <summary>
            Defines a Unicode glyphic character
            </summary>
        </member>
        <member name="P:Songhay.Models.ProgramGlyph.UnicodePoint">
            <summary>
            Gets or sets the unicode point.
            </summary>
            <value>
            The unicode point.
            </value>
        </member>
        <member name="P:Songhay.Models.ProgramGlyph.UnicodeInteger">
            <summary>
            Gets or sets the unicode integer.
            </summary>
            <value>
            The unicode integer.
            </value>
        </member>
        <member name="P:Songhay.Models.ProgramGlyph.UnicodeGroup">
            <summary>
            Gets or sets the unicode group.
            </summary>
            <value>
            The unicode group.
            </value>
        </member>
        <member name="P:Songhay.Models.ProgramGlyph.UnicodeName">
            <summary>
            Gets or sets the name of the unicode.
            </summary>
            <value>
            The name of the unicode.
            </value>
        </member>
        <member name="P:Songhay.Models.ProgramGlyph.Character">
            <summary>
            Gets or sets the character, usually the Unicode Point.
            </summary>
            <value>
            The character.
            </value>
        </member>
        <member name="P:Songhay.Models.ProgramGlyph.Windows1252UrlEncoding">
            <summary>
            Gets or sets the windows1252 URL encoding.
            </summary>
            <value>
            The windows1252 URL encoding.
            </value>
        </member>
        <member name="P:Songhay.Models.ProgramGlyph.Utf8UrlEncoding">
            <summary>
            Gets or sets the UTF8 URL encoding.
            </summary>
            <value>
            The UTF8 URL encoding.
            </value>
        </member>
        <member name="P:Songhay.Models.ProgramGlyph.HtmlEntityName">
            <summary>
            Gets or sets the name of the HTML entity.
            </summary>
            <value>
            The name of the HTML entity.
            </value>
        </member>
        <member name="P:Songhay.Models.ProgramGlyph.XmlEntityNumber">
            <summary>
            Gets or sets the XML entity number.
            </summary>
            <value>
            The XML entity number.
            </value>
        </member>
        <member name="T:Songhay.Models.ProgramMetadata">
            <summary>
            Defines the conventional Program metadata.
            </summary>
        </member>
        <member name="P:Songhay.Models.ProgramMetadata.CloudStorageSet">
            <summary>
            Gets or sets the cloud storage set.
            </summary>
            <value>
            The cloud storage set.
            </value>
        </member>
        <member name="P:Songhay.Models.ProgramMetadata.DbmsSet">
            <summary>
            Gets or sets the DBMS set.
            </summary>
            <value>
            The DBMS set.
            </value>
        </member>
        <member name="P:Songhay.Models.ProgramMetadata.RestApiMetadataSet">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
            <summary>
            Gets or sets the REST API metadata set.
            </summary>
            <value>
            The API metadata set.
            </value>
        </member>
        <member name="M:Songhay.Models.ProgramMetadata.ToString">
            <summary>
            Represents this instance as a <c>string</c>.
            </summary>
        </member>
        <member name="T:Songhay.Models.RestApiMetadata">
            <summary>
            REST API Metadata
            </summary>
        </member>
        <member name="F:Songhay.Models.RestApiMetadata.ClaimsSetHeaderApiAuthorization">
            <summary>
            A convential name representing an API key
            to sent in the HTTP headers for authentication.
            </summary>
            <remarks>
            Usually <c>"headerAuthorization": "Authorization"</c>.
            
            See https://docs.microsoft.com/en-us/rest/api/azure/#request-header
            </remarks>
        </member>
        <member name="F:Songhay.Models.RestApiMetadata.ClaimsSetHeaderApiContentType">
            <summary>
            A convential name representing an API key
            to sent in the HTTP headers for authentication.
            </summary>
            <remarks>
            Usually <c>"headerContentType": "Content-Type"</c>.
            
            See https://docs.microsoft.com/en-us/rest/api/azure/#request-header
            </remarks>
        </member>
        <member name="F:Songhay.Models.RestApiMetadata.ClaimsSetHeaderApiKey">
            <summary>
            A convential name representing an API key
            to sent in the HTTP headers for authentication.
            </summary>
            <remarks>
            Usually <c>"headerKey": "X-ApiKey"</c>.
            </remarks>
        </member>
        <member name="P:Songhay.Models.RestApiMetadata.ApiBase">
            <summary>
            Gets or sets the API base.
            </summary>
            <value>
            The API base.
            </value>
        </member>
        <member name="P:Songhay.Models.RestApiMetadata.ApiKey">
            <summary>
            Gets or sets the API key.
            </summary>
            <value>
            The API key.
            </value>
        </member>
        <member name="P:Songhay.Models.RestApiMetadata.ClaimsSet">
            <summary>
            Gets or sets the claims set.
            </summary>
            <value>
            The claims set.
            </value>
        </member>
        <member name="P:Songhay.Models.RestApiMetadata.UriTemplates">
            <summary>
            Gets or sets the URI templates.
            </summary>
            <value>
            The URI templates.
            </value>
        </member>
        <member name="M:Songhay.Models.RestApiMetadata.ToString">
            <summary>
            Converts this instance into a <see cref="T:System.String"/> representation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Songhay.Models.RestPagingMetadata">
            <summary>
            REST Paging Metadata
            </summary>
        </member>
        <member name="P:Songhay.Models.RestPagingMetadata.ResultSetSize">
            <summary>
            Gets or sets the size of the result set.
            </summary>
            <value>
            The size of the result set.
            </value>
        </member>
        <member name="P:Songhay.Models.RestPagingMetadata.TotalSetSize">
            <summary>
            Gets or sets the total size of the set.
            </summary>
            <value>
            The total size of the set.
            </value>
        </member>
        <member name="P:Songhay.Models.RestPagingMetadata.StartPosition">
            <summary>
            Gets or sets the start position.
            </summary>
            <value>
            The start position.
            </value>
        </member>
        <member name="P:Songhay.Models.RestPagingMetadata.EndPosition">
            <summary>
            Gets or sets the end position.
            </summary>
            <value>
            The end position.
            </value>
        </member>
        <member name="P:Songhay.Models.RestPagingMetadata.FromDate">
            <summary>
            Gets or sets from date.
            </summary>
            <value>
            From date.
            </value>
        </member>
        <member name="P:Songhay.Models.RestPagingMetadata.ToDate">
            <summary>
            Gets or sets to date.
            </summary>
            <value>
            To date.
            </value>
        </member>
        <member name="P:Songhay.Models.RestPagingMetadata.NextUri">
            <summary>
            Gets or sets the next URI.
            </summary>
            <value>
            The next URI.
            </value>
        </member>
        <member name="P:Songhay.Models.RestPagingMetadata.PreviousUri">
            <summary>
            Gets or sets the previous URI.
            </summary>
            <value>
            The previous URI.
            </value>
        </member>
        <member name="M:Songhay.Models.RestPagingMetadata.ToShallowCopy">
            <summary>
            Returns the shallow copy from <see cref="M:System.Object.MemberwiseClone"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Songhay.Models.RestPagingMetadata.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Songhay.Models.SystemErrorCodes">
            <summary>
            Defines the error codes of Windows
            </summary>
            <remarks>
            See MSDN: https://msdn.microsoft.com/en-us/library/ms681382.aspx
            </remarks>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_ACCESS_DENIED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_ADAP_HDW_ERR">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_ALREADY_ASSIGNED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_ALREADY_EXISTS">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_ARENA_TRASHED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_ATOMIC_LOCKS_NOT_SUPPORTED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_AUTODATASEG_EXCEEDS_64k">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_BAD_ARGUMENTS">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_BAD_COMMAND">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_BAD_DEV_TYPE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_BAD_DRIVER_LEVEL">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_BAD_ENVIRONMENT">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_BAD_EXE_FORMAT">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_BAD_FILE_TYPE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_BAD_FORMAT">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_BAD_LENGTH">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_BAD_NET_NAME">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_BAD_NET_RESP">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_BAD_NETPATH">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_BAD_PATHNAME">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_BAD_PIPE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_BAD_REM_ADAP">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_BAD_THREADID_ADDR">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_BAD_UNIT">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_BROKEN_PIPE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_BUFFER_OVERFLOW">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_BUSY_DRIVE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_BUSY">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_CALL_NOT_IMPLEMENTED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_CANCEL_VIOLATION">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_CANNOT_COPY">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_CANNOT_MAKE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_CHECKOUT_REQUIRED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_CHILD_NOT_COMPLETE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_CRC">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_CURRENT_DIRECTORY">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_DELETE_PENDING">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_DEV_NOT_EXIST">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_DIR_NOT_EMPTY">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_DIR_NOT_ROOT">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_DIRECT_ACCESS_HANDLE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_DIRECTORY">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_DISCARDED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_DISK_CHANGE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_DISK_FULL">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_DISK_TOO_FRAGMENTED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_DRIVE_LOCKED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_DUP_NAME">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_DYNLINK_FROM_INVALID_RING">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_EA_FILE_CORRUPT">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_EA_LIST_INCONSISTENT">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_EA_TABLE_FULL">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_EAS_DIDNT_FIT">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_EAS_NOT_SUPPORTED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_ENVVAR_NOT_FOUND">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_EXCL_SEM_ALREADY_OWNED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_EXE_MACHINE_TYPE_MISMATCH">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_EXE_MARKED_INVALID">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_FAIL_I24">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_FAIL_NOACTION_REBOOT">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_FAIL_RESTART">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_FAIL_SHUTDOWN">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_FILE_CHECKED_OUT">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_FILE_EXISTS">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_FILE_NOT_FOUND">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_FILE_TOO_LARGE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_FILENAME_EXCED_RANGE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_FORMS_AUTH_REQUIRED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_GEN_FAILURE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_HANDLE_DISK_FULL">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_HANDLE_EOF">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INFLOOP_IN_RELOC_CHAIN">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INSUFFICIENT_BUFFER">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_ACCESS">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_ADDRESS">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_AT_INTERRUPT_TIME">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_BLOCK">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_CATEGORY">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_DATA">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_DRIVE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_EA_HANDLE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_EA_NAME">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_EVENT_COUNT">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_EXE_SIGNATURE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_FLAG_NUMBER">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_FUNCTION">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_HANDLE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_LEVEL">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_LIST_FORMAT">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_LOCK_RANGE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_MINALLOCSIZE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_MODULETYPE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_NAME">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_OPLOCK_PROTOCOL">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_ORDINAL">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_PARAMETER">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_PASSWORD">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_SEGDPL">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_SEGMENT_NUMBER">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_SIGNAL_NUMBER">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_STACKSEG">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_STARTING_CODESEG">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_TARGET_HANDLE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_INVALID_VERIFY_SWITCH">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_IOPL_NOT_ENABLED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_IS_JOIN_PATH">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_IS_JOIN_TARGET">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_IS_JOINED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_IS_SUBST_PATH">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_IS_SUBST_TARGET">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_IS_SUBSTED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_ITERATED_DATA_EXCEEDS_64k">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_JOIN_TO_JOIN">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_JOIN_TO_SUBST">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_LABEL_TOO_LONG">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_LOCK_FAILED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_LOCK_VIOLATION">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_LOCKED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_MAX_SESSIONS_REACHED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_MAX_THRDS_REACHED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_META_EXPANSION_TOO_LONG">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_MOD_NOT_FOUND">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_MORE_DATA">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_MR_MID_NOT_FOUND">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_NEGATIVE_SEEK">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_NESTING_NOT_ALLOWED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_NET_WRITE_FAULT">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_NETNAME_DELETED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_NETWORK_ACCESS_DENIED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_NETWORK_BUSY">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_NO_DATA">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_NO_MORE_FILES">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_NO_MORE_ITEMS">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_NO_MORE_SEARCH_HANDLES">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_NO_PROC_SLOTS">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_NO_SIGNAL_SENT">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_NO_SPOOL_SPACE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_NO_VOLUME_LABEL">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_NOT_DOS_DISK">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_NOT_ENOUGH_MEMORY">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_NOT_JOINED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_NOT_LOCKED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_NOT_OWNER">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_NOT_READY">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_NOT_SAME_DEVICE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_NOT_SUBSTED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_NOT_SUPPORTED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_NOTIFICATION_GUID_ALREADY_DEFINED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_OPEN_FAILED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_OPLOCK_NOT_GRANTED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_OUT_OF_PAPER">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_OUT_OF_STRUCTURES">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_OUTOFMEMORY">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_PARTIAL_COPY">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_PATH_BUSY">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_PATH_NOT_FOUND">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_PIPE_BUSY">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_PIPE_LOCAL">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_PIPE_NOT_CONNECTED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_PRINT_CANCELLED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_PRINTQ_FULL">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_PROC_NOT_FOUND">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_PROCESS_MODE_ALREADY_BACKGROUND">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_PROCESS_MODE_NOT_BACKGROUND">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_READ_FAULT">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_REDIR_PAUSED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_RELOC_CHAIN_XEEDS_SEGLIM">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_REM_NOT_LIST">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_REQ_NOT_ACCEP">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_RING2_STACK_IN_USE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_RING2SEG_MUST_BE_MOVABLE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_SAME_DRIVE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_SCOPE_NOT_FOUND">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_SECTOR_NOT_FOUND">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_SECURITY_STREAM_IS_INCONSISTENT">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_SEEK_ON_DEVICE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_SEEK">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_SEM_IS_SET">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_SEM_NOT_FOUND">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_SEM_OWNER_DIED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_SEM_TIMEOUT">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_SEM_USER_LIMIT">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_SHARING_BUFFER_EXCEEDED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_SHARING_PAUSED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_SHARING_VIOLATION">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_SIGNAL_PENDING">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_SIGNAL_REFUSED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_SUBST_TO_JOIN">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_SUBST_TO_SUBST">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_SUCCESS">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_SYSTEM_TRACE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_THREAD_1_INACTIVE">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_THREAD_MODE_ALREADY_BACKGROUND">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_THREAD_MODE_NOT_BACKGROUND">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_TOO_MANY_CMDS">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_TOO_MANY_MODULES">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_TOO_MANY_MUXWAITERS">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_TOO_MANY_NAMES">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_TOO_MANY_OPEN_FILES">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_TOO_MANY_POSTS">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_TOO_MANY_SEM_REQUESTS">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_TOO_MANY_SEMAPHORES">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_TOO_MANY_SESS">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_TOO_MANY_TCBS">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_UNEXP_NET_ERR">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_VC_DISCONNECTED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_VIRUS_DELETED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_VIRUS_INFECTED">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_WAIT_NO_CHILDREN">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_WRITE_FAULT">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_WRITE_PROTECT">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.ERROR_WRONG_DISK">
            <summary>
            System error code
            </summary>
        </member>
        <member name="F:Songhay.Models.SystemErrorCodes.WAIT_TIMEOUT">
            <summary>
            System error code
            </summary>
        </member>
        <member name="M:Songhay.Models.SystemErrorCodes.GetErrorMessage(System.Int32)">
            <summary>
            Gets the error message.
            </summary>
            <param name="ERR">The error.</param>
        </member>
        <member name="T:Songhay.Models.SystemVariable">
            <summary>
            Defines the Data for displaying meta-data about variables.
            </summary>
        </member>
        <member name="P:Songhay.Models.SystemVariable.VariableName">
            <summary>
            Gets or sets the name of the variable.
            </summary>
            <value>The name of the variable.</value>
        </member>
        <member name="P:Songhay.Models.SystemVariable.VariableDescription">
            <summary>
            Gets or sets the variable description.
            </summary>
            <value>The variable description.</value>
        </member>
        <member name="P:Songhay.Models.SystemVariable.VariableValue">
            <summary>
            Gets or sets the variable value.
            </summary>
            <value>The variable value.</value>
        </member>
        <member name="T:Songhay.Models.SystemVariable`1">
            <summary>
            Defines the Data for displaying meta-data about variables.
            </summary>
        </member>
        <member name="P:Songhay.Models.SystemVariable`1.VariableName">
            <summary>
            Gets or sets the name of the variable.
            </summary>
            <value>The name of the variable.</value>
        </member>
        <member name="P:Songhay.Models.SystemVariable`1.VariableDescription">
            <summary>
            Gets or sets the variable description.
            </summary>
            <value>The variable description.</value>
        </member>
        <member name="P:Songhay.Models.SystemVariable`1.VariableValue">
            <summary>
            Gets or sets the variable value.
            </summary>
            <value>The variable value.</value>
        </member>
        <member name="T:Songhay.Models.XEncoding">
            <summary>
            Defines selected text file encodings.
            </summary>
        </member>
        <member name="F:Songhay.Models.XEncoding.Windows1252">
            <summary>
            Text encoding
            </summary>
        </member>
        <member name="F:Songhay.Models.XEncoding.Iso88591">
            <summary>
            Text encoding
            </summary>
        </member>
        <member name="F:Songhay.Models.XEncoding.Utf08">
            <summary>
            Text encoding
            </summary>
        </member>
        <member name="F:Songhay.Models.XEncoding.Utf16">
            <summary>
            Text encoding
            </summary>
        </member>
        <member name="T:Songhay.Models.XhtmlDocument">
            <summary>
            Defines an XHTML Document.
            </summary>
        </member>
        <member name="P:Songhay.Models.XhtmlDocument.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:Songhay.Models.XhtmlDocument.Header">
            <summary>
            Gets or sets the header.
            </summary>
            <value>The header.</value>
        </member>
        <member name="P:Songhay.Models.XhtmlDocument.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:Songhay.Models.XhtmlDocuments">
            <summary>
            XHTML Documents
            </summary>
        </member>
        <member name="P:Songhay.Models.XhtmlDocuments.Documents">
            <summary>
            Gets or sets the documents.
            </summary>
            <value>The documents.</value>
        </member>
        <member name="P:Songhay.Models.XhtmlDocuments.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:Songhay.Models.XhtmlImage">
            <summary>
            Defines an image used by XHTML(5) clients
            </summary>
        </member>
        <member name="P:Songhay.Models.XhtmlImage.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="P:Songhay.Models.XhtmlImage.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:Songhay.Models.XhtmlImage.HeightInPixels">
            <summary>
            Gets or sets the height in pixels.
            </summary>
            <value>
            The height in pixels.
            </value>
        </member>
        <member name="P:Songhay.Models.XhtmlImage.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:Songhay.Models.XhtmlImage.WidthInPixels">
            <summary>
            Gets or sets the width in pixels.
            </summary>
            <value>
            The width in pixels.
            </value>
        </member>
        <member name="T:Songhay.Models.XObjectMetadata">
            <summary>
            <see cref="T:System.Xml.Linq.XObject"/> metadata
            </summary>
        </member>
        <member name="F:Songhay.Models.XObjectMetadata.SiteMapNamespace">
            <summary>
            The sitemaps.org namespace
            </summary>
        </member>
        <member name="P:Songhay.Models.XObjectMetadata.XhtmlDocTypeTransitional">
            <summary>
            DOCTYPE XHTML Transitional
            </summary>
        </member>
        <member name="T:Songhay.Net.SmtpUtility">
            <summary>
            SMTP Utility
            </summary>
        </member>
        <member name="M:Songhay.Net.SmtpUtility.GetAttachment(System.String)">
            <summary>
            Gets the attachment.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:Songhay.Net.SmtpUtility.GetAttachment(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the attachment.
            </summary>
            <param name="paths">The paths.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">The expected paths are not here</exception>
        </member>
        <member name="M:Songhay.Net.SmtpUtility.GetMailMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Returns <see cref="T:System.Net.Mail.MailMessage" />
            for an instance of <see cref="T:System.Net.Mail.SmtpClient" />
            </summary>
            <param name="from">the from email address</param>
            <param name="to">the to email address</param>
            <param name="subject">the email message subject</param>
            <param name="message">the email message</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Net.SmtpUtility.GetMailMessage(System.String,System.String,System.String,System.String,System.Collections.Generic.ICollection{System.Net.Mail.Attachment})">
            <summary>
            Returns <see cref="T:System.Net.Mail.MailMessage" />
            for an instance of <see cref="T:System.Net.Mail.SmtpClient" />
            </summary>
            <param name="from">the from email address</param>
            <param name="to">the to email address</param>
            <param name="subject">the email message subject</param>
            <param name="message">the email message</param>
            <param name="attachments">a collection of <see cref="T:System.Net.Mail.Attachment" /></param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Net.SmtpUtility.GetMailMessage(System.String,System.String,System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Returns <see cref="T:System.Net.Mail.MailMessage" />
            for an instance of <see cref="T:System.Net.Mail.SmtpClient" />
            </summary>
            <param name="from">the from email address</param>
            <param name="subject">the email message subject</param>
            <param name="message">the email message</param>
            <param name="recipients">a collection of recipients</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Net.SmtpUtility.GetMailMessage(System.String,System.String,System.String,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.Net.Mail.Attachment})">
            <summary>
            Returns <see cref="T:System.Net.Mail.MailMessage" />
            for an instance of <see cref="T:System.Net.Mail.SmtpClient" />
            </summary>
            <param name="from">the from email address</param>
            <param name="subject">the email message subject</param>
            <param name="message">the email message</param>
            <param name="recipients">a collection of recipients</param>
            <param name="attachments">a collection of <see cref="T:System.Net.Mail.Attachment" /></param>
            <returns></returns>
        </member>
        <member name="T:Songhay.Net.TimeoutHandler">
            <summary>
            Defines timeout and cancellation support
            for <see cref="T:System.Net.Http.HttpClient"/>.
            </summary>
            <seealso cref="T:System.Net.Http.DelegatingHandler" />
            <remarks>
            📖 see “Better timeout handling with HttpClient”
            by @thomaslevesque [ https://github.com/thomaslevesque ]
            [ https://thomaslevesque.com/2018/02/25/better-timeout-handling-with-httpclient/ ]
            
            </remarks>
        </member>
        <member name="P:Songhay.Net.TimeoutHandler.DefaultTimeout">
            <summary>
            Gets or sets the default timeout.
            </summary>
            <value>
            The default timeout.
            </value>
        </member>
        <member name="P:Songhay.Net.TimeoutHandler.RequestTimeout">
            <summary>
            Gets or sets the request timeout.
            </summary>
            <value>
            The request timeout.
            </value>
        </member>
        <member name="M:Songhay.Net.TimeoutHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Sends an HTTP request to the inner handler to send to the server as an asynchronous operation.
            </summary>
            <param name="request">The HTTP request message to send to the server.</param>
            <param name="cancellationToken">A cancellation token to cancel operation.</param>
            <returns>
            The task object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.TimeoutException"></exception>
        </member>
        <member name="T:Songhay.OpcReferencedTypeStrategy">
            <summary>
            Names the strategies to use
            to derive the Referenced Type
            in a Pack URI.
            </summary>
        </member>
        <member name="F:Songhay.OpcReferencedTypeStrategy.FromAssemblyFileName">
            <summary>
            Strategy Name
            </summary>
        </member>
        <member name="F:Songhay.OpcReferencedTypeStrategy.FromTypeFullName">
            <summary>
            Strategy Name
            </summary>
        </member>
        <member name="T:Songhay.OpcUtility">
            <summary>
            Static members for Open Packaging Conventions.
            </summary>
            <remarks>
                See http://blogs.msdn.com/b/opc/.
            </remarks>
        </member>
        <member name="M:Songhay.OpcUtility.GetPackUriFromType(System.Type,Songhay.OpcReferencedTypeStrategy)">
            <summary>
            Gets the Pack URI
            from the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type.</param>
            <param name="strategy">The strategy.</param>
            <remarks>
                The Pack URI we have is of the form:
            
                <c>pack://application:,,,/{ReferencedAssembly};component/Subfolder/{TypeName}.{Extension}</c>
            
            </remarks>
        </member>
        <member name="M:Songhay.OpcUtility.GetPackUriFromType(System.Type,Songhay.OpcReferencedTypeStrategy,System.String)">
            <summary>
            Gets the Pack URI
            from the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type.</param>
            <param name="strategy">The strategy.</param>
            <param name="extension">The extension (<c>xaml</c> by default).</param>
            <remarks>
                The Pack URI we have is of the form:
            
                <c>pack://application:,,,/{ReferencedAssembly};component/Subfolder/{TypeName}.{Extension}</c>
            
            </remarks>
        </member>
        <member name="M:Songhay.OpcUtility.GetReferencedAssembly(System.Type,Songhay.OpcReferencedTypeStrategy)">
            <summary>
            Gets the referenced assembly.
            </summary>
            <param name="type">The type.</param>
            <param name="strategy">The strategy.</param>
        </member>
        <member name="M:Songhay.OpcUtility.GetRelativePackUri(System.String)">
            <summary>
            Gets the relative pack URI.
            </summary>
            <param name="absoluteUri">The absolute URI.</param>
        </member>
        <member name="M:Songhay.OpcUtility.IsPackUriValid(System.String)">
            <summary>
            Returns <c>true</c> when the pack URI is valid.
            </summary>
            <param name="uri">The URI.</param>
            <remarks>
            For more detail, see:
                “Pack URIs in WPF” (http://msdn.microsoft.com/en-us/library/aa970069.aspx)
                “The "pack" URI Scheme” (http://tools.ietf.org/html/draft-shur-pack-uri-scheme-05)
            </remarks>
        </member>
        <member name="T:Songhay.ProgramAssemblyUtility">
            <summary>
            Static members related to <see cref="N:System.Reflection"/>.
            </summary>
        </member>
        <member name="M:Songhay.ProgramAssemblyUtility.GetAssemblyInfo(System.Reflection.Assembly)">
            <summary>
            Returns a <see cref="T:System.String"/>
            about the executing assembly.
            </summary>
            <param name="targetAssembly">
            The executing <see cref="T:System.Reflection.Assembly"/>.
            </param>
            <returns>Returns <see cref="T:System.String"/></returns>
        </member>
        <member name="M:Songhay.ProgramAssemblyUtility.GetAssemblyInfo(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.String"/>
            about the executing assembly.
            </summary>
            <param name="targetAssembly">
            The executing <see cref="T:System.Reflection.Assembly"/>.
            </param>
            <param name="useConsoleChars">
            When <c>true</c> selected “special” characters are formatted for the Windows Console.
            </param>
            <returns>Returns <see cref="T:System.String"/></returns>
        </member>
        <member name="M:Songhay.ProgramAssemblyUtility.GetPathFromAssembly(System.Reflection.Assembly)">
            <summary>
            Gets the directory name from assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">assembly</exception>
        </member>
        <member name="M:Songhay.ProgramAssemblyUtility.GetPathFromAssembly(System.Reflection.Assembly,System.String)">
            <summary>
            Gets the path from assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="fileSegment">The file segment.</param>
        </member>
        <member name="T:Songhay.ProgramFileUtility">
            <summary>
            A few static helper members
            for <see cref="N:System.IO"/>.
            </summary>
            <summary>
            A few static helper members
            for <see cref="N:System.IO"/>.
            </summary>
            <summary>
            A few static helper members
            for <see cref="N:System.IO"/>.
            </summary>
            <summary>
            A few static helper members
            for <see cref="N:System.IO"/>.
            </summary>
        </member>
        <member name="M:Songhay.ProgramFileUtility.ReadZipArchiveEntries(System.IO.FileInfo,System.Action{System.String})">
            <summary>
            Read zip archive entries.
            </summary>
            <param name="archiveInfo">The ZIP archive <see cref="T:System.IO.FileInfo"/>.</param>
            <param name="fileAction">The action to take per text file.</param>
            <remarks>
            Use <c>entriesProjector</c> for any filtering or sorting.
            </remarks>
        </member>
        <member name="M:Songhay.ProgramFileUtility.ReadZipArchiveEntries(System.IO.FileInfo,System.Action{System.String},System.Func{System.Collections.ObjectModel.ReadOnlyCollection{System.IO.Compression.ZipArchiveEntry},System.Collections.Generic.IEnumerable{System.IO.Compression.ZipArchiveEntry}})">
            <summary>
            Read zip archive entries.
            </summary>
            <param name="archiveInfo">The ZIP archive <see cref="T:System.IO.FileInfo"/>.</param>
            <param name="fileAction">The action to take per text file.</param>
            <param name="entriesProjector">The entries projector for LINQ filtering/sorting.</param>
            <remarks>
            Use <c>entriesProjector</c> for any filtering or sorting.
            </remarks>
        </member>
        <member name="M:Songhay.ProgramFileUtility.ReadZipArchiveEntriesByLine(System.IO.FileInfo,System.Action{System.Int32,System.String})">
            <summary>
            Read zip archive entries as strings, line by line.
            </summary>
            <param name="archiveInfo">The ZIP archive <see cref="T:System.IO.FileInfo"/>.</param>
            <param name="lineAction">The action to take per text file line.</param>
            <remarks>
            This member is designed for compressed text documents that are too large to load into memory.
            The <c>fileAction</c> includes the line number and the current line.
            </remarks>
        </member>
        <member name="M:Songhay.ProgramFileUtility.ReadZipArchiveEntriesByLine(System.IO.FileInfo,System.Action{System.Int32,System.String},System.Func{System.Collections.ObjectModel.ReadOnlyCollection{System.IO.Compression.ZipArchiveEntry},System.Collections.Generic.IEnumerable{System.IO.Compression.ZipArchiveEntry}})">
            <summary>
            Read zip archive entries as strings, line by line.
            </summary>
            <param name="archiveInfo">The ZIP archive <see cref="T:System.IO.FileInfo"/>.</param>
            <param name="lineAction">The action to take per text file line.</param>
            <param name="entriesProjector">The entries projector for LINQ filtering/sorting.</param>
            <remarks>
            This member is designed for compressed text documents that are too large to load into memory.
            The <c>fileAction</c> includes the line number and the current line.
            </remarks>
        </member>
        <member name="M:Songhay.ProgramFileUtility.UseZipArchive(System.IO.FileInfo,System.Action{System.IO.Compression.ZipArchive})">
            <summary>
            Centralizes the use of <see cref="T:System.IO.Compression.ZipArchive"/>
            in <see cref="F:System.IO.Compression.ZipArchiveMode.Read"/>.
            </summary>
            <param name="archiveInfo">The ZIP archive <see cref="T:System.IO.FileInfo"/>.</param>
            <param name="archiveAction">The action to take for the ZIP archive in use.</param>
        </member>
        <member name="M:Songhay.ProgramFileUtility.UseZipArchive(System.IO.FileInfo,System.Action{System.IO.Compression.ZipArchive},System.IO.Compression.ZipArchiveMode)">
            <summary>
            Centralizes the use of <see cref="T:System.IO.Compression.ZipArchive"/>
            </summary>
            <param name="archiveInfo">The ZIP archive <see cref="T:System.IO.FileInfo"/>.</param>
            <param name="archiveAction">The action to take for the ZIP archive in use.</param>
            <param name="zipArchiveMode">The <see cref="T:System.IO.Compression.ZipArchiveMode"/></param>
        </member>
        <member name="M:Songhay.ProgramFileUtility.UseZipArchiveEntries(System.IO.FileInfo,System.Action{System.Collections.ObjectModel.ReadOnlyCollection{System.IO.Compression.ZipArchiveEntry}})">
            <summary>
            Centralizes the use of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>.
            </summary>
            <param name="archiveInfo">The ZIP archive <see cref="T:System.IO.FileInfo"/>.</param>
            <param name="entriesAction">The action to take for ZIP archive entries.</param>
        </member>
        <member name="M:Songhay.ProgramFileUtility.UseZipArchiveEntries(System.IO.FileInfo,System.Action{System.Collections.ObjectModel.ReadOnlyCollection{System.IO.Compression.ZipArchiveEntry}},System.Func{System.Collections.ObjectModel.ReadOnlyCollection{System.IO.Compression.ZipArchiveEntry},System.Collections.Generic.IEnumerable{System.IO.Compression.ZipArchiveEntry}})">
            <summary>
            Centralizes the use of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>.
            </summary>
            <param name="archiveInfo">The ZIP archive <see cref="T:System.IO.FileInfo"/>.</param>
            <param name="entriesAction">The action to take for ZIP archive entries.</param>
            <param name="entriesProjector">The entries projector for LINQ filtering/sorting.</param>
        </member>
        <member name="M:Songhay.ProgramFileUtility.WriteZipArchiveEntry(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Write zip archive entry with <see cref="F:System.IO.Compression.CompressionLevel.Optimal"/>.
            </summary>
            <param name="archiveInfo">The ZIP archive <see cref="T:System.IO.FileInfo"/>.</param>
            <param name="fileInfo">The file information for writing the entry.</param>
        </member>
        <member name="M:Songhay.ProgramFileUtility.WriteZipArchiveEntry(System.IO.FileInfo,System.IO.FileInfo,System.IO.Compression.CompressionLevel)">
            <summary>
            Write zip archive entry.
            </summary>
            <param name="archiveInfo">The ZIP archive <see cref="T:System.IO.FileInfo"/>.</param>
            <param name="fileInfo">The file information for writing the entry.</param>
            <param name="compressionLevel">The <see cref="T:System.IO.Compression.CompressionLevel"/></param>
        </member>
        <member name="M:Songhay.ProgramFileUtility.GetEncodedString(System.String)">
            <summary>
            Gets the UTF-8 encoded string from.
            </summary>
            <param name="utf16Value">The raw value.</param>
        </member>
        <member name="M:Songhay.ProgramFileUtility.GetEncodedString(System.String,System.Text.Encoding)">
            <summary>
            Gets the encoded <see cref="T:System.String"/>
            from its default <see cref="P:System.Text.Encoding.Unicode"/> encoding.
            </summary>
            <param name="utf16Value">The raw value.</param>
            <param name="outputEncoding">The output encoding.</param>
            <remarks>
            <see cref="P:System.Text.Encoding.Unicode"/> encoding is the UTF-16
            encoding of strings in .NET.
            See: https://docs.microsoft.com/en-us/dotnet/api/system.text.unicodeencoding
            </remarks>
        </member>
        <member name="M:Songhay.ProgramFileUtility.GetFileName(System.String)">
            <summary>
            Returns the file name
            based on the specified path
            and <see cref="F:System.IO.Path.DirectorySeparatorChar"/>.
            </summary>
            <param name="pathWithFile">
            The specified path.
            </param>
        </member>
        <member name="M:Songhay.ProgramFileUtility.GetFileName(System.String,System.Nullable{System.Char})">
            <summary>
            Returns the file name
            based on the specified path.
            </summary>
            <param name="pathWithFile">
            The specified path.
            </param>
            <param name="pathDelimiter">
            Path delimiter (e.g. \ or /).
            </param>
        </member>
        <member name="M:Songhay.ProgramFileUtility.GetPathRoot(System.String)">
            <summary>
            Returns the directory root
            based on the specified path.
            </summary>
            <param name="pathWithFile">
            The specified path.
            </param>
        </member>
        <member name="M:Songhay.ProgramFileUtility.GetPathRoot(System.String,System.Nullable{System.Char})">
            <summary>
            Returns the directory root
            based on the specified path.
            </summary>
            <param name="pathWithFile">
            The specified path.
            </param>
            <param name="pathDelimiter">
            Path delimiter (e.g. \ or /).
            </param>
        </member>
        <member name="M:Songhay.ProgramFileUtility.JoinPathAndRoot(System.String,System.String)">
            <summary>
            Joins the path and root.
            </summary>
            <param name="path">The path.</param>
            <param name="root">The root.</param>
        </member>
        <member name="M:Songhay.ProgramFileUtility.JoinPathAndRoot(System.String,System.String,System.Nullable{System.Char})">
            <summary>
            Joins the path and root.
            </summary>
            <param name="path">The path.</param>
            <param name="root">The root.</param>
            <param name="pathDelimiter">
            Path delimiter (e.g. \ or /).
            </param>
        </member>
        <member name="M:Songhay.ProgramFileUtility.Write(System.String,System.String)">
            <summary>
            Writes the specified content to a file.
            </summary>
            <param name="content">The content to write or overwrite.</param>
            <param name="pathWithFile">The path to the file.</param>
        </member>
        <member name="M:Songhay.ProgramFileUtility.CountParentDirectoryChars(System.String)">
            <summary>
            Counts the parent directory chars.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
            <remarks>
            This method is useful when running <see cref="M:Songhay.ProgramFileUtility.GetParentDirectory(System.String,System.Int32)"/>.
            
            WARNING: call <see cref="M:Songhay.ProgramFileUtility.NormalizePath(System.String)"/> to prevent incorrectly returning <c>0</c>
            in cross-platform scenarios.
            </remarks>
        </member>
        <member name="M:Songhay.ProgramFileUtility.FindParentDirectory(System.String,System.String,System.Int32)">
            <summary>
            Finds the parent directory.
            </summary>
            <param name="path">The path.</param>
            <param name="parentName">Name of the parent.</param>
            <param name="levels">The levels.</param>
            <returns></returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The expected directory is not here.</exception>
        </member>
        <member name="M:Songhay.ProgramFileUtility.FindParentDirectoryInfo(System.String,System.String,System.Int32)">
            <summary>
            Finds the parent <see cref="T:System.IO.DirectoryInfo"/>.
            </summary>
            <param name="path">The path.</param>
            <param name="parentName">Name of the parent.</param>
            <param name="levels">The levels.</param>
            <returns></returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The expected directory is not here.</exception>
        </member>
        <member name="M:Songhay.ProgramFileUtility.GetCombinedPath(System.String,System.String)">
            <summary>Combines path and root based
            on the ambient value of <see cref="F:System.IO.Path.DirectorySeparatorChar"/>
            of the current OS.</summary>
            <param name="root">The root.</param>
            <param name="path">The path.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">The expected root path is not here.
            or
            The expected path is not here.</exception>
            <remarks>
            For detail, see:
            📚 https://github.com/BryanWilhite/SonghayCore/issues/14
            📚 https://github.com/BryanWilhite/SonghayCore/issues/32
            📚 https://github.com/BryanWilhite/SonghayCore/issues/97
            </remarks>
        </member>
        <member name="M:Songhay.ProgramFileUtility.GetCombinedPath(System.String,System.String,System.Boolean)">
            <summary>Combines path and root based
            on the ambient value of <see cref="F:System.IO.Path.DirectorySeparatorChar"/>
            of the current OS.</summary>
            <param name="root">The root.</param>
            <param name="path">The path.</param>
            <param name="fileIsExpected">
            when <c>true</c> will throw <see cref="T:System.IO.FileNotFoundException"/>
            when combined path is not of a file; otherwise
            will throw <see cref="T:System.IO.DirectoryNotFoundException"/>
            when combined path is not a directory
            </param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">The expected root path is not here.
            or
            The expected path is not here.</exception>
            <exception cref="T:System.IO.FileNotFoundException">see documentation for <c>fileIsExpected</c> parameter</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">see documentation for <c>fileIsExpected</c> parameter</exception>
            <remarks>
            For detail, see:
            📚 https://github.com/BryanWilhite/SonghayCore/issues/14
            📚 https://github.com/BryanWilhite/SonghayCore/issues/32
            📚 https://github.com/BryanWilhite/SonghayCore/issues/97
            </remarks>
        </member>
        <member name="M:Songhay.ProgramFileUtility.GetParentDirectory(System.String,System.Int32)">
            <summary>
            Gets the parent directory.
            </summary>
            <param name="path">The path.</param>
            <param name="levels">The levels.</param>
            <returns></returns>
            <remarks>
            A recursive wrapper for <see cref="M:System.IO.Directory.GetParent(System.String)"/>.
            </remarks>
        </member>
        <member name="M:Songhay.ProgramFileUtility.GetParentDirectoryInfo(System.String,System.Int32)">
            <summary>
            Gets the parent <see cref="T:System.IO.DirectoryInfo"/>.
            </summary>
            <param name="path">The path.</param>
            <param name="levels">The levels.</param>
            <returns></returns>
            <remarks>
            A recursive wrapper for <see cref="M:System.IO.Directory.GetParent(System.String)"/>.
            </remarks>
        </member>
        <member name="M:Songhay.ProgramFileUtility.GetRelativePath(System.String)">
            <summary>
            Gets the relative path from the specified file segment
            without leading dots (<c>.</c>) or <see cref="F:System.IO.Path.DirectorySeparatorChar" /> chars.
            </summary>
            <param name="fileSegment">The file segment.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">fileSegment</exception>
            <remarks>
            This method is the equivalent of calling:
             * <see cref="M:Songhay.ProgramFileUtility.TrimLeadingDirectorySeparatorChars(System.String)"/>
             * <see cref="M:Songhay.ProgramFileUtility.NormalizePath(System.String)"/>
             * <see cref="M:Songhay.ProgramFileUtility.RemoveBackslashPrefixes(System.String)"/>
             * <see cref="M:Songhay.ProgramFileUtility.RemoveForwardslashPrefixes(System.String)"/>
            </remarks>
        </member>
        <member name="M:Songhay.ProgramFileUtility.IsForwardSlashSystem">
            <summary>
            Returns <c>true</c> when the current OS
            uses forward-slash (<c>/</c>) paths or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Songhay.ProgramFileUtility.NormalizePath(System.String)">
            <summary>
            Normalizes the specified path with respect
            to the ambient value of <see cref="F:System.IO.Path.DirectorySeparatorChar"/>.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Songhay.ProgramFileUtility.RemoveBackslashPrefixes(System.String)">
            <summary>
            Removes conventional Directory prefixes
            for relative paths, e.g. <c>..\</c> or <c>.\</c>
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Songhay.ProgramFileUtility.RemoveConventionalPrefixes(System.String)">
            <summary>
            Removes conventional Directory prefixes
            for relative paths based on the ambient value\
            of <see cref="F:System.IO.Path.DirectorySeparatorChar"/>.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Songhay.ProgramFileUtility.RemoveForwardslashPrefixes(System.String)">
            <summary>
            Removes conventional Directory prefixes
            for relative paths, e.g. <c>../</c> or <c>./</c>.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Songhay.ProgramFileUtility.TrimLeadingDirectorySeparatorChars(System.String)">
            <summary>
            Trims the leading directory separator chars.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
            <remarks>
            Trims leading <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/> and/or <see cref="F:System.IO.Path.DirectorySeparatorChar"/>,
            formatting relative paths for <see cref="M:System.IO.Path.Combine(System.String,System.String)"/>.
            </remarks>
        </member>
        <member name="T:Songhay.ProgramTypeUtility">
            <summary>
            Static members for type handling.
            </summary>
            <summary>
            Static members for type handling.
            </summary>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ParseBoolean(System.Object)">
            <summary>
            Tries to convert the specified value
            to the <see cref="T:System.Nullable"></see> return type.
            </summary>
            <param name="value">
            The specified <see cref="T:System.Object"></see> box.
            </param>
            <returns>
            Always returns a <see cref="T:System.Nullable"></see>
            as parse failure means <c>HasValue</c>
            is false.
            </returns>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ParseBoolean(System.Object,System.Boolean)">
            <summary>
            Tries to convert the specified value
            to the <see cref="T:System.Nullable"/> return type.
            </summary>
            <param name="value">
            The specified <see cref="T:System.Object"/> box.
            </param>
            <param name="supportBitStrings">
            When <c>true</c>, support "1" and "0"
            as Boolean strings.
            </param>
            <returns>
            Always returns a <see cref="T:System.Nullable"/>
            as parse failure means <c>HasValue</c>
            is false.
            </returns>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ParseBoolean(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Tries to convert the specified value
            to the <see cref="T:System.Nullable"/> return type.
            </summary>
            <param name="value">
            The specified <see cref="T:System.Object"/> box.
            </param>
            <param name="supportBitStrings">
            When <c>true</c>, support "1" and "0"
            as Boolean strings.
            </param>
            <param name="defaultValue">
            The default value to return when <c>Nullable.HasValue == false</c>.
            </param>
            <returns>
            Always returns a <see cref="T:System.Nullable"/>
            as parse failure means <c>HasValue</c>
            is false.
            </returns>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ParseByte(System.Object)">
            <summary>
            Tries to convert the specified value
            to the <see cref="T:System.Nullable"/> return type.
            </summary>
            <param name="value">
            The specified <see cref="T:System.Object"/> box.
            </param>
            <returns>
            Always returns a <see cref="T:System.Nullable"/>
            as parse failure means <c>HasValue</c>
            is false.
            </returns>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ParseByte(System.Object,System.Byte)">
            <summary>
            Tries to convert the specified value
            to the <see cref="T:System.Nullable"/> return type.
            </summary>
            <param name="value">
            The specified <see cref="T:System.Object"/> box.
            </param>
            <param name="defaultValue">
            The default value to return when <c>Nullable.HasValue == false</c>.
            </param>
            <returns>
            Always returns a <see cref="T:System.Nullable"/>
            as parse failure means <c>HasValue</c>
            is false.
            </returns>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ParseDateTime(System.Object)">
            <summary>
            Tries to convert the specified value
            to the <see cref="T:System.Nullable"/> return type.
            </summary>
            <param name="value">
            The specified <see cref="T:System.Object"/> box.
            </param>
            <returns>
            Always returns a <see cref="T:System.Nullable"/>
            as parse failure means <c>HasValue</c>
            is false.
            </returns>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ParseDateTime(System.Object,System.DateTime)">
            <summary>
            Tries to convert the specified value
            to the <see cref="T:System.Nullable"/> return type.
            </summary>
            <param name="value">
            The specified <see cref="T:System.Object"/> box.
            </param>
            <param name="defaultValue">
            The default value to return when <c>Nullable.HasValue == false</c>.
            </param>
            <returns>
            Always returns a <see cref="T:System.Nullable"/>
            as parse failure means <c>HasValue</c>
            is false.
            </returns>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ParseDateTimeWithFormat(System.Object,System.String)">
            <summary>
            Tries to convert the specified value
            to the <see cref="T:System.Nullable"/> return type.
            </summary>
            <param name="value">
            The specified <see cref="T:System.Object"/> box.
            </param>
            <param name="formatExpression">
            The string format expression.
            </param>
            <returns>
            Always returns a <see cref="T:System.Nullable"/>
            as parse failure means <c>HasValue</c>
            is false.
            </returns>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ParseDateTimeWithFormat(System.Object,System.String,System.String)">
            <summary>
            Tries to convert the specified value
            to the <see cref="T:System.Nullable"/> return type.
            </summary>
            <param name="value">
            The specified <see cref="T:System.Object"/> box.
            </param>
            <param name="formatExpression">
            The string format expression.
            </param>
            <param name="defaultValue">
            The default value to return when <c>Nullable.HasValue == false</c>.
            </param>
            <returns>
            Always returns a <see cref="T:System.Nullable"/>
            as parse failure means <c>HasValue</c>
            is false.
            </returns>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ParseDecimal(System.Object)">
            <summary>
            Tries to convert the specified value
            to the <see cref="T:System.Nullable"/> return type.
            </summary>
            <param name="value">
            The specified <see cref="T:System.Object"/> box.
            </param>
            <returns>
            Always returns a <see cref="T:System.Nullable"/>
            as parse failure means <c>HasValue</c>
            is false.
            </returns>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ParseDecimal(System.Object,System.Decimal)">
            <summary>
            Tries to convert the specified value
            to the <see cref="T:System.Nullable"/> return type.
            </summary>
            <param name="value">
            The specified <see cref="T:System.Object"/> box.
            </param>
            <param name="defaultValue">
            The default value to return when <c>Nullable.HasValue == false</c>.
            </param>
            <returns>
            Always returns a <see cref="T:System.Nullable"/>
            as parse failure means <c>HasValue</c>
            is false.
            </returns>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ParseDouble(System.Object)">
            <summary>
            Tries to convert the specified value
            to the <see cref="T:System.Nullable"/> return type.
            </summary>
            <param name="value">
            The specified <see cref="T:System.Object"/> box.
            </param>
            <returns>
            Always returns a <see cref="T:System.Nullable"/>
            as parse failure means <c>HasValue</c>
            is false.
            </returns>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ParseDouble(System.Object,System.Double)">
            <summary>
            Tries to convert the specified value
            to the <see cref="T:System.Nullable"/> return type.
            </summary>
            <param name="value">
            The specified <see cref="T:System.Object"/> box.
            </param>
            <param name="defaultValue">
            The default value to return when <c>Nullable.HasValue == false</c>.
            </param>
            <returns>
            Always returns a <see cref="T:System.Nullable"/>
            as parse failure means <c>HasValue</c>
            is false.
            </returns>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ParseEnum``1(System.String,``0)">
            <summary>
            Tries to convert the specified value
            to the <see cref="T:System.Enum"/> return type.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
            <remarks>
            For background, see http://stackoverflow.com/a/15017429/22944
            </remarks>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ParseInt16(System.Object)">
            <summary>
            Tries to convert the specified value
            to the <see cref="T:System.Nullable"/> return type.
            </summary>
            <param name="value">
            The specified <see cref="T:System.Object"/> box.
            </param>
            <returns>
            Always returns a <see cref="T:System.Nullable"/>
            as parse failure means <c>HasValue</c>
            is false.
            </returns>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ParseInt16(System.Object,System.Int16)">
            <summary>
            Tries to convert the specified value
            to the <see cref="T:System.Nullable"/> return type.
            </summary>
            <param name="value">
            The specified <see cref="T:System.Object"/> box.
            </param>
            <param name="defaultValue">
            The default value to return when <c>Nullable.HasValue == false</c>.
            </param>
            <returns>
            Always returns a <see cref="T:System.Nullable"/>
            as parse failure means <c>HasValue</c>
            is false.
            </returns>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ParseInt32(System.Object)">
            <summary>
            Tries to convert the specified value
            to the <see cref="T:System.Nullable"/> return type.
            </summary>
            <param name="value">
            The specified <see cref="T:System.Object"/> box.
            </param>
            <returns>
            Always returns a <see cref="T:System.Nullable"/>
            as parse failure means <c>HasValue</c>
            is false.
            </returns>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ParseInt32(System.Object,System.Int32)">
            <summary>
            Tries to convert the specified value
            to the <see cref="T:System.Nullable"/> return type.
            </summary>
            <param name="value">
            The specified <see cref="T:System.Object"/> box.
            </param>
            <param name="defaultValue">
            The default value to return when <c>Nullable.HasValue == false</c>.
            </param>
            <returns>
            Always returns a <see cref="T:System.Nullable"/>
            as parse failure means <c>HasValue</c>
            is false.
            </returns>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ParseInt64(System.Object)">
            <summary>
            Tries to convert the specified value
            to the <see cref="T:System.Nullable"/> return type.
            </summary>
            <param name="value">
            The specified <see cref="T:System.Object"/> box.
            </param>
            <returns>
            Always returns a <see cref="T:System.Nullable"/>
            as parse failure means <c>HasValue</c>
            is false.
            </returns>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ParseInt64(System.Object,System.Int64)">
            <summary>
            Tries to convert the specified value
            to the <see cref="T:System.Nullable"/> return type.
            </summary>
            <param name="value">
            The specified <see cref="T:System.Object"/> box.
            </param>
            <param name="defaultValue">
            The default value to return when <c>Nullable.HasValue == false</c>.
            </param>
            <returns>
            Always returns a <see cref="T:System.Nullable"/>
            as parse failure means <c>HasValue</c>
            is false.
            </returns>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ParseRfc3339DateTime(System.String)">
            <summary>
            Parses the RFC3339 date and time.
            </summary>
            <param name="value">The value.</param>
            <remarks>
                This member is based on patterns in the Argotic Syndication Framework (http://www.codeplex.com/Argotic).
            </remarks>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ParseRfc822DateTime(System.String)">
            <summary>
            Parses the RFC822 date and time.
            </summary>
            <param name="value">The value.</param>
            <remarks>
                This member is based on patterns in the Argotic Syndication Framework (http://www.codeplex.com/Argotic).
            </remarks>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ParseString(System.Object)">
            <summary>
            Tries to convert the specified value
            to a <see cref="T:System.String"/>.
            </summary>
            <param name="value">
            The specified <see cref="T:System.Object"/> box.
            </param>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ParseString(System.Object,System.String)">
            <summary>
            Tries to convert the specified value
            to a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.TryParseRfc3339DateTime(System.String,System.DateTime@)">
            <summary>
            Tries the parse RFC3339 date and time.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
            <remarks>
                This member is based on patterns in the Argotic Syndication Framework (http://www.codeplex.com/Argotic).
            </remarks>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.TryParseRfc822DateTime(System.String,System.DateTime@)">
            <summary>
            Tries the parse RFC822 date and time.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
            <remarks>
                This member is based on patterns in the Argotic Syndication Framework (http://www.codeplex.com/Argotic).
            </remarks>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ConvertDateTimeFromUnixTime(System.Double)">
            <summary>
            Converts Unix time stamps
            to <see cref="T:System.DateTime"/>.
            </summary>
            <param name="time">A <see cref="T:System.Double"/>.</param>
            <returns>A <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ConvertDateTimeToRfc3339DateTime(System.DateTime)">
            <summary>
            Converts the specified <see cref="T:System.DateTime"/> to RFC3339.
            </summary>
            <param name="utcDateTime">The UTC date and time.</param>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ConvertDateTimeToRfc822DateTime(System.DateTime)">
            <summary>
            /// Converts the specified <see cref="T:System.DateTime"/> to RFC822.
            </summary>
            <param name="dateTime">The date and time.</param>
            <remarks>
            “Shortcomings of OPML… The RFC 822 date format is considered obsolete,
            and amongst other things permits the representation of years as two digits.
            (RFC 822 has been superseded by RFC 2822.)
            In general, date and time formats should be represented according to RFC 3339.”
            http://www.answers.com/topic/opml
            </remarks>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ConvertDateTimeToUnixTime">
            <summary>
            Converts the current time
            to a Unix time stamp.
            </summary>
            <returns>A <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ConvertDateTimeToUnixTime(System.DateTime)">
            <summary>
            Converts a <see cref="T:System.DateTime"/>
            to a Unix time stamp.
            </summary>
            <param name="dateValue">The <see cref="T:System.DateTime"/>.</param>
            <returns>A <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ConvertDateTimeToUtc(System.DateTime)">
            <summary>
            Converts a <see cref="T:System.DateTime"/>
            to UTC (ISO 8601).
            </summary>
            <param name="dateValue">The <see cref="T:System.DateTime"/>.</param>
            <remarks>
            For detail, see https://stackoverflow.com/a/1728437/22944
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ConvertInchesToPoints(System.Single)">
            <summary>
            Converts inches as a <see cref="T:System.Single"/>
            to points.
            </summary>
            <param name="inches">The inches.</param>
            <remarks>
            1 point = 0.013837 inch
            </remarks>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.ConvertPointsToInches(System.Single)">
            <summary>
            Converts points as a <see cref="T:System.Single"/>
            to inches.
            </summary>
            <param name="points">The points.</param>
            <remarks>
            1 point = 0.013837 inch
            </remarks>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.GenerateRandomPassword(System.Int32)">
            <summary>
            Generates the random password.
            </summary>
            <param name="passwordLength">Length of the password.</param>
            <remarks>
            See “Generate random password in C#” by Mads Kristensen
            [http://madskristensen.net/post/Generate-random-password-in-C]
            </remarks>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.GetDeepClone``1(``0)">
            <summary>
            Gets the deep clone.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The obj.</param>
            <remarks>
            See “How do you do a deep copy an object in .Net (C# specifically)?”
            [http://stackoverflow.com/questions/129389/how-do-you-do-a-deep-copy-an-object-in-net-c-specifically]
            See “Shallow Copy vs. Deep Copy in .NET”
            [http://www.codeproject.com/Articles/28952/Shallow-Copy-vs-Deep-Copy-in-NET]
            </remarks>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.IsNullOrEmptyString(System.Object)">
            <summary>
            Returns <c>true</c> when the specified value
            is <c>null</c> or <see cref="F:System.String.Empty"/>.
            </summary>
            <param name="boxedString">The framework value.</param>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.IsNullOrEmptyOrNotArray(System.Object)">
            <summary>
            Returns <c>true</c> when the specified value
            is an empty array, not an array or null.
            </summary>
            <param name="boxedArray">The specified value.</param>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.SetProperties``2(``0,``1)">
            <summary>
            Sets the properties of the output <see cref="T:System.Type" />.
            </summary>
            <typeparam name="TIn">The type of the in.</typeparam>
            <typeparam name="TOut">The type of the out.</typeparam>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.SetProperties``2(``0,``1,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Sets the properties of the output <see cref="T:System.Type" />.
            </summary>
            <typeparam name="TIn">The type of the in.</typeparam>
            <typeparam name="TOut">The type of the out.</typeparam>
            <param name="input">the input.</param>
            <param name="output">the output.</param>
            <param name="includedProperties">The included properties.</param>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.SetPropertiesExcluding``2(``0,``1,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Sets the properties, excluding the specified property names.
            </summary>
            <typeparam name="TIn">The type of the in.</typeparam>
            <typeparam name="TOut">The type of the out.</typeparam>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="excludedProperties">The excluded properties.</param>
        </member>
        <member name="M:Songhay.ProgramTypeUtility.SqlDatabaseNull">
            <summary>
            Returns the conventional database null
            (<see cref="T:System.DBNull"/>)
            for Microsoft SQL Server systems.
            </summary>
            <returns><see cref="T:System.DBNull"/></returns>
        </member>
        <member name="T:Songhay.ProgramUtility">
            <summary>
            Defines shared routines for Studio programs
            </summary>
            <summary>
            Static members for framework-level procedures.
            </summary>
            <summary>
            Static members for framework-level procedures.
            </summary>
            <summary>
            Static members for framework-level procedures.
            </summary>
            <summary>
            Defines shared routines for Studio programs
            </summary>
        </member>
        <member name="M:Songhay.ProgramUtility.GetConsoleCharacters(System.String)">
            <summary>
            Gets the console characters.
            </summary>
            <param name="input">The input.</param>
            <returns>Returns formatted input.</returns>
        </member>
        <member name="M:Songhay.ProgramUtility.SplitArgs(System.String)">
            <summary>
            Splits the arguments.
            </summary>
            <param name="rawArguments">The raw/unsplit argument line.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Unable to split argument.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception"></exception>
            <remarks>
            From “RegEx function to parse a command line without using a library”
            [http://stackoverflow.com/a/17052018/22944]
            </remarks>
        </member>
        <member name="M:Songhay.ProgramUtility.StartProcess(System.String)">
            <summary>
            Starts the process.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Songhay.ProgramUtility.StartProcess(System.String,System.String,System.Boolean)">
            <summary>
            Starts the process.
            </summary>
            <param name="argumentOfExe">The argument of executable.</param>
            <param name="pathToExe">The path to executable.</param>
            <param name="useExe">if set to <c>true</c> use path to executable.</param>
        </member>
        <member name="M:Songhay.ProgramUtility.GetCurrentMethodName">
            <summary>
            Gets the name of the current method.
            </summary>
        </member>
        <member name="M:Songhay.ProgramUtility.GetMethodName(System.Int32)">
            <summary>
            Gets the name of the current method.
            </summary>
            <param name="stackFrameIndex">Index of the stack frame.</param>
        </member>
        <member name="M:Songhay.ProgramUtility.InitializeTraceSource(System.Diagnostics.TraceListener)">
            <summary>
            Initializes the trace source.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:Songhay.ProgramUtility.LoadConfiguration(System.String)">
            <summary>
            Loads the configuration.
            </summary>
            <param name="basePath">The base path.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.ProgramUtility.LoadConfiguration(System.String,System.String[])">
            <summary>
            Loads the built configuration.
            </summary>
            <param name="basePath">The base path.</param>
            <param name="requiredJsonConfigurationFiles">specify any additional JSON configuration files before build</param>
            <returns>Returns the built configuration.</returns>
        </member>
        <member name="M:Songhay.ProgramUtility.LoadConfiguration(System.String,System.Func{Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.Configuration.IConfigurationBuilder},System.String[])">
            <summary>
            Loads the built configuration.
            </summary>
            <param name="basePath">The base path.</param>
            <param name="builderModifier">Allows modification of <see cref="T:Microsoft.Extensions.Configuration.ConfigurationBuilder"/> before build.</param>
            <param name="requiredJsonConfigurationFiles">specify any additional JSON configuration files before build</param>
            <returns>Returns the built configuration.</returns>
        </member>
        <member name="M:Songhay.ProgramUtility.HandleDebug">
            <summary>
            Handles the debug.
            </summary>
        </member>
        <member name="T:Songhay.Text.CsvExporter`1">
            <summary>
            Transforms and exports the specified class to CSV format.
            </summary>
            <typeparam name="T">the class to export</typeparam>
            <remarks>
            Based on http://stackoverflow.com/questions/2422212/simple-c-sharp-csv-excel-export-class
            </remarks>
        </member>
        <member name="M:Songhay.Text.CsvExporter`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Text.CsvExporter`1"/> class.
            </summary>
            <param name="rows">The rows.</param>
        </member>
        <member name="M:Songhay.Text.CsvExporter`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Songhay.Text.CsvExporter`1"/> class.
            </summary>
            <param name="rows">The rows.</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="P:Songhay.Text.CsvExporter`1.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>
            The columns.
            </value>
        </member>
        <member name="P:Songhay.Text.CsvExporter`1.Rows">
            <summary>
            Gets the rows.
            </summary>
            <value>
            The rows.
            </value>
        </member>
        <member name="M:Songhay.Text.CsvExporter`1.Export">
            <summary>
            Exports this instance.
            </summary>
        </member>
        <member name="M:Songhay.Text.CsvExporter`1.Export(System.Boolean)">
            <summary>
            Exports the specified include header line.
            </summary>
            <param name="includeHeaderLine">if set to <c>true</c> [include header line].</param>
        </member>
        <member name="M:Songhay.Text.CsvExporter`1.ExportToFile(System.String)">
            <summary>
            Exports to file.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Songhay.Text.CsvExporter`1.ExportToBytes">
            <summary>
            Exports to bytes.
            </summary>
        </member>
        <member name="T:Songhay.Xml.HtmlUtility">
            <summary>
            Static members for HTML text processing.
            </summary>
        </member>
        <member name="M:Songhay.Xml.HtmlUtility.ConvertToHtml(System.String)">
            <summary>
            Returns a string of marked up text compatible
            with browsers that do not support XHTML
            (loosely towards HTML 4.x W3C standard).
            </summary>
            <param name="inputValue">
            A string of marked up text.
            </param>
        </member>
        <member name="M:Songhay.Xml.HtmlUtility.ConvertToXml(System.String)">
            <summary>
            Attempts to convert HTML to well-formed XML.
            </summary>
            <param name="html">
            An HTML 
            <see cref="T:System.String"/>.
            </param>
            <returns><see cref="T:System.String"/></returns>
            <remarks>This task is simpler than converting to XHTML.</remarks>
        </member>
        <member name="M:Songhay.Xml.HtmlUtility.FormatXhtmlElements(System.String)">
            <summary>
            Returns an XHTML string derived from a .NET procedure.
            </summary>
            <param name="xmlFragment">
            A well-formed <see cref="T:System.String"/> of XML.
            </param>
            <remarks>
            This member addresses certain quirks
            that well-formed XML cannot have in a contemporary Web browser.
            </remarks>
        </member>
        <member name="M:Songhay.Xml.HtmlUtility.GetInnerXml(System.String,System.String)">
            <summary>
            Returns the …inner… fragment of XML
            from the specified unique element.
            </summary>
            <param name="xmlFragment">
            A well-formed <see cref="T:System.String"/> of XML.
            </param>
            <param name="elementName">
            The local name of the element in the XML string.
            </param>
        </member>
        <member name="M:Songhay.Xml.HtmlUtility.PublicDocType">
            <summary>
            Emits a public <c>DOCTYPE</c> tag.
            </summary>
            <returns>
            A public <c>DOCTYPE</c> tag for XHTML 1.0 transitional.
            </returns>
        </member>
        <member name="M:Songhay.Xml.HtmlUtility.PublicDocType(System.String,System.String,System.String)">
            <summary>
            Emits a public <c>DOCTYPE</c> tag.
            </summary>
            <param name="rootElement">
            The root element of the DTD.
            </param>
            <param name="publicIdentifier">
            The public identifier of the DTD.
            </param>
            <param name="resourceReference">
            The link to reference material of the DTD.
            </param>
            <returns>
            A public <c>DOCTYPE</c> tag.
            </returns>
        </member>
        <member name="T:Songhay.Xml.LatinGlyphsUtility">
            <summary>
            Condenses and expands Latin glyphs.
            </summary>
        </member>
        <member name="M:Songhay.Xml.LatinGlyphsUtility.Condense(System.String)">
            <summary>
            Condenses selected decimal entities
            into their Latin glyph equivalent.
            </summary>
            <param name="entityText">
            The <see cref="T:System.String"/>
            containing the decimal entities.
            </param>
            <returns>
            Returns a <see cref="T:System.String"/>
            with Latin glyphs.
            </returns>
        </member>
        <member name="M:Songhay.Xml.LatinGlyphsUtility.Expand(System.String)">
            <summary>
            Expands selected Latin glyphs
            into their decimal entity equivalent.
            </summary>
            <param name="glyphText">
            The <see cref="T:System.String"/>
            containing the glyphs.
            </param>
            <returns>
            Returns a <see cref="T:System.String"/>
            with decimal entities.
            </returns>
        </member>
        <member name="M:Songhay.Xml.LatinGlyphsUtility.GetGlyphs">
            <summary>
            Gets the glyphs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.LatinGlyphsUtility.GetGlyphsForCondenseOrExpand">
            <summary>
            Gets the glyphs for <see cref="M:Songhay.Xml.LatinGlyphsUtility.Condense(System.String)"/> or <see cref="M:Songhay.Xml.LatinGlyphsUtility.Expand(System.String)"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.LatinGlyphsUtility.RemoveUrlEncodings(System.String)">
            <summary>
            Removes the URL encodings.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:Songhay.Xml.LatinGlyphsUtility.RemoveUrlEncodings(System.String,System.Boolean)">
            <summary>
            Removes the URL encodings.
            </summary>
            <param name="input">The input.</param>
            <param name="includeWindows1252UrlEncoding">if set to <c>true</c> [include windows1252 URL encoding].</param>
            <returns></returns>
        </member>
        <member name="T:Songhay.Xml.OpmlUtility">
            <summary>
            Static helpers for OPML.
            </summary>
        </member>
        <member name="P:Songhay.Xml.OpmlUtility.rx">
            <summary>
            Conventional namespace for OPML documents.
            </summary>
        </member>
        <member name="M:Songhay.Xml.OpmlUtility.GetBody(System.Xml.Linq.XContainer,System.Xml.Linq.XNamespace)">
            <summary>
            Gets the body.
            </summary>
            <param name="root">The root.</param>
            <param name="ns">The namespace.</param>
        </member>
        <member name="M:Songhay.Xml.OpmlUtility.GetDocument(System.String)">
            <summary>
            Gets the document.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.OpmlUtility.GetDocument(System.String,System.Xml.Linq.XNamespace)">
            <summary>
            Gets the document.
            </summary>
            <param name="xml">The XML.</param>
            <param name="ns">The ns.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.OpmlUtility.GetDocument(System.Xml.Linq.XContainer,System.Xml.Linq.XNamespace)">
            <summary>
            Gets the document.
            </summary>
            <param name="root">The root.</param>
            <param name="ns">The conventional namespace.</param>
        </member>
        <member name="M:Songhay.Xml.OpmlUtility.GetHead(System.Xml.Linq.XContainer,System.Xml.Linq.XNamespace)">
            <summary>
            Gets the head.
            </summary>
            <param name="root">The root.</param>
            <param name="ns">The namespace.</param>
        </member>
        <member name="M:Songhay.Xml.OpmlUtility.GetOutline(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace)">
            <summary>
            Gets the outline.
            </summary>
            <param name="root">The root.</param>
            <param name="ns">The namespace.</param>
        </member>
        <member name="M:Songhay.Xml.OpmlUtility.GetOutlines(System.Xml.Linq.XContainer,System.Xml.Linq.XNamespace)">
            <summary>
            Gets the outlines.
            </summary>
            <param name="root">The root.</param>
            <param name="ns">The namespace.</param>
        </member>
        <member name="T:Songhay.Xml.XhtmlDocumentUtility">
            <summary>
            Static members for XHTML Documents.
            </summary>
            <summary>
            Static members for XHTML Documents.
            </summary>
        </member>
        <member name="P:Songhay.Xml.XhtmlDocumentUtility.xhtml">
            <summary>
            XHTML Namespace
            </summary>
        </member>
        <member name="M:Songhay.Xml.XhtmlDocumentUtility.GetDocument(System.Xml.Linq.XDocument,System.String)">
            <summary>
            Loads the document.
            </summary>
            <param name="document">The XML document.</param>
            <param name="webPath">The public web path.</param>
        </member>
        <member name="M:Songhay.Xml.XhtmlDocumentUtility.GetDocument(System.Xml.Linq.XDocument,System.String,System.Boolean)">
            <summary>
            Loads the document.
            </summary>
            <param name="document">The XML document.</param>
            <param name="webPath">The public web path.</param>
            <param name="useXhtmlNamespace">if set to <c>true</c> use XHTML namespace (<c>true</c> by default).</param>
        </member>
        <member name="M:Songhay.Xml.XhtmlDocumentUtility.LoadDocument(System.String,System.String)">
            <summary>
            Loads the document.
            </summary>
            <param name="pathToDocument">The path to document.</param>
            <param name="webPath">The public web path.</param>
        </member>
        <member name="M:Songhay.Xml.XhtmlDocumentUtility.WriteDocumentIndex(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Writes the index of XHTML documents.
            </summary>
            <param name="indexFileName">Name of the index file.</param>
            <param name="indexTitle">The index title.</param>
            <param name="publicRoot">The public root.</param>
            <param name="pathToDirectory">The path to the specified directory.</param>
            <param name="pathToOutput">The path to output.</param>
        </member>
        <member name="T:Songhay.Xml.XmlUtility">
            <summary>
            Static helper members for XML-related routines.
            </summary>
            <remarks>
            These definitions are biased toward
            emitting <see cref="T:System.Xml.XPath.XPathDocument"/> sets.
            However, many accept any input implementing the
            <see cref="T:System.Xml.XPath.IXPathNavigable"/> interface.
            </remarks>
            <summary>
            Static helper members for XML-related routines.
            </summary>
            <remarks>
            These definitions are biased toward
            emitting <see cref="T:System.Xml.XPath.XPathDocument"/> sets.
            However, many accept any input implementing the
            <see cref="T:System.Xml.XPath.IXPathNavigable"/> interface.
            </remarks>
            <summary>
            Static helper members for XML-related routines.
            </summary>
            <remarks>
            These definitions are biased toward
            emitting <see cref="T:System.Xml.XPath.XPathDocument"/> sets.
            However, many accept any input implementing the
            <see cref="T:System.Xml.XPath.IXPathNavigable"/> interface.
            </remarks>
            <summary>
            Static helper members for XML-related routines.
            </summary>
            <remarks>
            These definitions are biased toward
            emitting <see cref="T:System.Xml.XPath.XPathDocument"/> sets.
            However, many accept any input implementing the
            <see cref="T:System.Xml.XPath.IXPathNavigable"/> interface.
            </remarks>
            <summary>
            Static helper members for XML-related routines.
            </summary>
            <remarks>
            These definitions are biased toward
            emitting <see cref="T:System.Xml.XPath.XPathDocument"/> sets.
            However, many accept any input implementing the
            <see cref="T:System.Xml.XPath.IXPathNavigable"/> interface.
            </remarks>
            <summary>
            Static helper members for XML-related routines.
            </summary>
            <remarks>
            These definitions are biased toward
            emitting <see cref="T:System.Xml.XPath.XPathDocument"/> sets.
            However, many accept any input implementing the
            <see cref="T:System.Xml.XPath.IXPathNavigable"/> interface.
            </remarks>
            <summary>
            Static helper members for XML-related routines.
            </summary>
            <remarks>
            These definitions are biased toward
            emitting <see cref="T:System.Xml.XPath.XPathDocument"/> sets.
            However, many accept any input implementing the
            <see cref="T:System.Xml.XPath.IXPathNavigable"/> interface.
            </remarks>
            <summary>
            Static helper members for XML-related routines.
            </summary>
            <remarks>
            These definitions are biased toward
            emitting <see cref="T:System.Xml.XPath.XPathDocument"/> sets.
            However, many accept any input implementing the
            <see cref="T:System.Xml.XPath.IXPathNavigable"/> interface.
            </remarks>
            <summary>
            Static helper members for XML-related routines.
            </summary>
            <remarks>
            These definitions are biased toward
            emitting <see cref="T:System.Xml.XPath.XPathDocument"/> sets.
            However, many accept any input implementing the
            <see cref="T:System.Xml.XPath.IXPathNavigable"/> interface.
            </remarks>
            <summary>
            Static helper members for XML-related routines.
            </summary>
            <remarks>
            These definitions are biased toward
            emitting <see cref="T:System.Xml.XPath.XPathDocument"/> sets.
            However, many accept any input implementing the
            <see cref="T:System.Xml.XPath.IXPathNavigable"/> interface.
            </remarks>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.CombineNavigableDocuments(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.IXPathNavigable)">
            <summary>
            Combines two <see cref="T:System.Xml.XPath.IXPathNavigable"/> documents.
            </summary>
            <param name="parentDocument">The <see cref="T:System.Xml.XPath.IXPathNavigable"/> “hosting” document.</param>
            <param name="childDocument">The <see cref="T:System.Xml.XPath.IXPathNavigable"/> child document.</param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.CombineNavigableDocuments(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.IXPathNavigable,System.String)">
            <summary>
            Combines two <see cref="T:System.Xml.XPath.IXPathNavigable"/> documents.
            </summary>
            <param name="parentDocument">The <see cref="T:System.Xml.XPath.IXPathNavigable"/> “hosting” document.</param>
            <param name="childDocument">The <see cref="T:System.Xml.XPath.IXPathNavigable"/> child document.</param>
            <param name="setQuery">The XPath query to the child document loaction in the “hosting” document. </param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.ExpandSpecialChars(System.String)">
            <summary>
            Expands selected characters
            in the specified <see cref="T:System.String"/>
            into the standard XML entities.
            </summary>
            <param name="rawValue">The raw <see cref="T:System.String"/></param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetAttributeValue(System.Xml.XPath.IXPathNavigable,System.String)">
            <summary>
            An alternative to <see cref="M:System.Xml.XPath.XPathNavigator.GetAttribute(System.String,System.String)"/>.
            </summary>
            <param name="navigableSet">
            The source <see cref="T:System.Xml.XPath.IXPathNavigable"/> set.
            </param>
            <param name="setQuery">
            The value to be compiled
            into an <see cref="T:System.Xml.XPath.XPathExpression"/>.
            </param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetAttributeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Xml.XmlNamespaceManager)">
            <summary>
            An alternative to <see cref="M:System.Xml.XPath.XPathNavigator.GetAttribute(System.String,System.String)"/>.
            </summary>
            <param name="navigableSet">
            The source <see cref="T:System.Xml.XPath.IXPathNavigable"/> set.
            </param>
            <param name="setQuery">
            The value to be compiled
            into an <see cref="T:System.Xml.XPath.XPathExpression"/>.
            </param>
            <param name="nsMan">
            The <see cref="T:System.Xml.XmlNamespaceManager"/>
            to use to resolve prefixes.
            </param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetInstance``1(System.String)">
            <summary>
            Deserializes based on the specified XML file.
            </summary>
            <typeparam name="T">
            The specified type to deserialize.
            </typeparam>
            <param name="xmlPath">the XML file path</param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetInstanceRaw``1(System.String)">
            <summary>
            Deserializes based on the specified raw XML.
            </summary>
            <typeparam name="T">
            The specified type to deserialize.
            </typeparam>
            <param name="xmlFragment">the raw XML</param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetInternalMessage(System.String)">
            <summary>
            Returns an XML <see cref="T:System.String"/>
            based on the specified header and lines.
            </summary>
            <param name="messageHeader">Message header</param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.String[])">
            <summary>
            Returns an XML <see cref="T:System.String"/>
            based on the specified header and lines.
            </summary>
            <param name="messageHeader">Message header</param>
            <param name="messageLines">Message lines</param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.String})">
            <summary>
            Returns an XML <see cref="T:System.String"/>
            based on the specified header and lines.
            </summary>
            <param name="messageHeader">Message header</param>
            <param name="messageLines">Message lines</param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.String,System.String[])">
            <summary>
            Returns an XML <see cref="T:System.String"/>
            based on the specified header and lines.
            </summary>
            <param name="messageHeader">Message header</param>
            <param name="messageCode">Message code for errors, exceptions or faults</param>
            <param name="messageLines">Message lines</param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.String})">
            <summary>
            Returns an XML <see cref="T:System.String"/>
            based on the specified header and lines.
            </summary>
            <param name="messageHeader">Message header</param>
            <param name="messageCode">Message code for errors, exceptions or faults</param>
            <param name="messageLines">Message lines</param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.String[],System.Xml.XmlWriter)">
            <summary>
            Write a message to the specified
            </summary>
            <param name="messageHeader">Message header</param>
            <param name="messageLines">Message lines</param>
            <param name="xmlDataWriter">The <see cref="T:System.Xml.XmlWriter"/></param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.String,System.String[],System.Xml.XmlWriter)">
            <summary>
            Write a message to the specified
            </summary>
            <param name="messageHeader">Message header</param>
            <param name="messageCode">Message code for errors, exceptions or faults</param>
            <param name="messageLines">Message lines</param>
            <param name="xmlDataWriter">The <see cref="T:System.Xml.XmlTextWriter"/></param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.String[],System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Write a message to the specified
            </summary>
            <param name="messageHeader">Message header</param>
            <param name="messageLines">Message lines</param>
            <param name="xmlDataWriter">The <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="isFragment">When <c>false</c> a new document is started.</param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetInternalMessage(System.String,System.String,System.String[],System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Write a message to the specified
            </summary>
            <param name="messageHeader">Message header</param>
            <param name="messageCode">Message code for errors, exceptions or faults</param>
            <param name="messageLines">Message lines</param>
            <param name="xmlDataWriter">The <see cref="T:System.Xml.XmlWriter"/></param>
            <param name="isFragment">When <c>false</c> a new document is started.</param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetInternalMessageDocument(System.String,System.String[])">
            <summary>
            Returns an <see cref="T:System.Xml.XPath.XPathDocument"/>
            based on the specified header and lines.
            </summary>
            <param name="messageHeader">Message header</param>
            <param name="messageLines">Message lines</param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetInternalMessageDocument(System.String,System.String,System.String[])">
            <summary>
            Returns an <see cref="T:System.Xml.XPath.XPathDocument"/>
            based on the specified header and lines.
            </summary>
            <param name="messageHeader">Message header</param>
            <param name="messageCode">Message code for errors, exceptions or faults</param>
            <param name="messageLines">Message lines</param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetNamespaceManager(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Returns a <see cref="T:System.Xml.XmlNamespaceManager"/>
            with respect to the document element of the specified
            <see cref="T:System.Xml.XPath.IXPathNavigable"/> set.
            </summary>
            <param name="navigableSet">
            The <see cref="T:System.Xml.XPath.IXPathNavigable"/> set.
            </param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetNavigableDocument(System.String)">
            <summary>
            Returns an <see cref="T:System.Xml.XPath.XPathDocument"/>
            based on the specified <see cref="T:System.String"/>.
            </summary>
            <param name="xmlFragment">
            A well-formed XML <see cref="T:System.String"/>.
            </param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetNavigableDocument(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Returns an <see cref="T:System.Xml.XPath.XPathDocument"/>
            based on the specified <see cref="T:System.Xml.XmlNode"/>.
            </summary>
            <param name="navigableSet">
            The source <see cref="T:System.Xml.XPath.IXPathNavigable"/> set.
            </param>
            <remarks>
            Use this member to convert <see cref="T:System.Xml.XmlDocument"/> sets.
            </remarks>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetNavigableDocument(System.IO.Stream)">
            <summary>
            Returns an <see cref="T:System.Xml.XPath.XPathDocument"/>
            based on the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetNavigableNode(System.Xml.XPath.IXPathNavigable,System.String)">
            <summary>
            Returns an <see cref="T:System.Xml.XPath.XPathNavigator"/>
            based on the setQuery Expression toward the source document.
            </summary>
            <param name="navigableSet">
            The source <see cref="T:System.Xml.XPath.IXPathNavigable"/> set.
            </param>
            <param name="setQuery">
            The value to be compiled
            into an <see cref="T:System.Xml.XPath.XPathExpression"/>.
            </param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetNavigableNode(System.Xml.XPath.IXPathNavigable,System.String,System.Xml.XmlNamespaceManager)">
            <summary>
            Returns an <see cref="T:System.Xml.XPath.XPathNavigator"/>
            based on the setQuery Expression toward the source document.
            </summary>
            <param name="navigableSet">
            The source <see cref="T:System.Xml.XPath.IXPathNavigable"/> set.
            </param>
            <param name="setQuery">
            The value to be compiled
            into an <see cref="T:System.Xml.XPath.XPathExpression"/>.
            </param>
            <param name="nsMan">
            The <see cref="T:System.Xml.XmlNamespaceManager"/>
            to use to resolve prefixes.
            </param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetNavigableNodes(System.Xml.XPath.IXPathNavigable,System.String)">
            <summary>
            Returns an <see cref="T:System.Xml.XPath.XPathNodeIterator"/>
            based on the setQuery Expression toward the source document.
            </summary>
            <param name="navigableSet">
            The source <see cref="T:System.Xml.XPath.IXPathNavigable"/> set.
            </param>
            <param name="setQuery">
            The value to be compiled
            into an <see cref="T:System.Xml.XPath.XPathExpression"/>.
            </param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetNavigableNodes(System.Xml.XPath.IXPathNavigable,System.String,System.Xml.XmlNamespaceManager)">
            <summary>
            Returns an <see cref="T:System.Xml.XPath.XPathNodeIterator"/>
            based on the setQuery Expression toward the source document.
            </summary>
            <param name="navigableSet">
            The source <see cref="T:System.Xml.XPath.IXPathNavigable"/> set.
            </param>
            <param name="setQuery">
            The value to be compiled
            into an <see cref="T:System.Xml.XPath.XPathExpression"/>.
            </param>
            <param name="nsMan">
            The <see cref="T:System.Xml.XmlNamespaceManager"/>
            to use to resolve prefixes.
            </param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean)">
            <summary>
            Returns an object for parsing
            and adding to a list of parameters for data access.
            </summary>
            <param name="node">The <see cref="T:System.Xml.XPath.IXPathNavigable"/></param>
            <param name="setQuery">The <see cref="T:System.String"/></param>
            <param name="throwException">When <code>true</code>, throw an exception for null nodes.</param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.Object)">
            <summary>
            Returns an object for parsing
            and adding to a list of parameters for data access.
            </summary>
            <param name="node">The <see cref="T:System.Xml.XPath.IXPathNavigable"/></param>
            <param name="setQuery">The <see cref="T:System.String"/></param>
            <param name="throwException">When <code>true</code>, throw an exception for null nodes.</param>
            <param name="defaultValue">Return the specified default value for “zero-length” text nodes</param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.Object,System.Xml.XmlNamespaceManager)">
            <summary>
            Returns an object for parsing
            and adding to a list of parameters for data access.
            </summary>
            <param name="node">The <see cref="T:System.Xml.XPath.IXPathNavigable"/></param>
            <param name="setQuery">The <see cref="T:System.String"/></param>
            <param name="throwException">When <code>true</code>, throw an exception for null nodes.</param>
            <param name="defaultValue">Return the specified default value for “zero-length” text nodes</param>
            <param name="nsMan">
            The <see cref="T:System.Xml.XmlNamespaceManager"/>
            to use to resolve prefixes.
            </param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetNodeValueAndParse``1(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,``0)">
            <summary>
            Returns an object for parsing
            and adding to a list of parameters for data access.
            </summary>
            <param name="node">The <see cref="T:System.Xml.XPath.IXPathNavigable"/> to query.</param>
            <param name="setQuery">The XPath <see cref="T:System.String"/>.</param>
            <param name="throwException">When <code>true</code>, throw an exception for null nodes and nodes that do not parse into the specified type.</param>
            <param name="defaultValue">Return a boxing <see cref="T:System.Object"/> for “zero-length” text nodes.</param>
            <typeparam name="T">The type to parse from the node value.</typeparam>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetNodeValueAndParse``1(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,``0,System.Xml.XmlNamespaceManager)">
            <summary>
            Returns an object for parsing
            and adding to a list of parameters for data access.
            </summary>
            <param name="node">The <see cref="T:System.Xml.XPath.IXPathNavigable"/> to query.</param>
            <param name="setQuery">The XPath <see cref="T:System.String"/>.</param>
            <param name="throwException">When <code>true</code>, throw an exception for null nodes and nodes that do not parse into the specified type.</param>
            <param name="defaultValue">Return a boxing <see cref="T:System.Object"/> for “zero-length” text nodes.</param>
            <param name="nsMan">
            The <see cref="T:System.Xml.XmlNamespaceManager"/>
            to use to resolve prefixes.
            </param>
            <typeparam name="T">The type to parse from the node value.</typeparam>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetText(System.IO.MemoryStream)">
            <summary>
            “Cleans” XML data returning
            in a <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <param name="ramStream"><see cref="T:System.IO.MemoryStream"/></param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetXslResult(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.IXPathNavigable)">
            <summary>
            Returns a <see cref="T:System.Xml.XPath.XPathDocument"/>
            for the transformation of the XSLT document
            and the XML document.
            </summary>
            <param name="xslSet">
            The source <see cref="T:System.Xml.XPath.IXPathNavigable"/> XSL set.
            </param>
            <param name="navigableSet">
            The source <see cref="T:System.Xml.XPath.IXPathNavigable"/> XML set.
            </param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetXslResult(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XPath.IXPathNavigable)">
            <summary>
            Returns a <see cref="T:System.Xml.XPath.XPathDocument"/>
            for the transformation of the XSLT document
            and the XML document.
            </summary>
            <param name="xslSet">
            The source <see cref="T:System.Xml.XPath.IXPathNavigable"/> XSL set.
            </param>
            <param name="xslArgs">
            The <see cref="T:System.Xml.Xsl.XsltArgumentList"/>.
            </param>
            <param name="navigableSet">
            The source <see cref="T:System.Xml.XPath.IXPathNavigable"/> XML set.
            </param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetXslString(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.IXPathNavigable)">
            <summary>
            Returns a <see cref="T:System.String"/>
            for the transformation of the XSLT document
            and the XML document.
            </summary>
            <param name="xslSet">The source <see cref="T:System.Xml.XPath.IXPathNavigable"/> XSL set.</param>
            <param name="navigableSet">The source <see cref="T:System.Xml.XPath.IXPathNavigable"/> XML set.</param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetNavigableDocument(System.Object)">
            <summary>
            Gets the navigable document.
            </summary>
            <param name="rss">The RSS.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetXslString(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XPath.IXPathNavigable)">
            <summary>
            Returns a <see cref="T:System.String"/>
            for the transformation of the XSLT document
            and the XML document.
            </summary>
            <param name="xslSet">
            The source <see cref="T:System.Xml.XPath.IXPathNavigable"/> XSL set.
            </param>
            <param name="xslArgs">
            The <see cref="T:System.Xml.Xsl.XsltArgumentList"/>.
            </param>
            <param name="navigableSet">
            The source <see cref="T:System.Xml.XPath.IXPathNavigable"/> XML set.
            </param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetXslString(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriterSettings)">
            <summary>
            Returns a <see cref="T:System.String"/>
            for the transformation of the XSLT document
            and the XML document.
            </summary>
            <param name="xslSet">The source <see cref="T:System.Xml.XPath.IXPathNavigable"/> XSL set.</param>
            <param name="xslArgs">The <see cref="T:System.Xml.Xsl.XsltArgumentList"/>.</param>
            <param name="navigableSet">The source <see cref="T:System.Xml.XPath.IXPathNavigable"/> XML set.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.InputAs``1(``0)">
            <summary>
            Returns an <see cref="T:System.Xml.XPath.XPathDocument"/>,
            converted from the specified input.
            </summary>
            <typeparam name="TIn">The <see cref="T:System.Type"/> of the input.</typeparam>
            <param name="input">The input.</param>
            <returns>Returns an <see cref="T:System.Xml.XPath.XPathDocument"/>.</returns>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.IsNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.String)">
            <summary>
            Returns true when the node has the specified value.
            </summary>
            <param name="node">The <see cref="T:System.Xml.XPath.IXPathNavigable"/></param>
            <param name="setQuery">The query <see cref="T:System.String"/></param>
            <param name="throwException">When <code>true</code>, throw an exception for null nodes.</param>
            <param name="testValue">The specified value to test with the node value.</param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.IsNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.String,System.StringComparison)">
            <summary>
            Returns true when the node has the specified value.
            </summary>
            <param name="node">The <see cref="T:System.Xml.XPath.IXPathNavigable"/></param>
            <param name="setQuery">The query <see cref="T:System.String"/></param>
            <param name="throwException">When <code>true</code>, throw an exception for null nodes.</param>
            <param name="testValue">The specified value to test with the node value.</param>
            <param name="comparisonType">The <see cref="T:System.StringComparison"/> type.</param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.IsNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.String,System.Xml.XmlNamespaceManager)">
            <summary>
            Returns true when the node has the specified value.
            </summary>
            <param name="node">The <see cref="T:System.Xml.XPath.IXPathNavigable"/></param>
            <param name="setQuery">The query <see cref="T:System.String"/></param>
            <param name="throwException">When <code>true</code>, throw an exception for null nodes.</param>
            <param name="testValue">The specified value to test with the node value.</param>
            <param name="nsMan">
            The <see cref="T:System.Xml.XmlNamespaceManager"/>
            to use to resolve prefixes.
            </param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.IsNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean,System.String,System.Xml.XmlNamespaceManager,System.StringComparison)">
            <summary>
            Returns true when the node has the specified value.
            </summary>
            <param name="node">The <see cref="T:System.Xml.XPath.IXPathNavigable"/></param>
            <param name="setQuery">The query <see cref="T:System.String"/></param>
            <param name="throwException">When <code>true</code>, throw an exception for null nodes.</param>
            <param name="testValue">The specified value to test with the node value.</param>
            <param name="nsMan">
            The <see cref="T:System.Xml.XmlNamespaceManager"/>
            to use to resolve prefixes.
            </param>
            <param name="comparisonType">The <see cref="T:System.StringComparison"/> type.</param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.IsNoNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean)">
            <summary>
            Returns true when the node has the value “no”.
            </summary>
            <param name="node">The <see cref="T:System.Xml.XPath.IXPathNavigable"/></param>
            <param name="setQuery">The query <see cref="T:System.String"/></param>
            <param name="throwException">When <code>true</code>, throw an exception for null nodes.</param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.IsYesNodeValue(System.Xml.XPath.IXPathNavigable,System.String,System.Boolean)">
            <summary>
            Returns true when the node has the value “yes”.
            </summary>
            <param name="node">The <see cref="T:System.Xml.XPath.IXPathNavigable"/></param>
            <param name="setQuery">The query <see cref="T:System.String"/></param>
            <param name="throwException">When <code>true</code>, throw an exception for null nodes.</param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.IsXml(System.String)">
            <summary>
            Returns <c>true</c> when the fragment is XML-like.
            </summary>
            <param name="fragment">The fragment to test.</param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.LoadXslTransform(System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/>
            for the transformation of the XSLT file
            and the XML file.
            </summary>
            <param name="xslPath">
            outputPath to the XSLT file.
            </param>
            <param name="xmlPath">
            outputPath to the XML file.
            </param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.LoadXslTransform(System.String,System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/>
            for the transformation of the XSLT file
            and the XML file.
            </summary>
            <param name="xslPath">
            outputPath to the XSLT file.
            </param>
            <param name="commandName">
            The value for the <code>cmd</code>-parameter convention.
            </param>
            <param name="xmlFragment">
            A well-formed XML <see cref="T:System.String"/>.
            </param>
            <remarks>
            This convention is used in ASP.NET Web applications.
            </remarks>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.LoadXslTransform(System.String,System.String,System.Xml.XPath.IXPathNavigable)">
            <summary>
            Returns a <see cref="T:System.String"/>
            for the transformation of the XSLT file
            and the XML file.
            </summary>
            <param name="xslPath">
            outputPath to the XSLT file.
            </param>
            <param name="commandName">
            The value for the <code>cmd</code>-parameter convention.
            </param>
            <param name="navigableSet">
            The source <see cref="T:System.Xml.XPath.IXPathNavigable"/> set.
            </param>
            <remarks>
            This convention is used in ASP.NET Web applications.
            </remarks>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.LoadXslTransform(System.String,System.Xml.Xsl.XsltArgumentList,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/>
            for the transformation of the XSLT file
            and the XML file.
            </summary>
            <param name="xslPath">
            outputPath to the XSLT file.
            </param>
            <param name="xslArgs">
            The <see cref="T:System.Xml.Xsl.XsltArgumentList"/>.
            </param>
            <param name="xmlPath">
            outputPath to the XML file.
            </param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.OutputAs``1(System.String)">
            <summary>
            Returns strongly typed output, converting the XML fragment.
            </summary>
            <typeparam name="TOut">The <see cref="T:System.Type"/> of output to return (constrained to <c>class</c>).</typeparam>
            <param name="xmlFragment">An XML fragment or document as a well-formed <see cref="T:System.String"/>.</param>
            <returns>Returns the specified <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.OutputAs``1(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Returns strongly typed output, converting the Navigable document.
            </summary>
            <typeparam name="TOut">The <see cref="T:System.Type"/> of output to return (constrained to <c>class</c>).</typeparam>
            <param name="navigableDocument">An <see cref="T:System.Xml.XPath.IXPathNavigable"/>.</param>
            <returns>Returns the specified <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.StripNamespaces(System.String)">
            <summary>
            Strip the namespaces from specified <see cref="T:System.String"/>.
            </summary>
            <param name="xml">
            The source <see cref="T:System.String"/>.
            </param>
            <remarks>
            WARNING: Stripping namespaces “flattens” the document
            and can cause local-name collisions.
            
            This routine does not remove namespace prefixes.
            
            </remarks>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.StripNamespaces(System.String,System.Boolean)">
            <summary>
            Strip the namespaces from specified <see cref="T:System.String"/>.
            </summary>
            <param name="xml">
            The source <see cref="T:System.String"/>.
            </param>
            <param name="removeDocType">
            When <c>true</c>, removes any DOCTYPE preambles.
            </param>
            <remarks>
            WARNING: Stripping namespaces “flattens” the document
            and can cause local-name collisions.
            
            This routine does not remove namespace prefixes.
            
            </remarks>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.StripNamespaces(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Strip the namespaces from specified document.
            </summary>
            <param name="navigableSet">
            The source <see cref="T:System.Xml.XPath.IXPathNavigable"/> set.
            </param>
            <remarks>
            WARNING: Stripping namespaces “flattens” the document
            and can cause local-name collisions.
            
            This routine does not remove namespace prefixes.
            
            </remarks>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.StripNamespaces(System.Xml.XPath.IXPathNavigable,System.Boolean)">
            <summary>
            Strip the namespaces from specified document.
            </summary>
            <param name="navigableSet">
            The source <see cref="T:System.Xml.XPath.IXPathNavigable"/> set.
            </param>
            <param name="removeDocType">
            When <c>true</c>, removes any DOCTYPE preambles.
            </param>
            <remarks>
            WARNING: Stripping namespaces “flattens” the document
            and can cause local-name collisions.
            
            This routine does not remove namespace prefixes.
            
            </remarks>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.GetXmlSchema(System.Xml.XPath.IXPathNavigable,System.Xml.Schema.ValidationEventHandler)">
            <summary>
            Returns an <see cref="T:System.Xml.Schema.XmlSchema"/> based
            on the specified navigable set and validation event handler.
            </summary>
            <param name="navigableSet">
            The source <see cref="T:System.Xml.XPath.IXPathNavigable"/> set.
            </param>
            <param name="eventHandler">
            The <see cref="T:System.Xml.Schema.ValidationEventHandler"/>
            with signature MyHandler(object sender, ValidationEventArgs args).
            </param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.LoadXmlSchema(System.String,System.Xml.Schema.ValidationEventHandler)">
            <summary>
            Loads an <see cref="T:System.Xml.Schema.XmlSchema"/> based
            on the specified navigable set and validation event handler.
            </summary>
            <param name="pathToSchema">
            The valid path to an XML Schema file.
            </param>
            <param name="eventHandler">
            The <see cref="T:System.Xml.Schema.ValidationEventHandler"/>
            with signature MyHandler(object sender, ValidationEventArgs args).
            </param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.ValidateNavigableNode(System.Xml.XPath.IXPathNavigable,System.Xml.Schema.XmlSchema,System.Xml.Schema.ValidationEventHandler)">
            <summary>
            Validates the specified navigable set
            with the specified schema and validation event handler.
            </summary>
            <param name="navigableSet">
            The source <see cref="T:System.Xml.XPath.IXPathNavigable"/> set.
            </param>
            <param name="schema">
            The <see cref="T:System.Xml.Schema.XmlSchema"/>.
            </param>
            <param name="eventHandler">
            The <see cref="T:System.Xml.Schema.ValidationEventHandler"/>
            with signature MyHandler(object sender, ValidationEventArgs args).
            </param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.Write``1(``0,System.String)">
            <summary>
            Serializes and writes to the specified path.
            </summary>
            <typeparam name="T">The type of the instance.</typeparam>
            <param name="instance">The instance.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.WriteReader(System.Xml.XmlReader,System.Xml.XmlWriter)">
            <summary>
            Transfers the data in the Source to the Destination.
            </summary>
            <param name="readerSource"><see cref="T:System.Xml.XmlReader"/></param>
            <param name="writerDestination"><see cref="T:System.Xml.XmlWriter"/></param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.WriteXslTransform(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.IXPathNavigable,System.String)">
            <summary>
            Transforms the specified navigable documents
            and writes to disk with the specified path.
            </summary>
            <param name="xmlInput">The specified input.</param>
            <param name="navigableSet">
            The source <see cref="T:System.Xml.XPath.IXPathNavigable"/> set.
            </param>
            <param name="outputPath">
            The file-system, target path.
            </param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.WriteXslTransform(System.Xml.XmlReader,System.Xml.XPath.IXPathNavigable,System.String)">
            <summary>
            Transforms the specified input and writes to disk.
            </summary>
            <param name="xmlInput">The specified input.</param>
            <param name="navigableSet">
            The source <see cref="T:System.Xml.XPath.IXPathNavigable"/> set.
            </param>
            <param name="outputPath">
            The file-system, target path.
            </param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.XmlEncode(System.String)">
            <summary>
            XMLs the encode.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Songhay.Xml.XmlUtility.XmlDecode(System.String)">
            <summary>
            XMLs the decode.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Songhay.Xml.XObjectUtility">
            <summary>
            Static helper members for XML-related routines.
            </summary>
            <summary>
            Static helper members for XML-related routines.
            </summary>
            <summary>
            Static helper members for XML-related routines.
            </summary>
            <summary>
            Static helper members for XML-related routines.
            </summary>
            <summary>
            Static helper members for XML-related routines.
            </summary>
            <summary>
            Static helper members for XML-related routines.
            </summary>
            <remarks>
            These definitions are biased toward
            emitting <see cref="T:System.Xml.XPath.XPathDocument"/> sets.
            However, many accept any input implementing the
            <see cref="T:System.Xml.XPath.IXPathNavigable"/> interface.
            </remarks>
            <summary>
            Static helper members for XML-related routines.
            </summary>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetCDataValue(System.Xml.Linq.XElement)">
            <summary>
            Get the CDATA value from the specified <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/></param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetCDataValue(System.Xml.Linq.XNode)">
            <summary>
            Get the CDATA value from the specified <see cref="T:System.Xml.Linq.XNode"/>.
            </summary>
            <param name="node">The <see cref="T:System.Xml.Linq.XNode"/></param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetLocalNameXPathQuery(System.String)">
            <summary>
            Gets the <see cref="T:System.Xml.Linq.XNode" /> into a <c>local-name()</c>, XPath-predicate query.
            </summary>
            <param name="childElementName">Name of the child element.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetLocalNameXPathQuery(System.String,System.String)">
            <summary>
            Gets the <see cref="T:System.Xml.Linq.XNode" /> into a <c>local-name()</c>, XPath-predicate query.
            </summary>
            <param name="namespacePrefixOrUri">The namespace prefix or URI.</param>
            <param name="childElementName">Name of the child element.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetLocalNameXPathQuery(System.String,System.String,System.String)">
            <summary>
            Gets the <see cref="T:System.Xml.Linq.XNode" /> into a <c>local-name()</c>, XPath-predicate query.
            </summary>
            <param name="namespacePrefixOrUri">The namespace prefix or URI.</param>
            <param name="childElementName">Name of the child element.</param>
            <param name="childAttributeName">Name of the child attribute.</param>
            <returns></returns>
            <remarks>
            This routine is useful when namespace-resolving is not desirable or available.
            </remarks>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetValue(System.Xml.Linq.XNode,System.String)">
            <summary>
            Gets the element or attribute value of the specified element.
            </summary>
            <param name="currentNode">The current element.</param>
            <param name="query">The xpath query.</param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetValue(System.Xml.Linq.XNode,System.String,System.Boolean)">
            <summary>
            Gets the element or attribute value of the specified element.
            </summary>
            <param name="currentNode">The current </param>
            <param name="query">The xpath query.</param>
            <param name="throwException">if set to <c>true</c> throw exception.</param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXAttributeValue(System.Xml.Linq.XNode,System.String,System.Boolean)">
            <summary>
            Returns an object for parsing
            and adding to a list of parameters for data access.
            </summary>
            <param name="set">The <see cref="T:System.Xml.Linq.XNode"/></param>
            <param name="setQuery">The <see cref="T:System.String"/></param>
            <param name="throwException">When <code>true</code>, throw an exception for null nodes.</param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXAttributeValue(System.Xml.Linq.XNode,System.String,System.Boolean,System.String)">
            <summary>
            Returns an object for parsing
            and adding to a list of parameters for data access.
            </summary>
            <param name="set">The <see cref="T:System.Xml.Linq.XNode"/></param>
            <param name="setQuery">The <see cref="T:System.String"/></param>
            <param name="throwException">When <code>true</code>, throw an exception for null nodes.</param>
            <param name="defaultValue">Return the specified default value for “zero-length” text nodes</param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXAttributeValue(System.Xml.Linq.XNode,System.String,System.Boolean,System.String,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Returns an object for parsing
            and adding to a list of parameters for data access.
            </summary>
            <param name="set">The <see cref="T:System.Xml.Linq.XNode"/></param>
            <param name="setQuery">The <see cref="T:System.String"/></param>
            <param name="throwException">When <code>true</code>, throw an exception for null nodes.</param>
            <param name="defaultValue">Return the specified default value for “zero-length” text nodes</param>
            <param name="resolver">
            The <see cref="T:System.Xml.IXmlNamespaceResolver"/>
            to use to resolve prefixes.
            </param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXAttributeValueAndParse``1(System.Xml.Linq.XNode,System.String,System.Boolean,``0)">
            <summary>
            Returns an object for parsing
            and adding to a list of parameters for data access.
            </summary>
            <param name="set">The <see cref="T:System.Xml.Linq.XNode"/></param>
            <param name="setQuery">The XPath <see cref="T:System.String"/>.</param>
            <param name="throwException">When <code>true</code>, throw an exception for null nodes and nodes that do not parse into the specified type.</param>
            <param name="defaultValue">Return a boxing <see cref="T:System.Object"/> for “zero-length” text nodes.</param>
            <typeparam name="T">The type to parse from the node value.</typeparam>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXAttributeValueAndParse``1(System.Xml.Linq.XNode,System.String,System.Boolean,``0,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Returns an object for parsing
            and adding to a list of parameters for data access.
            </summary>
            <typeparam name="T">The type to parse from the node value.</typeparam>
            <param name="set">The <see cref="T:System.Xml.Linq.XNode"/> set.</param>
            <param name="setQuery">The XPath <see cref="T:System.String"/>.</param>
            <param name="throwException">When <code>true</code>, throw an exception for null nodes and nodes that do not parse into the specified type.</param>
            <param name="defaultValue">Return a boxing <see cref="T:System.Object"/> for “zero-length” text nodes.</param>
            <param name="resolver">The <see cref="T:System.Xml.IXmlNamespaceResolver"/>
            to use to resolve prefixes.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXDeclaration">
            <summary>
            Gets the <see cref="T:System.Xml.Linq.XDeclaration"/>.
            </summary>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXDeclaration(System.String,System.Boolean)">
            <summary>
            Gets the <see cref="T:System.Xml.Linq.XDeclaration"/>.
            </summary>
            <param name="encoding">The encoding (<see cref="F:Songhay.Models.XEncoding.Utf08"/> by default).</param>
            <param name="isStandAlone">When <c>true</c> document is stand-alone (<c>true</c> by default).</param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXElement(System.String,System.Object)">
            <summary>
            Gets the element.
            </summary>
            <param name="rootElement">The root element.</param>
            <param name="innerXml">The inner XML.</param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXElement(System.Xml.Linq.XNode,System.String)">
            <summary>
            Gets the element.
            </summary>
            <param name="root">The root.</param>
            <param name="pathToElement">The XPath to element.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXElements(System.Xml.Linq.XNode,System.String)">
            <summary>
            Gets the elements.
            </summary>
            <param name="currentElement">The current element.</param>
            <param name="query">The xpath query.</param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXNode(System.Xml.Linq.XNode,System.String)">
            <summary>
            Gets the <see cref="T:System.Xml.Linq.XNode"/> from the specified XPath query.
            </summary>
            <param name="set">The set.</param>
            <param name="setQuery">The set query.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXNode(System.Xml.Linq.XNode,System.String,System.Boolean)">
            <summary>
            Gets the <see cref="T:System.Xml.Linq.XNode"/> from the specified XPath query.
            </summary>
            <param name="set">The set.</param>
            <param name="setQuery">The set query.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXNode(System.Xml.Linq.XNode,System.String,System.Boolean,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Gets the <see cref="T:System.Xml.Linq.XNode"/> from the specified XPath query.
            </summary>
            <param name="set">The set.</param>
            <param name="setQuery">The set query.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <param name="resolver">The resolver.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXNodes(System.Xml.Linq.XNode,System.String)">
            <summary>
            Gets <see cref="T:System.Collections.Generic.IEnumerable`1"/> from the specified XPath query.
            </summary>
            <param name="set">The set.</param>
            <param name="setQuery">The set query.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXNodes(System.Xml.Linq.XNode,System.String,System.Boolean)">
            <summary>
            Gets <see cref="T:System.Collections.Generic.IEnumerable`1"/> from the specified XPath query.
            </summary>
            <param name="set">The set.</param>
            <param name="setQuery">The set query.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXNodes(System.Xml.Linq.XNode,System.String,System.Boolean,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Gets <see cref="T:System.Collections.Generic.IEnumerable`1"/> from the specified XPath query.
            </summary>
            <param name="set">The set.</param>
            <param name="setQuery">The set query.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <param name="resolver">The resolver.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXObject(System.Xml.Linq.XNode,System.String)">
            <summary>
            Gets the <see cref="T:System.Xml.Linq.XObject"/> from the specified XPath query..
            </summary>
            <param name="set">The <see cref="T:System.Xml.Linq.XNode"/> set.</param>
            <param name="setQuery">The <see cref="T:System.String"/></param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXObject(System.Xml.Linq.XNode,System.String,System.Boolean)">
            <summary>
            Gets the <see cref="T:System.Xml.Linq.XObject"/> from the specified XPath query..
            </summary>
            <param name="set">The <see cref="T:System.Xml.Linq.XNode"/> set.</param>
            <param name="setQuery">The <see cref="T:System.String"/></param>
            <param name="throwException">When <code>true</code>, throw an exception for null nodes.</param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXObject(System.Xml.Linq.XNode,System.String,System.Boolean,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Gets the XObject.
            </summary>
            <param name="set">The <see cref="T:System.Xml.Linq.XNode"/> set.</param>
            <param name="setQuery">The <see cref="T:System.String"/></param>
            <param name="throwException">When <code>true</code>, throw an exception for null nodes.</param>
            <param name="resolver">
            The <see cref="T:System.Xml.IXmlNamespaceResolver"/>
            to use to resolve prefixes.
            </param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXObjects(System.Xml.Linq.XNode,System.String)">
            <summary>
            Gets <see cref="T:System.Collections.Generic.IEnumerable`1"/> from the specified XPath query.
            </summary>
            <param name="set">The set.</param>
            <param name="setQuery">The set query.</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXObjects(System.Xml.Linq.XNode,System.String,System.Boolean)">
            <summary>
            Gets <see cref="T:System.Collections.Generic.IEnumerable`1"/> from the specified XPath query.
            </summary>
            <param name="set">The set.</param>
            <param name="setQuery">The set query.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <returns></returns>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.GetXObjects(System.Xml.Linq.XNode,System.String,System.Boolean,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Gets <see cref="T:System.Collections.Generic.IEnumerable`1"/> from the specified XPath query.
            </summary>
            <param name="set">The set.</param>
            <param name="setQuery">The set query.</param>
            <param name="throwException">if set to <c>true</c> [throw exception].</param>
            <param name="resolver">The resolver.</param>
            <returns></returns>
            <exception cref="T:System.Xml.XmlException"></exception>
        </member>
        <member name="F:Songhay.Xml.XObjectUtility.GlyphNonBreakingSpace">
            <summary>
            Glyph: Non-Breaking Space
            </summary>
        </member>
        <member name="P:Songhay.Xml.XObjectUtility.XTextNonBreakingSpace">
            <summary>
            <see cref="T:System.Xml.Linq.XText"/>: Non-Breaking Space
            </summary>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.JoinFlattenedXTextNodes(System.Xml.Linq.XElement)">
            <summary>
            Joins the flattened <see cref="T:System.Xml.Linq.XText"/> nodes.
            </summary>
            <param name="rootElement">The root element.</param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.JoinFlattenedXTextNodes(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Joins the flattened <see cref="T:System.Xml.Linq.XText"/> nodes.
            </summary>
            <param name="rootElement">The root element.</param>
            <param name="includeRootElement">if set to <c>true</c> [include root element].</param>
        </member>
        <member name="M:Songhay.Xml.XObjectUtility.JoinFlattenedXTextNodes(System.Xml.Linq.XElement,System.Boolean,System.String)">
            <summary>
            Joins the flattened <see cref="T:System.Xml.Linq.XText"/> nodes.
            </summary>
            <param name="rootElement">The root element.</param>
            <param name="includeRootElement">if set to <c>true</c> [include root element].</param>
            <param name="joinDelimiter">The join delimiter.</param>
            <returns></returns>
        </member>
    </members>
</doc>
