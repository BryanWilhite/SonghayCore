### YamlMime:ManagedReference
items:
- uid: Songhay.Extensions.StringExtensions
  commentId: T:Songhay.Extensions.StringExtensions
  id: StringExtensions
  parent: Songhay.Extensions
  children:
  - Songhay.Extensions.StringExtensions.CsvSplit(System.String)
  - Songhay.Extensions.StringExtensions.EqualsInvariant(System.String,System.String)
  - Songhay.Extensions.StringExtensions.EqualsInvariant(System.String,System.String,System.Boolean)
  - Songhay.Extensions.StringExtensions.EscapeInterpolation(System.String)
  - Songhay.Extensions.StringExtensions.FromCamelCaseToEnumerable(System.String)
  - Songhay.Extensions.StringExtensions.FromSnakeToCaps(System.String)
  - Songhay.Extensions.StringExtensions.In(System.String,System.String)
  - Songhay.Extensions.StringExtensions.In(System.String,System.String,System.Char)
  - Songhay.Extensions.StringExtensions.InDoubleQuotes(System.String)
  - Songhay.Extensions.StringExtensions.InDoubleQuotesOrDefault(System.String,System.String)
  - Songhay.Extensions.StringExtensions.InsertSpacesBeforeCaps(System.String)
  - Songhay.Extensions.StringExtensions.IsByte(System.String)
  - Songhay.Extensions.StringExtensions.IsByte(System.String,System.Predicate{System.Byte})
  - Songhay.Extensions.StringExtensions.IsDecimal(System.String)
  - Songhay.Extensions.StringExtensions.IsDecimal(System.String,System.Predicate{System.Decimal})
  - Songhay.Extensions.StringExtensions.IsInteger(System.String)
  - Songhay.Extensions.StringExtensions.IsInteger(System.String,System.Predicate{System.Int32})
  - Songhay.Extensions.StringExtensions.IsLong(System.String)
  - Songhay.Extensions.StringExtensions.IsLong(System.String,System.Predicate{System.Int64})
  - Songhay.Extensions.StringExtensions.IsTelephoneNumber(System.String)
  - Songhay.Extensions.StringExtensions.IsUnc(System.String)
  - Songhay.Extensions.StringExtensions.LooksLikeEmailAddress(System.String)
  - Songhay.Extensions.StringExtensions.RemoveDiacritics(System.String)
  - Songhay.Extensions.StringExtensions.Reverse(System.String)
  - Songhay.Extensions.StringExtensions.ToAsciiLettersWithSpacer(System.String)
  - Songhay.Extensions.StringExtensions.ToAsciiLettersWithSpacer(System.String,System.Char)
  - Songhay.Extensions.StringExtensions.ToBlogSlug(System.String)
  - Songhay.Extensions.StringExtensions.ToCamelCase(System.String)
  - Songhay.Extensions.StringExtensions.ToConfigurationKey(System.String)
  - Songhay.Extensions.StringExtensions.ToDigitsOnly(System.String)
  - Songhay.Extensions.StringExtensions.ToIntString(System.String)
  - Songhay.Extensions.StringExtensions.ToIntString(System.String,System.String)
  - Songhay.Extensions.StringExtensions.ToNumberOfDirectoryLevels(System.String)
  - Songhay.Extensions.StringExtensions.ToNumericString(System.String)
  - Songhay.Extensions.StringExtensions.ToNumericString(System.String,System.String)
  - Songhay.Extensions.StringExtensions.ToPascalCase(System.String)
  - Songhay.Extensions.StringExtensions.ToSnakeCase(System.String)
  - Songhay.Extensions.StringExtensions.ToSubstringInContext(System.String,System.String,System.Int32)
  - Songhay.Extensions.StringExtensions.Truncate(System.String)
  - Songhay.Extensions.StringExtensions.Truncate(System.String,System.Int32)
  - Songhay.Extensions.StringExtensions.Truncate(System.String,System.Int32,System.String)
  - Songhay.Extensions.StringExtensions.WithConfigurationHelpTextSuffix(System.String)
  langs:
  - csharp
  - vb
  name: StringExtensions
  nameWithType: StringExtensions
  fullName: Songhay.Extensions.StringExtensions
  type: Class
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions._.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: StringExtensions
    path: ../SonghayCore/Extensions/StringExtensions._.cs
    startLine: 5
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Extensions of <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static class StringExtensions
    content.vb: Public Module StringExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Songhay.Extensions.StringExtensions.FromSnakeToCaps(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.FromSnakeToCaps(System.String)
  id: FromSnakeToCaps(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: FromSnakeToCaps(string?)
  nameWithType: StringExtensions.FromSnakeToCaps(string?)
  fullName: Songhay.Extensions.StringExtensions.FromSnakeToCaps(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions.Conversions.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: FromSnakeToCaps
    path: ../SonghayCore/Extensions/StringExtensions.Conversions.cs
    startLine: 9
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: >-
    Replaces “snake” underscores with caps of first <xref href="System.Char" data-throw-if-not-resolved="false"></xref>

    after the underscore.
  example: []
  syntax:
    content: public static string? FromSnakeToCaps(this string? input)
    parameters:
    - id: input
      type: System.String
      description: ''
    return:
      type: System.String
    content.vb: Public Shared Function FromSnakeToCaps(input As String) As String
  overload: Songhay.Extensions.StringExtensions.FromSnakeToCaps*
  nameWithType.vb: StringExtensions.FromSnakeToCaps(String)
  fullName.vb: Songhay.Extensions.StringExtensions.FromSnakeToCaps(String)
  name.vb: FromSnakeToCaps(String)
- uid: Songhay.Extensions.StringExtensions.Reverse(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.Reverse(System.String)
  id: Reverse(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: Reverse(string?)
  nameWithType: StringExtensions.Reverse(string?)
  fullName: Songhay.Extensions.StringExtensions.Reverse(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions.Conversions.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: Reverse
    path: ../SonghayCore/Extensions/StringExtensions.Conversions.cs
    startLine: 21
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: >-
    Reverse the string

    from http://en.wikipedia.org/wiki/Extension_method
  remarks: Based on work by Tomas Kubes, http://www.codeproject.com/Articles/31050/String-Extension-Collection-for-C
  example: []
  syntax:
    content: public static string? Reverse(this string? input)
    parameters:
    - id: input
      type: System.String
      description: ''
    return:
      type: System.String
    content.vb: Public Shared Function Reverse(input As String) As String
  overload: Songhay.Extensions.StringExtensions.Reverse*
  nameWithType.vb: StringExtensions.Reverse(String)
  fullName.vb: Songhay.Extensions.StringExtensions.Reverse(String)
  name.vb: Reverse(String)
- uid: Songhay.Extensions.StringExtensions.ToAsciiLettersWithSpacer(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.ToAsciiLettersWithSpacer(System.String)
  id: ToAsciiLettersWithSpacer(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: ToAsciiLettersWithSpacer(string?)
  nameWithType: StringExtensions.ToAsciiLettersWithSpacer(string?)
  fullName: Songhay.Extensions.StringExtensions.ToAsciiLettersWithSpacer(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions.Conversions.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: ToAsciiLettersWithSpacer
    path: ../SonghayCore/Extensions/StringExtensions.Conversions.cs
    startLine: 29
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Converts the <xref href="System.String" data-throw-if-not-resolved="false"></xref> into a ASCII letters with spacer <code>\0</code>.
  example: []
  syntax:
    content: public static string? ToAsciiLettersWithSpacer(this string? input)
    parameters:
    - id: input
      type: System.String
      description: The input.
    return:
      type: System.String
    content.vb: Public Shared Function ToAsciiLettersWithSpacer(input As String) As String
  overload: Songhay.Extensions.StringExtensions.ToAsciiLettersWithSpacer*
  nameWithType.vb: StringExtensions.ToAsciiLettersWithSpacer(String)
  fullName.vb: Songhay.Extensions.StringExtensions.ToAsciiLettersWithSpacer(String)
  name.vb: ToAsciiLettersWithSpacer(String)
- uid: Songhay.Extensions.StringExtensions.ToAsciiLettersWithSpacer(System.String,System.Char)
  commentId: M:Songhay.Extensions.StringExtensions.ToAsciiLettersWithSpacer(System.String,System.Char)
  id: ToAsciiLettersWithSpacer(System.String,System.Char)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: ToAsciiLettersWithSpacer(string?, char)
  nameWithType: StringExtensions.ToAsciiLettersWithSpacer(string?, char)
  fullName: Songhay.Extensions.StringExtensions.ToAsciiLettersWithSpacer(string?, char)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions.Conversions.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: ToAsciiLettersWithSpacer
    path: ../SonghayCore/Extensions/StringExtensions.Conversions.cs
    startLine: 40
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Converts the <xref href="System.String" data-throw-if-not-resolved="false"></xref> into ASCII letters with spacer.
  remarks: >-
    📖 https://en.wikipedia.org/wiki/ASCII

    📖 https://stackoverflow.com/a/7826216/22944
  example: []
  syntax:
    content: public static string? ToAsciiLettersWithSpacer(this string? input, char spacer)
    parameters:
    - id: input
      type: System.String
      description: The input.
    - id: spacer
      type: System.Char
      description: The spacer.
    return:
      type: System.String
    content.vb: Public Shared Function ToAsciiLettersWithSpacer(input As String, spacer As Char) As String
  overload: Songhay.Extensions.StringExtensions.ToAsciiLettersWithSpacer*
  nameWithType.vb: StringExtensions.ToAsciiLettersWithSpacer(String, Char)
  fullName.vb: Songhay.Extensions.StringExtensions.ToAsciiLettersWithSpacer(String, Char)
  name.vb: ToAsciiLettersWithSpacer(String, Char)
- uid: Songhay.Extensions.StringExtensions.ToBlogSlug(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.ToBlogSlug(System.String)
  id: ToBlogSlug(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: ToBlogSlug(string?)
  nameWithType: StringExtensions.ToBlogSlug(string?)
  fullName: Songhay.Extensions.StringExtensions.ToBlogSlug(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions.Conversions.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: ToBlogSlug
    path: ../SonghayCore/Extensions/StringExtensions.Conversions.cs
    startLine: 68
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Converts the <xref href="System.String" data-throw-if-not-resolved="false"></xref> into a blog slug.
  example: []
  syntax:
    content: public static string ToBlogSlug(this string? input)
    parameters:
    - id: input
      type: System.String
      description: The input.
    return:
      type: System.String
    content.vb: Public Shared Function ToBlogSlug(input As String) As String
  overload: Songhay.Extensions.StringExtensions.ToBlogSlug*
  nameWithType.vb: StringExtensions.ToBlogSlug(String)
  fullName.vb: Songhay.Extensions.StringExtensions.ToBlogSlug(String)
  name.vb: ToBlogSlug(String)
- uid: Songhay.Extensions.StringExtensions.ToCamelCase(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.ToCamelCase(System.String)
  id: ToCamelCase(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: ToCamelCase(string?)
  nameWithType: StringExtensions.ToCamelCase(string?)
  fullName: Songhay.Extensions.StringExtensions.ToCamelCase(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions.Conversions.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: ToCamelCase
    path: ../SonghayCore/Extensions/StringExtensions.Conversions.cs
    startLine: 96
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: >-
    Converts the <xref href="System.String" data-throw-if-not-resolved="false"></xref> into camel case

    by lower-casing the first character.
  example: []
  syntax:
    content: public static string? ToCamelCase(this string? input)
    parameters:
    - id: input
      type: System.String
      description: The input.
    return:
      type: System.String
    content.vb: Public Shared Function ToCamelCase(input As String) As String
  overload: Songhay.Extensions.StringExtensions.ToCamelCase*
  nameWithType.vb: StringExtensions.ToCamelCase(String)
  fullName.vb: Songhay.Extensions.StringExtensions.ToCamelCase(String)
  name.vb: ToCamelCase(String)
- uid: Songhay.Extensions.StringExtensions.ToConfigurationKey(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.ToConfigurationKey(System.String)
  id: ToConfigurationKey(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: ToConfigurationKey(string?)
  nameWithType: StringExtensions.ToConfigurationKey(string?)
  fullName: Songhay.Extensions.StringExtensions.ToConfigurationKey(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions.Conversions.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: ToConfigurationKey
    path: ../SonghayCore/Extensions/StringExtensions.Conversions.cs
    startLine: 105
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: >-
    Convert a command-line <code>args</code> like those defined in <xref href="Songhay.Models.ConsoleArgsScalars" data-throw-if-not-resolved="false"></xref>

    to <xref href="Microsoft.Extensions.Configuration.IConfiguration" data-throw-if-not-resolved="false"></xref>-key format.
  example: []
  syntax:
    content: public static string ToConfigurationKey(this string? input)
    parameters:
    - id: input
      type: System.String
      description: The input.
    return:
      type: System.String
    content.vb: Public Shared Function ToConfigurationKey(input As String) As String
  overload: Songhay.Extensions.StringExtensions.ToConfigurationKey*
  nameWithType.vb: StringExtensions.ToConfigurationKey(String)
  fullName.vb: Songhay.Extensions.StringExtensions.ToConfigurationKey(String)
  name.vb: ToConfigurationKey(String)
- uid: Songhay.Extensions.StringExtensions.ToDigitsOnly(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.ToDigitsOnly(System.String)
  id: ToDigitsOnly(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: ToDigitsOnly(string?)
  nameWithType: StringExtensions.ToDigitsOnly(string?)
  fullName: Songhay.Extensions.StringExtensions.ToDigitsOnly(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions.Conversions.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: ToDigitsOnly
    path: ../SonghayCore/Extensions/StringExtensions.Conversions.cs
    startLine: 115
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Converts the <xref href="System.String" data-throw-if-not-resolved="false"></xref> into digits only.
  example: []
  syntax:
    content: public static string? ToDigitsOnly(this string? input)
    parameters:
    - id: input
      type: System.String
      description: The input.
    return:
      type: System.String
    content.vb: Public Shared Function ToDigitsOnly(input As String) As String
  overload: Songhay.Extensions.StringExtensions.ToDigitsOnly*
  nameWithType.vb: StringExtensions.ToDigitsOnly(String)
  fullName.vb: Songhay.Extensions.StringExtensions.ToDigitsOnly(String)
  name.vb: ToDigitsOnly(String)
- uid: Songhay.Extensions.StringExtensions.ToIntString(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.ToIntString(System.String)
  id: ToIntString(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: ToIntString(string?)
  nameWithType: StringExtensions.ToIntString(string?)
  fullName: Songhay.Extensions.StringExtensions.ToIntString(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions.Conversions.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: ToIntString
    path: ../SonghayCore/Extensions/StringExtensions.Conversions.cs
    startLine: 128
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Prepares a string to be converted to <code>int</code>.
  example: []
  syntax:
    content: public static string? ToIntString(this string? input)
    parameters:
    - id: input
      type: System.String
      description: The input.
    return:
      type: System.String
    content.vb: Public Shared Function ToIntString(input As String) As String
  overload: Songhay.Extensions.StringExtensions.ToIntString*
  nameWithType.vb: StringExtensions.ToIntString(String)
  fullName.vb: Songhay.Extensions.StringExtensions.ToIntString(String)
  name.vb: ToIntString(String)
- uid: Songhay.Extensions.StringExtensions.ToIntString(System.String,System.String)
  commentId: M:Songhay.Extensions.StringExtensions.ToIntString(System.String,System.String)
  id: ToIntString(System.String,System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: ToIntString(string?, string)
  nameWithType: StringExtensions.ToIntString(string?, string)
  fullName: Songhay.Extensions.StringExtensions.ToIntString(string?, string)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions.Conversions.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: ToIntString
    path: ../SonghayCore/Extensions/StringExtensions.Conversions.cs
    startLine: 135
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Prepares a string to be converted to <code>int</code>.
  example: []
  syntax:
    content: public static string? ToIntString(this string? input, string defaultValue)
    parameters:
    - id: input
      type: System.String
      description: The input.
    - id: defaultValue
      type: System.String
      description: The default value ("0" by default).
    return:
      type: System.String
    content.vb: Public Shared Function ToIntString(input As String, defaultValue As String) As String
  overload: Songhay.Extensions.StringExtensions.ToIntString*
  nameWithType.vb: StringExtensions.ToIntString(String, String)
  fullName.vb: Songhay.Extensions.StringExtensions.ToIntString(String, String)
  name.vb: ToIntString(String, String)
- uid: Songhay.Extensions.StringExtensions.ToNumberOfDirectoryLevels(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.ToNumberOfDirectoryLevels(System.String)
  id: ToNumberOfDirectoryLevels(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: ToNumberOfDirectoryLevels(string?)
  nameWithType: StringExtensions.ToNumberOfDirectoryLevels(string?)
  fullName: Songhay.Extensions.StringExtensions.ToNumberOfDirectoryLevels(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions.Conversions.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: ToNumberOfDirectoryLevels
    path: ../SonghayCore/Extensions/StringExtensions.Conversions.cs
    startLine: 156
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: >-
    Returns the number of directory levels

    based on the conventions <code>../</code> or <code>..\</code>.
  example: []
  syntax:
    content: public static int ToNumberOfDirectoryLevels(this string? path)
    parameters:
    - id: path
      type: System.String
      description: The path.
    return:
      type: System.Int32
    content.vb: Public Shared Function ToNumberOfDirectoryLevels(path As String) As Integer
  overload: Songhay.Extensions.StringExtensions.ToNumberOfDirectoryLevels*
  nameWithType.vb: StringExtensions.ToNumberOfDirectoryLevels(String)
  fullName.vb: Songhay.Extensions.StringExtensions.ToNumberOfDirectoryLevels(String)
  name.vb: ToNumberOfDirectoryLevels(String)
- uid: Songhay.Extensions.StringExtensions.ToNumericString(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.ToNumericString(System.String)
  id: ToNumericString(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: ToNumericString(string?)
  nameWithType: StringExtensions.ToNumericString(string?)
  fullName: Songhay.Extensions.StringExtensions.ToNumericString(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions.Conversions.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: ToNumericString
    path: ../SonghayCore/Extensions/StringExtensions.Conversions.cs
    startLine: 175
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Converts the <xref href="System.String" data-throw-if-not-resolved="false"></xref> into a numeric format for parsing.
  remarks: This member does not support parenthesis as indicators of negative numbers.
  example: []
  syntax:
    content: public static string? ToNumericString(this string? input)
    parameters:
    - id: input
      type: System.String
      description: The input.
    return:
      type: System.String
      description: Returns a numeric string ready for integer or float parsing.
    content.vb: Public Shared Function ToNumericString(input As String) As String
  overload: Songhay.Extensions.StringExtensions.ToNumericString*
  nameWithType.vb: StringExtensions.ToNumericString(String)
  fullName.vb: Songhay.Extensions.StringExtensions.ToNumericString(String)
  name.vb: ToNumericString(String)
- uid: Songhay.Extensions.StringExtensions.ToNumericString(System.String,System.String)
  commentId: M:Songhay.Extensions.StringExtensions.ToNumericString(System.String,System.String)
  id: ToNumericString(System.String,System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: ToNumericString(string?, string?)
  nameWithType: StringExtensions.ToNumericString(string?, string?)
  fullName: Songhay.Extensions.StringExtensions.ToNumericString(string?, string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions.Conversions.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: ToNumericString
    path: ../SonghayCore/Extensions/StringExtensions.Conversions.cs
    startLine: 188
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Converts the <xref href="System.String" data-throw-if-not-resolved="false"></xref> into a numeric format for parsing.
  remarks: This member does not support parenthesis as indicators of negative numbers.
  example: []
  syntax:
    content: public static string? ToNumericString(this string? input, string? defaultValue)
    parameters:
    - id: input
      type: System.String
      description: The input.
    - id: defaultValue
      type: System.String
      description: The default value ("0" by default).
    return:
      type: System.String
      description: Returns a numeric string ready for integer or float parsing.
    content.vb: Public Shared Function ToNumericString(input As String, defaultValue As String) As String
  overload: Songhay.Extensions.StringExtensions.ToNumericString*
  nameWithType.vb: StringExtensions.ToNumericString(String, String)
  fullName.vb: Songhay.Extensions.StringExtensions.ToNumericString(String, String)
  name.vb: ToNumericString(String, String)
- uid: Songhay.Extensions.StringExtensions.ToPascalCase(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.ToPascalCase(System.String)
  id: ToPascalCase(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: ToPascalCase(string?)
  nameWithType: StringExtensions.ToPascalCase(string?)
  fullName: Songhay.Extensions.StringExtensions.ToPascalCase(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions.Conversions.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: ToPascalCase
    path: ../SonghayCore/Extensions/StringExtensions.Conversions.cs
    startLine: 207
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: >-
    Converts the <xref href="System.String" data-throw-if-not-resolved="false"></xref> into camel case

    by upper-casing the first character.
  example: []
  syntax:
    content: public static string? ToPascalCase(this string? input)
    parameters:
    - id: input
      type: System.String
      description: The input.
    return:
      type: System.String
    content.vb: Public Shared Function ToPascalCase(input As String) As String
  overload: Songhay.Extensions.StringExtensions.ToPascalCase*
  nameWithType.vb: StringExtensions.ToPascalCase(String)
  fullName.vb: Songhay.Extensions.StringExtensions.ToPascalCase(String)
  name.vb: ToPascalCase(String)
- uid: Songhay.Extensions.StringExtensions.ToSnakeCase(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.ToSnakeCase(System.String)
  id: ToSnakeCase(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: ToSnakeCase(string?)
  nameWithType: StringExtensions.ToSnakeCase(string?)
  fullName: Songhay.Extensions.StringExtensions.ToSnakeCase(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions.Conversions.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: ToSnakeCase
    path: ../SonghayCore/Extensions/StringExtensions.Conversions.cs
    startLine: 217
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: >-
    Converts the <xref href="System.String" data-throw-if-not-resolved="false"></xref> into camel case

    then replaces every upper case character

    with an underscore and its lowercase equivalent.
  example: []
  syntax:
    content: public static string? ToSnakeCase(this string? input)
    parameters:
    - id: input
      type: System.String
      description: The input.
    return:
      type: System.String
    content.vb: Public Shared Function ToSnakeCase(input As String) As String
  overload: Songhay.Extensions.StringExtensions.ToSnakeCase*
  nameWithType.vb: StringExtensions.ToSnakeCase(String)
  fullName.vb: Songhay.Extensions.StringExtensions.ToSnakeCase(String)
  name.vb: ToSnakeCase(String)
- uid: Songhay.Extensions.StringExtensions.ToSubstringInContext(System.String,System.String,System.Int32)
  commentId: M:Songhay.Extensions.StringExtensions.ToSubstringInContext(System.String,System.String,System.Int32)
  id: ToSubstringInContext(System.String,System.String,System.Int32)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: ToSubstringInContext(string?, string?, int)
  nameWithType: StringExtensions.ToSubstringInContext(string?, string?, int)
  fullName: Songhay.Extensions.StringExtensions.ToSubstringInContext(string?, string?, int)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions.Conversions.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: ToSubstringInContext
    path: ../SonghayCore/Extensions/StringExtensions.Conversions.cs
    startLine: 235
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: >-
    Formats the <xref href="System.String" data-throw-if-not-resolved="false"></xref> into a shortened form,

    showing the search text in context.
  example: []
  syntax:
    content: public static string? ToSubstringInContext(this string? input, string? searchText, int contextLength)
    parameters:
    - id: input
      type: System.String
      description: The input.
    - id: searchText
      type: System.String
      description: The search text.
    - id: contextLength
      type: System.Int32
      description: Length of the context.
    return:
      type: System.String
    content.vb: Public Shared Function ToSubstringInContext(input As String, searchText As String, contextLength As Integer) As String
  overload: Songhay.Extensions.StringExtensions.ToSubstringInContext*
  nameWithType.vb: StringExtensions.ToSubstringInContext(String, String, Integer)
  fullName.vb: Songhay.Extensions.StringExtensions.ToSubstringInContext(String, String, Integer)
  name.vb: ToSubstringInContext(String, String, Integer)
- uid: Songhay.Extensions.StringExtensions.Truncate(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.Truncate(System.String)
  id: Truncate(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: Truncate(string?)
  nameWithType: StringExtensions.Truncate(string?)
  fullName: Songhay.Extensions.StringExtensions.Truncate(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions.Conversions.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: Truncate
    path: ../SonghayCore/Extensions/StringExtensions.Conversions.cs
    startLine: 269
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: >-
    Truncates the specified input to 16 characters.

    <param name="input">The input.</param>
  example: []
  syntax:
    content: public static string? Truncate(this string? input)
    parameters:
    - id: input
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function Truncate(input As String) As String
  overload: Songhay.Extensions.StringExtensions.Truncate*
  nameWithType.vb: StringExtensions.Truncate(String)
  fullName.vb: Songhay.Extensions.StringExtensions.Truncate(String)
  name.vb: Truncate(String)
- uid: Songhay.Extensions.StringExtensions.Truncate(System.String,System.Int32)
  commentId: M:Songhay.Extensions.StringExtensions.Truncate(System.String,System.Int32)
  id: Truncate(System.String,System.Int32)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: Truncate(string?, int)
  nameWithType: StringExtensions.Truncate(string?, int)
  fullName: Songhay.Extensions.StringExtensions.Truncate(string?, int)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions.Conversions.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: Truncate
    path: ../SonghayCore/Extensions/StringExtensions.Conversions.cs
    startLine: 276
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: >-
    Truncates the specified input to 16 characters.

    <param name="input">The input.</param><param name="length">The length.</param>
  example: []
  syntax:
    content: public static string? Truncate(this string? input, int length)
    parameters:
    - id: input
      type: System.String
    - id: length
      type: System.Int32
    return:
      type: System.String
    content.vb: Public Shared Function Truncate(input As String, length As Integer) As String
  overload: Songhay.Extensions.StringExtensions.Truncate*
  nameWithType.vb: StringExtensions.Truncate(String, Integer)
  fullName.vb: Songhay.Extensions.StringExtensions.Truncate(String, Integer)
  name.vb: Truncate(String, Integer)
- uid: Songhay.Extensions.StringExtensions.Truncate(System.String,System.Int32,System.String)
  commentId: M:Songhay.Extensions.StringExtensions.Truncate(System.String,System.Int32,System.String)
  id: Truncate(System.String,System.Int32,System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: Truncate(string?, int, string)
  nameWithType: StringExtensions.Truncate(string?, int, string)
  fullName: Songhay.Extensions.StringExtensions.Truncate(string?, int, string)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions.Conversions.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: Truncate
    path: ../SonghayCore/Extensions/StringExtensions.Conversions.cs
    startLine: 284
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Truncates the specified input.
  example: []
  syntax:
    content: public static string? Truncate(this string? input, int length, string ellipsis)
    parameters:
    - id: input
      type: System.String
      description: The input.
    - id: length
      type: System.Int32
      description: The length.
    - id: ellipsis
      type: System.String
      description: ''
    return:
      type: System.String
    content.vb: Public Shared Function Truncate(input As String, length As Integer, ellipsis As String) As String
  overload: Songhay.Extensions.StringExtensions.Truncate*
  nameWithType.vb: StringExtensions.Truncate(String, Integer, String)
  fullName.vb: Songhay.Extensions.StringExtensions.Truncate(String, Integer, String)
  name.vb: Truncate(String, Integer, String)
- uid: Songhay.Extensions.StringExtensions.WithConfigurationHelpTextSuffix(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.WithConfigurationHelpTextSuffix(System.String)
  id: WithConfigurationHelpTextSuffix(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: WithConfigurationHelpTextSuffix(string?)
  nameWithType: StringExtensions.WithConfigurationHelpTextSuffix(string?)
  fullName: Songhay.Extensions.StringExtensions.WithConfigurationHelpTextSuffix(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions.Conversions.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: WithConfigurationHelpTextSuffix
    path: ../SonghayCore/Extensions/StringExtensions.Conversions.cs
    startLine: 298
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: >-
    Returns the specified <xref href="System.String" data-throw-if-not-resolved="false"></xref>

    with <xref href="Songhay.Models.ConsoleArgsScalars.HelpTextSuffix" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static string WithConfigurationHelpTextSuffix(this string? input)
    parameters:
    - id: input
      type: System.String
      description: The input.
    return:
      type: System.String
    content.vb: Public Shared Function WithConfigurationHelpTextSuffix(input As String) As String
  overload: Songhay.Extensions.StringExtensions.WithConfigurationHelpTextSuffix*
  nameWithType.vb: StringExtensions.WithConfigurationHelpTextSuffix(String)
  fullName.vb: Songhay.Extensions.StringExtensions.WithConfigurationHelpTextSuffix(String)
  name.vb: WithConfigurationHelpTextSuffix(String)
- uid: Songhay.Extensions.StringExtensions.CsvSplit(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.CsvSplit(System.String)
  id: CsvSplit(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: CsvSplit(string?)
  nameWithType: StringExtensions.CsvSplit(string?)
  fullName: Songhay.Extensions.StringExtensions.CsvSplit(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions.CsvSplit.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: CsvSplit
    path: ../SonghayCore/Extensions/StringExtensions.CsvSplit.cs
    startLine: 14
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Splits CSV text format into an array of <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
  remarks: >-
    This code is based on “LINQ to TEXT and LINQ to CSV” by Eric Lippert

    [http://blogs.msdn.com/b/ericwhite/archive/2008/09/30/linq-to-text-and-linq-to-csv.aspx]
  example: []
  syntax:
    content: public static string[]? CsvSplit(this string? source)
    parameters:
    - id: source
      type: System.String
      description: The source.
    return:
      type: System.String[]
    content.vb: Public Shared Function CsvSplit(source As String) As String()
  overload: Songhay.Extensions.StringExtensions.CsvSplit*
  nameWithType.vb: StringExtensions.CsvSplit(String)
  fullName.vb: Songhay.Extensions.StringExtensions.CsvSplit(String)
  name.vb: CsvSplit(String)
- uid: Songhay.Extensions.StringExtensions.EqualsInvariant(System.String,System.String)
  commentId: M:Songhay.Extensions.StringExtensions.EqualsInvariant(System.String,System.String)
  id: EqualsInvariant(System.String,System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: EqualsInvariant(string?, string?)
  nameWithType: StringExtensions.EqualsInvariant(string?, string?)
  fullName: Songhay.Extensions.StringExtensions.EqualsInvariant(string?, string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions._.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: EqualsInvariant
    path: ../SonghayCore/Extensions/StringExtensions._.cs
    startLine: 13
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: >-
    Returns <code>true</code> when the strings are equal without regard to cultural locales

    or casing.
  example: []
  syntax:
    content: public static bool EqualsInvariant(this string? input, string? otherString)
    parameters:
    - id: input
      type: System.String
      description: The input.
    - id: otherString
      type: System.String
      description: The other <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
    content.vb: Public Shared Function EqualsInvariant(input As String, otherString As String) As Boolean
  overload: Songhay.Extensions.StringExtensions.EqualsInvariant*
  nameWithType.vb: StringExtensions.EqualsInvariant(String, String)
  fullName.vb: Songhay.Extensions.StringExtensions.EqualsInvariant(String, String)
  name.vb: EqualsInvariant(String, String)
- uid: Songhay.Extensions.StringExtensions.EqualsInvariant(System.String,System.String,System.Boolean)
  commentId: M:Songhay.Extensions.StringExtensions.EqualsInvariant(System.String,System.String,System.Boolean)
  id: EqualsInvariant(System.String,System.String,System.Boolean)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: EqualsInvariant(string?, string?, bool)
  nameWithType: StringExtensions.EqualsInvariant(string?, string?, bool)
  fullName: Songhay.Extensions.StringExtensions.EqualsInvariant(string?, string?, bool)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions._.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: EqualsInvariant
    path: ../SonghayCore/Extensions/StringExtensions._.cs
    startLine: 22
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Returns <code>true</code> when the strings are equal without regard to cultural locales.
  example: []
  syntax:
    content: public static bool EqualsInvariant(this string? input, string? otherString, bool ignoreCase)
    parameters:
    - id: input
      type: System.String
      description: The input.
    - id: otherString
      type: System.String
      description: The other <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
    - id: ignoreCase
      type: System.Boolean
      description: ''
    return:
      type: System.Boolean
    content.vb: Public Shared Function EqualsInvariant(input As String, otherString As String, ignoreCase As Boolean) As Boolean
  overload: Songhay.Extensions.StringExtensions.EqualsInvariant*
  nameWithType.vb: StringExtensions.EqualsInvariant(String, String, Boolean)
  fullName.vb: Songhay.Extensions.StringExtensions.EqualsInvariant(String, String, Boolean)
  name.vb: EqualsInvariant(String, String, Boolean)
- uid: Songhay.Extensions.StringExtensions.EscapeInterpolation(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.EscapeInterpolation(System.String)
  id: EscapeInterpolation(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: EscapeInterpolation(string?)
  nameWithType: StringExtensions.EscapeInterpolation(string?)
  fullName: Songhay.Extensions.StringExtensions.EscapeInterpolation(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions._.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: EscapeInterpolation
    path: ../SonghayCore/Extensions/StringExtensions._.cs
    startLine: 33
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Escapes the interpolation tokens of <xref href="System.String.Format(System.String%2cSystem.Object%5b%5d)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static string? EscapeInterpolation(this string? input)
    parameters:
    - id: input
      type: System.String
      description: The input.
    return:
      type: System.String
    content.vb: Public Shared Function EscapeInterpolation(input As String) As String
  overload: Songhay.Extensions.StringExtensions.EscapeInterpolation*
  nameWithType.vb: StringExtensions.EscapeInterpolation(String)
  fullName.vb: Songhay.Extensions.StringExtensions.EscapeInterpolation(String)
  name.vb: EscapeInterpolation(String)
- uid: Songhay.Extensions.StringExtensions.FromCamelCaseToEnumerable(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.FromCamelCaseToEnumerable(System.String)
  id: FromCamelCaseToEnumerable(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: FromCamelCaseToEnumerable(string?)
  nameWithType: StringExtensions.FromCamelCaseToEnumerable(string?)
  fullName: Songhay.Extensions.StringExtensions.FromCamelCaseToEnumerable(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions._.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: FromCamelCaseToEnumerable
    path: ../SonghayCore/Extensions/StringExtensions._.cs
    startLine: 40
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Converts camel-case <xref href="System.String" data-throw-if-not-resolved="false"></xref> to <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static IEnumerable<string> FromCamelCaseToEnumerable(this string? input)
    parameters:
    - id: input
      type: System.String
      description: The input.
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public Shared Function FromCamelCaseToEnumerable(input As String) As IEnumerable(Of String)
  overload: Songhay.Extensions.StringExtensions.FromCamelCaseToEnumerable*
  nameWithType.vb: StringExtensions.FromCamelCaseToEnumerable(String)
  fullName.vb: Songhay.Extensions.StringExtensions.FromCamelCaseToEnumerable(String)
  name.vb: FromCamelCaseToEnumerable(String)
- uid: Songhay.Extensions.StringExtensions.In(System.String,System.String)
  commentId: M:Songhay.Extensions.StringExtensions.In(System.String,System.String)
  id: In(System.String,System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: In(string?, string?)
  nameWithType: StringExtensions.In(string?, string?)
  fullName: Songhay.Extensions.StringExtensions.In(string?, string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions._.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: In
    path: ../SonghayCore/Extensions/StringExtensions._.cs
    startLine: 49
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Determines whether the specified input is in the comma-delimited values.
  example: []
  syntax:
    content: public static bool In(this string? input, string? delimitedValues)
    parameters:
    - id: input
      type: System.String
      description: The input.
    - id: delimitedValues
      type: System.String
      description: The delimited values.
    return:
      type: System.Boolean
    content.vb: Public Shared Function [In](input As String, delimitedValues As String) As Boolean
  overload: Songhay.Extensions.StringExtensions.In*
  nameWithType.vb: StringExtensions.In(String, String)
  fullName.vb: Songhay.Extensions.StringExtensions.In(String, String)
  name.vb: In(String, String)
- uid: Songhay.Extensions.StringExtensions.In(System.String,System.String,System.Char)
  commentId: M:Songhay.Extensions.StringExtensions.In(System.String,System.String,System.Char)
  id: In(System.String,System.String,System.Char)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: In(string?, string?, char)
  nameWithType: StringExtensions.In(string?, string?, char)
  fullName: Songhay.Extensions.StringExtensions.In(string?, string?, char)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions._.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: In
    path: ../SonghayCore/Extensions/StringExtensions._.cs
    startLine: 57
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Determines whether the specified input is in the delimited values.
  example: []
  syntax:
    content: public static bool In(this string? input, string? delimitedValues, char separator)
    parameters:
    - id: input
      type: System.String
      description: The input.
    - id: delimitedValues
      type: System.String
      description: The delimited values.
    - id: separator
      type: System.Char
      description: The separator.
    return:
      type: System.Boolean
    content.vb: Public Shared Function [In](input As String, delimitedValues As String, separator As Char) As Boolean
  overload: Songhay.Extensions.StringExtensions.In*
  nameWithType.vb: StringExtensions.In(String, String, Char)
  fullName.vb: Songhay.Extensions.StringExtensions.In(String, String, Char)
  name.vb: In(String, String, Char)
- uid: Songhay.Extensions.StringExtensions.InDoubleQuotes(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.InDoubleQuotes(System.String)
  id: InDoubleQuotes(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: InDoubleQuotes(string?)
  nameWithType: StringExtensions.InDoubleQuotes(string?)
  fullName: Songhay.Extensions.StringExtensions.InDoubleQuotes(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions._.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: InDoubleQuotes
    path: ../SonghayCore/Extensions/StringExtensions._.cs
    startLine: 71
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Returns <xref href="System.String" data-throw-if-not-resolved="false"></xref> in double quotes.
  example: []
  syntax:
    content: public static string? InDoubleQuotes(this string? input)
    parameters:
    - id: input
      type: System.String
      description: The input.
    return:
      type: System.String
    content.vb: Public Shared Function InDoubleQuotes(input As String) As String
  overload: Songhay.Extensions.StringExtensions.InDoubleQuotes*
  nameWithType.vb: StringExtensions.InDoubleQuotes(String)
  fullName.vb: Songhay.Extensions.StringExtensions.InDoubleQuotes(String)
  name.vb: InDoubleQuotes(String)
- uid: Songhay.Extensions.StringExtensions.InDoubleQuotesOrDefault(System.String,System.String)
  commentId: M:Songhay.Extensions.StringExtensions.InDoubleQuotesOrDefault(System.String,System.String)
  id: InDoubleQuotesOrDefault(System.String,System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: InDoubleQuotesOrDefault(string?, string)
  nameWithType: StringExtensions.InDoubleQuotesOrDefault(string?, string)
  fullName: Songhay.Extensions.StringExtensions.InDoubleQuotesOrDefault(string?, string)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions._.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: InDoubleQuotesOrDefault
    path: ../SonghayCore/Extensions/StringExtensions._.cs
    startLine: 85
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Returns <xref href="System.String" data-throw-if-not-resolved="false"></xref> in double quotes or default.
  example: []
  syntax:
    content: public static string? InDoubleQuotesOrDefault(this string? input, string defaultValue)
    parameters:
    - id: input
      type: System.String
      description: The input.
    - id: defaultValue
      type: System.String
      description: The default value.
    return:
      type: System.String
    content.vb: Public Shared Function InDoubleQuotesOrDefault(input As String, defaultValue As String) As String
  overload: Songhay.Extensions.StringExtensions.InDoubleQuotesOrDefault*
  nameWithType.vb: StringExtensions.InDoubleQuotesOrDefault(String, String)
  fullName.vb: Songhay.Extensions.StringExtensions.InDoubleQuotesOrDefault(String, String)
  name.vb: InDoubleQuotesOrDefault(String, String)
- uid: Songhay.Extensions.StringExtensions.InsertSpacesBeforeCaps(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.InsertSpacesBeforeCaps(System.String)
  id: InsertSpacesBeforeCaps(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: InsertSpacesBeforeCaps(string?)
  nameWithType: StringExtensions.InsertSpacesBeforeCaps(string?)
  fullName: Songhay.Extensions.StringExtensions.InsertSpacesBeforeCaps(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions._.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: InsertSpacesBeforeCaps
    path: ../SonghayCore/Extensions/StringExtensions._.cs
    startLine: 92
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Inserts the spaces before caps.
  example: []
  syntax:
    content: public static IEnumerable<char> InsertSpacesBeforeCaps(this string? input)
    parameters:
    - id: input
      type: System.String
      description: The input.
    return:
      type: System.Collections.Generic.IEnumerable{System.Char}
    content.vb: Public Shared Function InsertSpacesBeforeCaps(input As String) As IEnumerable(Of Char)
  overload: Songhay.Extensions.StringExtensions.InsertSpacesBeforeCaps*
  nameWithType.vb: StringExtensions.InsertSpacesBeforeCaps(String)
  fullName.vb: Songhay.Extensions.StringExtensions.InsertSpacesBeforeCaps(String)
  name.vb: InsertSpacesBeforeCaps(String)
- uid: Songhay.Extensions.StringExtensions.IsByte(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.IsByte(System.String)
  id: IsByte(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: IsByte(string?)
  nameWithType: StringExtensions.IsByte(string?)
  fullName: Songhay.Extensions.StringExtensions.IsByte(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions._.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: IsByte
    path: ../SonghayCore/Extensions/StringExtensions._.cs
    startLine: 110
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Determines whether the specified input is byte.
  example: []
  syntax:
    content: public static bool IsByte(this string? input)
    parameters:
    - id: input
      type: System.String
      description: The input.
    return:
      type: System.Boolean
      description: <code>true</code> if the specified input is byte; otherwise, <code>false</code>.
    content.vb: Public Shared Function IsByte(input As String) As Boolean
  overload: Songhay.Extensions.StringExtensions.IsByte*
  nameWithType.vb: StringExtensions.IsByte(String)
  fullName.vb: Songhay.Extensions.StringExtensions.IsByte(String)
  name.vb: IsByte(String)
- uid: Songhay.Extensions.StringExtensions.IsByte(System.String,System.Predicate{System.Byte})
  commentId: M:Songhay.Extensions.StringExtensions.IsByte(System.String,System.Predicate{System.Byte})
  id: IsByte(System.String,System.Predicate{System.Byte})
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: IsByte(string?, Predicate<byte>?)
  nameWithType: StringExtensions.IsByte(string?, Predicate<byte>?)
  fullName: Songhay.Extensions.StringExtensions.IsByte(string?, System.Predicate<byte>?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions._.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: IsByte
    path: ../SonghayCore/Extensions/StringExtensions._.cs
    startLine: 120
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Determines whether the specified input is byte.
  example: []
  syntax:
    content: public static bool IsByte(this string? input, Predicate<byte>? secondaryTest)
    parameters:
    - id: input
      type: System.String
      description: The input.
    - id: secondaryTest
      type: System.Predicate{System.Byte}
      description: The secondary test.
    return:
      type: System.Boolean
      description: <code>true</code> if the specified input is byte; otherwise, <code>false</code>.
    content.vb: Public Shared Function IsByte(input As String, secondaryTest As Predicate(Of Byte)) As Boolean
  overload: Songhay.Extensions.StringExtensions.IsByte*
  nameWithType.vb: StringExtensions.IsByte(String, Predicate(Of Byte))
  fullName.vb: Songhay.Extensions.StringExtensions.IsByte(String, System.Predicate(Of Byte))
  name.vb: IsByte(String, Predicate(Of Byte))
- uid: Songhay.Extensions.StringExtensions.IsDecimal(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.IsDecimal(System.String)
  id: IsDecimal(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: IsDecimal(string?)
  nameWithType: StringExtensions.IsDecimal(string?)
  fullName: Songhay.Extensions.StringExtensions.IsDecimal(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions._.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: IsDecimal
    path: ../SonghayCore/Extensions/StringExtensions._.cs
    startLine: 134
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Determines whether the specified input is decimal.
  example: []
  syntax:
    content: public static bool IsDecimal(this string? input)
    parameters:
    - id: input
      type: System.String
      description: The input.
    return:
      type: System.Boolean
      description: <code>true</code> if the specified input is decimal; otherwise, <code>false</code>.
    content.vb: Public Shared Function IsDecimal(input As String) As Boolean
  overload: Songhay.Extensions.StringExtensions.IsDecimal*
  nameWithType.vb: StringExtensions.IsDecimal(String)
  fullName.vb: Songhay.Extensions.StringExtensions.IsDecimal(String)
  name.vb: IsDecimal(String)
- uid: Songhay.Extensions.StringExtensions.IsDecimal(System.String,System.Predicate{System.Decimal})
  commentId: M:Songhay.Extensions.StringExtensions.IsDecimal(System.String,System.Predicate{System.Decimal})
  id: IsDecimal(System.String,System.Predicate{System.Decimal})
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: IsDecimal(string?, Predicate<decimal>?)
  nameWithType: StringExtensions.IsDecimal(string?, Predicate<decimal>?)
  fullName: Songhay.Extensions.StringExtensions.IsDecimal(string?, System.Predicate<decimal>?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions._.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: IsDecimal
    path: ../SonghayCore/Extensions/StringExtensions._.cs
    startLine: 144
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Determines whether the specified input is decimal.
  example: []
  syntax:
    content: public static bool IsDecimal(this string? input, Predicate<decimal>? secondaryTest)
    parameters:
    - id: input
      type: System.String
      description: The input.
    - id: secondaryTest
      type: System.Predicate{System.Decimal}
      description: The secondary test.
    return:
      type: System.Boolean
      description: <code>true</code> if the specified input is decimal; otherwise, <code>false</code>.
    content.vb: Public Shared Function IsDecimal(input As String, secondaryTest As Predicate(Of Decimal)) As Boolean
  overload: Songhay.Extensions.StringExtensions.IsDecimal*
  nameWithType.vb: StringExtensions.IsDecimal(String, Predicate(Of Decimal))
  fullName.vb: Songhay.Extensions.StringExtensions.IsDecimal(String, System.Predicate(Of Decimal))
  name.vb: IsDecimal(String, Predicate(Of Decimal))
- uid: Songhay.Extensions.StringExtensions.IsInteger(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.IsInteger(System.String)
  id: IsInteger(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: IsInteger(string?)
  nameWithType: StringExtensions.IsInteger(string?)
  fullName: Songhay.Extensions.StringExtensions.IsInteger(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions._.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: IsInteger
    path: ../SonghayCore/Extensions/StringExtensions._.cs
    startLine: 158
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Determines whether the specified input is integer.
  example: []
  syntax:
    content: public static bool IsInteger(this string? input)
    parameters:
    - id: input
      type: System.String
      description: The input.
    return:
      type: System.Boolean
      description: <code>true</code> if the specified input is integer; otherwise, <code>false</code>.
    content.vb: Public Shared Function IsInteger(input As String) As Boolean
  overload: Songhay.Extensions.StringExtensions.IsInteger*
  nameWithType.vb: StringExtensions.IsInteger(String)
  fullName.vb: Songhay.Extensions.StringExtensions.IsInteger(String)
  name.vb: IsInteger(String)
- uid: Songhay.Extensions.StringExtensions.IsInteger(System.String,System.Predicate{System.Int32})
  commentId: M:Songhay.Extensions.StringExtensions.IsInteger(System.String,System.Predicate{System.Int32})
  id: IsInteger(System.String,System.Predicate{System.Int32})
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: IsInteger(string?, Predicate<int>?)
  nameWithType: StringExtensions.IsInteger(string?, Predicate<int>?)
  fullName: Songhay.Extensions.StringExtensions.IsInteger(string?, System.Predicate<int>?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions._.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: IsInteger
    path: ../SonghayCore/Extensions/StringExtensions._.cs
    startLine: 168
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Determines whether the specified input is integer.
  example: []
  syntax:
    content: public static bool IsInteger(this string? input, Predicate<int>? secondaryTest)
    parameters:
    - id: input
      type: System.String
      description: The input.
    - id: secondaryTest
      type: System.Predicate{System.Int32}
      description: The secondary test.
    return:
      type: System.Boolean
      description: <code>true</code> if the specified input is integer; otherwise, <code>false</code>.
    content.vb: Public Shared Function IsInteger(input As String, secondaryTest As Predicate(Of Integer)) As Boolean
  overload: Songhay.Extensions.StringExtensions.IsInteger*
  nameWithType.vb: StringExtensions.IsInteger(String, Predicate(Of Integer))
  fullName.vb: Songhay.Extensions.StringExtensions.IsInteger(String, System.Predicate(Of Integer))
  name.vb: IsInteger(String, Predicate(Of Integer))
- uid: Songhay.Extensions.StringExtensions.IsLong(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.IsLong(System.String)
  id: IsLong(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: IsLong(string?)
  nameWithType: StringExtensions.IsLong(string?)
  fullName: Songhay.Extensions.StringExtensions.IsLong(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions._.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: IsLong
    path: ../SonghayCore/Extensions/StringExtensions._.cs
    startLine: 182
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Determines whether the specified input is long.
  example: []
  syntax:
    content: public static bool IsLong(this string? input)
    parameters:
    - id: input
      type: System.String
      description: The input.
    return:
      type: System.Boolean
      description: <code>true</code> if the specified input is long; otherwise, <code>false</code>.
    content.vb: Public Shared Function IsLong(input As String) As Boolean
  overload: Songhay.Extensions.StringExtensions.IsLong*
  nameWithType.vb: StringExtensions.IsLong(String)
  fullName.vb: Songhay.Extensions.StringExtensions.IsLong(String)
  name.vb: IsLong(String)
- uid: Songhay.Extensions.StringExtensions.IsLong(System.String,System.Predicate{System.Int64})
  commentId: M:Songhay.Extensions.StringExtensions.IsLong(System.String,System.Predicate{System.Int64})
  id: IsLong(System.String,System.Predicate{System.Int64})
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: IsLong(string?, Predicate<long>?)
  nameWithType: StringExtensions.IsLong(string?, Predicate<long>?)
  fullName: Songhay.Extensions.StringExtensions.IsLong(string?, System.Predicate<long>?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions._.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: IsLong
    path: ../SonghayCore/Extensions/StringExtensions._.cs
    startLine: 192
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Determines whether the specified input is long.
  example: []
  syntax:
    content: public static bool IsLong(this string? input, Predicate<long>? secondaryTest)
    parameters:
    - id: input
      type: System.String
      description: The input.
    - id: secondaryTest
      type: System.Predicate{System.Int64}
      description: The secondary test.
    return:
      type: System.Boolean
      description: <code>true</code> if the specified input is long; otherwise, <code>false</code>.
    content.vb: Public Shared Function IsLong(input As String, secondaryTest As Predicate(Of Long)) As Boolean
  overload: Songhay.Extensions.StringExtensions.IsLong*
  nameWithType.vb: StringExtensions.IsLong(String, Predicate(Of Long))
  fullName.vb: Songhay.Extensions.StringExtensions.IsLong(String, System.Predicate(Of Long))
  name.vb: IsLong(String, Predicate(Of Long))
- uid: Songhay.Extensions.StringExtensions.IsTelephoneNumber(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.IsTelephoneNumber(System.String)
  id: IsTelephoneNumber(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: IsTelephoneNumber(string?)
  nameWithType: StringExtensions.IsTelephoneNumber(string?)
  fullName: Songhay.Extensions.StringExtensions.IsTelephoneNumber(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions._.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: IsTelephoneNumber
    path: ../SonghayCore/Extensions/StringExtensions._.cs
    startLine: 206
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Determines whether the specified input is a telephone number.
  example: []
  syntax:
    content: public static bool IsTelephoneNumber(this string? input)
    parameters:
    - id: input
      type: System.String
      description: The input.
    return:
      type: System.Boolean
      description: <code>true</code> if is telephone number; otherwise, <code>false</code>.
    content.vb: Public Shared Function IsTelephoneNumber(input As String) As Boolean
  overload: Songhay.Extensions.StringExtensions.IsTelephoneNumber*
  nameWithType.vb: StringExtensions.IsTelephoneNumber(String)
  fullName.vb: Songhay.Extensions.StringExtensions.IsTelephoneNumber(String)
  name.vb: IsTelephoneNumber(String)
- uid: Songhay.Extensions.StringExtensions.IsUnc(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.IsUnc(System.String)
  id: IsUnc(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: IsUnc(string?)
  nameWithType: StringExtensions.IsUnc(string?)
  fullName: Songhay.Extensions.StringExtensions.IsUnc(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions._.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: IsUnc
    path: ../SonghayCore/Extensions/StringExtensions._.cs
    startLine: 221
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Determines whether the specified input is a UNC.
  remarks: >-
    📚 https://stackoverflow.com/a/47531093/22944

    📚 https://en.wikipedia.org/wiki/Path_(computing)#Uniform_Naming_Convention
  example: []
  syntax:
    content: public static bool IsUnc(this string? input)
    parameters:
    - id: input
      type: System.String
      description: The input.
    return:
      type: System.Boolean
      description: <code>true</code> if is a UNC; otherwise, <code>false</code>.
    content.vb: Public Shared Function IsUnc(input As String) As Boolean
  overload: Songhay.Extensions.StringExtensions.IsUnc*
  nameWithType.vb: StringExtensions.IsUnc(String)
  fullName.vb: Songhay.Extensions.StringExtensions.IsUnc(String)
  name.vb: IsUnc(String)
- uid: Songhay.Extensions.StringExtensions.LooksLikeEmailAddress(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.LooksLikeEmailAddress(System.String)
  id: LooksLikeEmailAddress(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: LooksLikeEmailAddress(string?)
  nameWithType: StringExtensions.LooksLikeEmailAddress(string?)
  fullName: Songhay.Extensions.StringExtensions.LooksLikeEmailAddress(string?)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions._.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: LooksLikeEmailAddress
    path: ../SonghayCore/Extensions/StringExtensions._.cs
    startLine: 238
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Determines whether the specified input looks like an email address.
  remarks: >-
    “In short, don’t expect a single, usable regex to do a proper job.

    And the best regex will validate the syntax, not the validity

    of an e-mail (jhohn@example.com is correct but it will probably bounce…).”

    [http://stackoverflow.com/questions/201323/how-to-use-a-regular-expression-to-validate-an-email-addresses]
  example: []
  syntax:
    content: public static bool LooksLikeEmailAddress(this string? input)
    parameters:
    - id: input
      type: System.String
      description: The input.
    return:
      type: System.Boolean
      description: <code>true</code> if seems to be an email address; otherwise, <code>false</code>.
    content.vb: Public Shared Function LooksLikeEmailAddress(input As String) As Boolean
  overload: Songhay.Extensions.StringExtensions.LooksLikeEmailAddress*
  nameWithType.vb: StringExtensions.LooksLikeEmailAddress(String)
  fullName.vb: Songhay.Extensions.StringExtensions.LooksLikeEmailAddress(String)
  name.vb: LooksLikeEmailAddress(String)
- uid: Songhay.Extensions.StringExtensions.RemoveDiacritics(System.String)
  commentId: M:Songhay.Extensions.StringExtensions.RemoveDiacritics(System.String)
  id: RemoveDiacritics(System.String)
  isExtensionMethod: true
  parent: Songhay.Extensions.StringExtensions
  langs:
  - csharp
  - vb
  name: RemoveDiacritics(string)
  nameWithType: StringExtensions.RemoveDiacritics(string)
  fullName: Songhay.Extensions.StringExtensions.RemoveDiacritics(string)
  type: Method
  source:
    remote:
      path: SonghayCore/Extensions/StringExtensions._.cs
      branch: dev/version-8.0.1
      repo: git@github.com:BryanWilhite/SonghayCore.git
    id: RemoveDiacritics
    path: ../SonghayCore/Extensions/StringExtensions._.cs
    startLine: 255
  assemblies:
  - SonghayCore
  namespace: Songhay.Extensions
  summary: Remove accent from strings
  remarks: >-
    From Tomas Kubes, http://www.codeproject.com/Articles/31050/String-Extension-Collection-for-C

    Also, see http://stackoverflow.com/questions/249087/how-do-i-remove-diacritics-accents-from-a-string-in-net
  example:
  - >-
    input:  "Příliš žluťoučký kůň úpěl ďábelské ódy."

    result: "Prilis zlutoucky kun upel dabelske ody."
  syntax:
    content: public static string RemoveDiacritics(this string input)
    parameters:
    - id: input
      type: System.String
      description: The input.
    return:
      type: System.String
      description: <xref href="System.String" data-throw-if-not-resolved="false"></xref> without accents
    content.vb: Public Shared Function RemoveDiacritics(input As String) As String
  overload: Songhay.Extensions.StringExtensions.RemoveDiacritics*
  nameWithType.vb: StringExtensions.RemoveDiacritics(String)
  fullName.vb: Songhay.Extensions.StringExtensions.RemoveDiacritics(String)
  name.vb: RemoveDiacritics(String)
references:
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Songhay.Extensions
  commentId: N:Songhay.Extensions
  href: Songhay.html
  name: Songhay.Extensions
  nameWithType: Songhay.Extensions
  fullName: Songhay.Extensions
  spec.csharp:
  - uid: Songhay
    name: Songhay
    href: Songhay.html
  - name: .
  - uid: Songhay.Extensions
    name: Extensions
    href: Songhay.Extensions.html
  spec.vb:
  - uid: Songhay
    name: Songhay
    href: Songhay.html
  - name: .
  - uid: Songhay.Extensions
    name: Extensions
    href: Songhay.Extensions.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.char
  name: char
  nameWithType: char
  fullName: char
  nameWithType.vb: Char
  fullName.vb: Char
  name.vb: Char
- uid: Songhay.Extensions.StringExtensions.FromSnakeToCaps*
  commentId: Overload:Songhay.Extensions.StringExtensions.FromSnakeToCaps
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_FromSnakeToCaps_System_String_
  name: FromSnakeToCaps
  nameWithType: StringExtensions.FromSnakeToCaps
  fullName: Songhay.Extensions.StringExtensions.FromSnakeToCaps
- uid: Songhay.Extensions.StringExtensions.Reverse*
  commentId: Overload:Songhay.Extensions.StringExtensions.Reverse
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_Reverse_System_String_
  name: Reverse
  nameWithType: StringExtensions.Reverse
  fullName: Songhay.Extensions.StringExtensions.Reverse
- uid: Songhay.Extensions.StringExtensions.ToAsciiLettersWithSpacer*
  commentId: Overload:Songhay.Extensions.StringExtensions.ToAsciiLettersWithSpacer
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_ToAsciiLettersWithSpacer_System_String_
  name: ToAsciiLettersWithSpacer
  nameWithType: StringExtensions.ToAsciiLettersWithSpacer
  fullName: Songhay.Extensions.StringExtensions.ToAsciiLettersWithSpacer
- uid: Songhay.Extensions.StringExtensions.ToBlogSlug*
  commentId: Overload:Songhay.Extensions.StringExtensions.ToBlogSlug
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_ToBlogSlug_System_String_
  name: ToBlogSlug
  nameWithType: StringExtensions.ToBlogSlug
  fullName: Songhay.Extensions.StringExtensions.ToBlogSlug
- uid: Songhay.Extensions.StringExtensions.ToCamelCase*
  commentId: Overload:Songhay.Extensions.StringExtensions.ToCamelCase
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_ToCamelCase_System_String_
  name: ToCamelCase
  nameWithType: StringExtensions.ToCamelCase
  fullName: Songhay.Extensions.StringExtensions.ToCamelCase
- uid: Songhay.Models.ConsoleArgsScalars
  commentId: T:Songhay.Models.ConsoleArgsScalars
  href: Songhay.Models.ConsoleArgsScalars.html
  name: ConsoleArgsScalars
  nameWithType: ConsoleArgsScalars
  fullName: Songhay.Models.ConsoleArgsScalars
- uid: Microsoft.Extensions.Configuration.IConfiguration
  commentId: T:Microsoft.Extensions.Configuration.IConfiguration
  parent: Microsoft.Extensions.Configuration
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.configuration.iconfiguration
  name: IConfiguration
  nameWithType: IConfiguration
  fullName: Microsoft.Extensions.Configuration.IConfiguration
- uid: Songhay.Extensions.StringExtensions.ToConfigurationKey*
  commentId: Overload:Songhay.Extensions.StringExtensions.ToConfigurationKey
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_ToConfigurationKey_System_String_
  name: ToConfigurationKey
  nameWithType: StringExtensions.ToConfigurationKey
  fullName: Songhay.Extensions.StringExtensions.ToConfigurationKey
- uid: Microsoft.Extensions.Configuration
  commentId: N:Microsoft.Extensions.Configuration
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft
  name: Microsoft.Extensions.Configuration
  nameWithType: Microsoft.Extensions.Configuration
  fullName: Microsoft.Extensions.Configuration
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.Configuration
    name: Configuration
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.configuration
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.Configuration
    name: Configuration
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.configuration
- uid: Songhay.Extensions.StringExtensions.ToDigitsOnly*
  commentId: Overload:Songhay.Extensions.StringExtensions.ToDigitsOnly
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_ToDigitsOnly_System_String_
  name: ToDigitsOnly
  nameWithType: StringExtensions.ToDigitsOnly
  fullName: Songhay.Extensions.StringExtensions.ToDigitsOnly
- uid: Songhay.Extensions.StringExtensions.ToIntString*
  commentId: Overload:Songhay.Extensions.StringExtensions.ToIntString
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_ToIntString_System_String_
  name: ToIntString
  nameWithType: StringExtensions.ToIntString
  fullName: Songhay.Extensions.StringExtensions.ToIntString
- uid: Songhay.Extensions.StringExtensions.ToNumberOfDirectoryLevels*
  commentId: Overload:Songhay.Extensions.StringExtensions.ToNumberOfDirectoryLevels
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_ToNumberOfDirectoryLevels_System_String_
  name: ToNumberOfDirectoryLevels
  nameWithType: StringExtensions.ToNumberOfDirectoryLevels
  fullName: Songhay.Extensions.StringExtensions.ToNumberOfDirectoryLevels
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Songhay.Extensions.StringExtensions.ToNumericString*
  commentId: Overload:Songhay.Extensions.StringExtensions.ToNumericString
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_ToNumericString_System_String_
  name: ToNumericString
  nameWithType: StringExtensions.ToNumericString
  fullName: Songhay.Extensions.StringExtensions.ToNumericString
- uid: Songhay.Extensions.StringExtensions.ToPascalCase*
  commentId: Overload:Songhay.Extensions.StringExtensions.ToPascalCase
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_ToPascalCase_System_String_
  name: ToPascalCase
  nameWithType: StringExtensions.ToPascalCase
  fullName: Songhay.Extensions.StringExtensions.ToPascalCase
- uid: Songhay.Extensions.StringExtensions.ToSnakeCase*
  commentId: Overload:Songhay.Extensions.StringExtensions.ToSnakeCase
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_ToSnakeCase_System_String_
  name: ToSnakeCase
  nameWithType: StringExtensions.ToSnakeCase
  fullName: Songhay.Extensions.StringExtensions.ToSnakeCase
- uid: Songhay.Extensions.StringExtensions.ToSubstringInContext*
  commentId: Overload:Songhay.Extensions.StringExtensions.ToSubstringInContext
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_ToSubstringInContext_System_String_System_String_System_Int32_
  name: ToSubstringInContext
  nameWithType: StringExtensions.ToSubstringInContext
  fullName: Songhay.Extensions.StringExtensions.ToSubstringInContext
- uid: Songhay.Extensions.StringExtensions.Truncate*
  commentId: Overload:Songhay.Extensions.StringExtensions.Truncate
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_Truncate_System_String_
  name: Truncate
  nameWithType: StringExtensions.Truncate
  fullName: Songhay.Extensions.StringExtensions.Truncate
- uid: Songhay.Models.ConsoleArgsScalars.HelpTextSuffix
  commentId: F:Songhay.Models.ConsoleArgsScalars.HelpTextSuffix
  href: Songhay.Models.ConsoleArgsScalars.html#Songhay_Models_ConsoleArgsScalars_HelpTextSuffix
  name: HelpTextSuffix
  nameWithType: ConsoleArgsScalars.HelpTextSuffix
  fullName: Songhay.Models.ConsoleArgsScalars.HelpTextSuffix
- uid: Songhay.Extensions.StringExtensions.WithConfigurationHelpTextSuffix*
  commentId: Overload:Songhay.Extensions.StringExtensions.WithConfigurationHelpTextSuffix
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_WithConfigurationHelpTextSuffix_System_String_
  name: WithConfigurationHelpTextSuffix
  nameWithType: StringExtensions.WithConfigurationHelpTextSuffix
  fullName: Songhay.Extensions.StringExtensions.WithConfigurationHelpTextSuffix
- uid: Songhay.Extensions.StringExtensions.CsvSplit*
  commentId: Overload:Songhay.Extensions.StringExtensions.CsvSplit
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_CsvSplit_System_String_
  name: CsvSplit
  nameWithType: StringExtensions.CsvSplit
  fullName: Songhay.Extensions.StringExtensions.CsvSplit
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: Songhay.Extensions.StringExtensions.EqualsInvariant*
  commentId: Overload:Songhay.Extensions.StringExtensions.EqualsInvariant
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_EqualsInvariant_System_String_System_String_
  name: EqualsInvariant
  nameWithType: StringExtensions.EqualsInvariant
  fullName: Songhay.Extensions.StringExtensions.EqualsInvariant
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.String.Format(System.String,System.Object[])
  commentId: M:System.String.Format(System.String,System.Object[])
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string.format#system-string-format(system-string-system-object())
  name: Format(string, params object[])
  nameWithType: string.Format(string, params object[])
  fullName: string.Format(string, params object[])
  nameWithType.vb: String.Format(String, ParamArray Object())
  fullName.vb: String.Format(String, ParamArray Object())
  name.vb: Format(String, ParamArray Object())
  spec.csharp:
  - uid: System.String.Format(System.String,System.Object[])
    name: Format
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string.format#system-string-format(system-string-system-object())
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: System.String.Format(System.String,System.Object[])
    name: Format
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string.format#system-string-format(system-string-system-object())
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: Songhay.Extensions.StringExtensions.EscapeInterpolation*
  commentId: Overload:Songhay.Extensions.StringExtensions.EscapeInterpolation
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_EscapeInterpolation_System_String_
  name: EscapeInterpolation
  nameWithType: StringExtensions.EscapeInterpolation
  fullName: Songhay.Extensions.StringExtensions.EscapeInterpolation
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Songhay.Extensions.StringExtensions.FromCamelCaseToEnumerable*
  commentId: Overload:Songhay.Extensions.StringExtensions.FromCamelCaseToEnumerable
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_FromCamelCaseToEnumerable_System_String_
  name: FromCamelCaseToEnumerable
  nameWithType: StringExtensions.FromCamelCaseToEnumerable
  fullName: Songhay.Extensions.StringExtensions.FromCamelCaseToEnumerable
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<string>
  nameWithType: IEnumerable<string>
  fullName: System.Collections.Generic.IEnumerable<string>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Songhay.Extensions.StringExtensions.In*
  commentId: Overload:Songhay.Extensions.StringExtensions.In
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_In_System_String_System_String_
  name: In
  nameWithType: StringExtensions.In
  fullName: Songhay.Extensions.StringExtensions.In
- uid: Songhay.Extensions.StringExtensions.InDoubleQuotes*
  commentId: Overload:Songhay.Extensions.StringExtensions.InDoubleQuotes
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_InDoubleQuotes_System_String_
  name: InDoubleQuotes
  nameWithType: StringExtensions.InDoubleQuotes
  fullName: Songhay.Extensions.StringExtensions.InDoubleQuotes
- uid: Songhay.Extensions.StringExtensions.InDoubleQuotesOrDefault*
  commentId: Overload:Songhay.Extensions.StringExtensions.InDoubleQuotesOrDefault
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_InDoubleQuotesOrDefault_System_String_System_String_
  name: InDoubleQuotesOrDefault
  nameWithType: StringExtensions.InDoubleQuotesOrDefault
  fullName: Songhay.Extensions.StringExtensions.InDoubleQuotesOrDefault
- uid: Songhay.Extensions.StringExtensions.InsertSpacesBeforeCaps*
  commentId: Overload:Songhay.Extensions.StringExtensions.InsertSpacesBeforeCaps
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_InsertSpacesBeforeCaps_System_String_
  name: InsertSpacesBeforeCaps
  nameWithType: StringExtensions.InsertSpacesBeforeCaps
  fullName: Songhay.Extensions.StringExtensions.InsertSpacesBeforeCaps
- uid: System.Collections.Generic.IEnumerable{System.Char}
  commentId: T:System.Collections.Generic.IEnumerable{System.Char}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<char>
  nameWithType: IEnumerable<char>
  fullName: System.Collections.Generic.IEnumerable<char>
  nameWithType.vb: IEnumerable(Of Char)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Char)
  name.vb: IEnumerable(Of Char)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Char
    name: char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Char
    name: Char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: )
- uid: Songhay.Extensions.StringExtensions.IsByte*
  commentId: Overload:Songhay.Extensions.StringExtensions.IsByte
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_IsByte_System_String_
  name: IsByte
  nameWithType: StringExtensions.IsByte
  fullName: Songhay.Extensions.StringExtensions.IsByte
- uid: System.Predicate{System.Byte}
  commentId: T:System.Predicate{System.Byte}
  parent: System
  definition: System.Predicate`1
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<byte>
  nameWithType: Predicate<byte>
  fullName: System.Predicate<byte>
  nameWithType.vb: Predicate(Of Byte)
  fullName.vb: System.Predicate(Of Byte)
  name.vb: Predicate(Of Byte)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Songhay.Extensions.StringExtensions.IsDecimal*
  commentId: Overload:Songhay.Extensions.StringExtensions.IsDecimal
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_IsDecimal_System_String_
  name: IsDecimal
  nameWithType: StringExtensions.IsDecimal
  fullName: Songhay.Extensions.StringExtensions.IsDecimal
- uid: System.Predicate{System.Decimal}
  commentId: T:System.Predicate{System.Decimal}
  parent: System
  definition: System.Predicate`1
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<decimal>
  nameWithType: Predicate<decimal>
  fullName: System.Predicate<decimal>
  nameWithType.vb: Predicate(Of Decimal)
  fullName.vb: System.Predicate(Of Decimal)
  name.vb: Predicate(Of Decimal)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - uid: System.Decimal
    name: decimal
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.decimal
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.decimal
  - name: )
- uid: Songhay.Extensions.StringExtensions.IsInteger*
  commentId: Overload:Songhay.Extensions.StringExtensions.IsInteger
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_IsInteger_System_String_
  name: IsInteger
  nameWithType: StringExtensions.IsInteger
  fullName: Songhay.Extensions.StringExtensions.IsInteger
- uid: System.Predicate{System.Int32}
  commentId: T:System.Predicate{System.Int32}
  parent: System
  definition: System.Predicate`1
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<int>
  nameWithType: Predicate<int>
  fullName: System.Predicate<int>
  nameWithType.vb: Predicate(Of Integer)
  fullName.vb: System.Predicate(Of Integer)
  name.vb: Predicate(Of Integer)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: Songhay.Extensions.StringExtensions.IsLong*
  commentId: Overload:Songhay.Extensions.StringExtensions.IsLong
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_IsLong_System_String_
  name: IsLong
  nameWithType: StringExtensions.IsLong
  fullName: Songhay.Extensions.StringExtensions.IsLong
- uid: System.Predicate{System.Int64}
  commentId: T:System.Predicate{System.Int64}
  parent: System
  definition: System.Predicate`1
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<long>
  nameWithType: Predicate<long>
  fullName: System.Predicate<long>
  nameWithType.vb: Predicate(Of Long)
  fullName.vb: System.Predicate(Of Long)
  name.vb: Predicate(Of Long)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: )
- uid: Songhay.Extensions.StringExtensions.IsTelephoneNumber*
  commentId: Overload:Songhay.Extensions.StringExtensions.IsTelephoneNumber
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_IsTelephoneNumber_System_String_
  name: IsTelephoneNumber
  nameWithType: StringExtensions.IsTelephoneNumber
  fullName: Songhay.Extensions.StringExtensions.IsTelephoneNumber
- uid: Songhay.Extensions.StringExtensions.IsUnc*
  commentId: Overload:Songhay.Extensions.StringExtensions.IsUnc
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_IsUnc_System_String_
  name: IsUnc
  nameWithType: StringExtensions.IsUnc
  fullName: Songhay.Extensions.StringExtensions.IsUnc
- uid: Songhay.Extensions.StringExtensions.LooksLikeEmailAddress*
  commentId: Overload:Songhay.Extensions.StringExtensions.LooksLikeEmailAddress
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_LooksLikeEmailAddress_System_String_
  name: LooksLikeEmailAddress
  nameWithType: StringExtensions.LooksLikeEmailAddress
  fullName: Songhay.Extensions.StringExtensions.LooksLikeEmailAddress
- uid: Songhay.Extensions.StringExtensions.RemoveDiacritics*
  commentId: Overload:Songhay.Extensions.StringExtensions.RemoveDiacritics
  href: Songhay.Extensions.StringExtensions.html#Songhay_Extensions_StringExtensions_RemoveDiacritics_System_String_
  name: RemoveDiacritics
  nameWithType: StringExtensions.RemoveDiacritics
  fullName: Songhay.Extensions.StringExtensions.RemoveDiacritics
